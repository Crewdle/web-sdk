/*! For license information please see sdk.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var s=t();for(var n in s)("object"==typeof exports?exports:e)[n]=s[n]}}(this,(()=>(()=>{"use strict";var e={"./src/constants/Connection.ts":(e,t,s)=>{s.r(t),s.d(t,{CONNECTION_GROUP_RETRY_DELAY:()=>r,CONNECTION_MAX:()=>i,CONNECTION_MIN:()=>n});const n=3,i=4*n,r=100},"./src/constants/Content.ts":(e,t,s)=>{s.r(t),s.d(t,{CONTENT_BPP:()=>o,CONTENT_FILE_CHUNK_SIZE:()=>c,CONTENT_FILE_HEADER_SIZE:()=>d,CONTENT_FPS:()=>n,CONTENT_KEY_VALUE_DATABASE_LAYOUT_TABLE_NAME:()=>b,CONTENT_KEY_VALUE_DATABASE_STATS_DEBOUNCE:()=>y,CONTENT_KEY_VALUE_DATABASE_SYNC_TIMEOUT:()=>S,CONTENT_KEY_VALUE_DATABASE_TRANSACTION_TABLE_NAME:()=>m,CONTENT_MAX_HEIGHT:()=>r,CONTENT_MAX_WIDTH:()=>i,CONTENT_OBJECT_STORE_LAST_TRANSACTION_OBJECT_NAME:()=>u,CONTENT_OBJECT_STORE_PENDING_EXTENSION:()=>h,CONTENT_OBJECT_STORE_PENDING_RETRY_DELAY:()=>p,CONTENT_OBJECT_STORE_STATS_DEBOUNCE:()=>g,CONTENT_PUBSUB_TOPIC_STATS_DEBOUNCE:()=>l,CONTENT_UPDATE_DEBOUNCE:()=>a});const n=24,i=1280,r=720,o=.12,a=500,c=260096,d=4,l=5e3,u=".crewdle-last-transaction",h=".crewdle-pending",p=6e4,g=5e3,m=".crewdle-transactions",b=".crewdle-layout",S=3e4,y=5e3},"./src/constants/Detection.ts":(e,t,s)=>{s.r(t),s.d(t,{DETECTION_ISSUE_TIMEOUT:()=>n});const n=3e4},"./src/constants/DetectionIssueRules.ts":(e,t,s)=>{s.r(t),s.d(t,{DETECTION_AUDIO_ISSUE_RULES:()=>m,DETECTION_CORE_ISSUE_RULES:()=>p,DETECTION_ISSUE_AV_DELAY_THRESHOLD:()=>l,DETECTION_ISSUE_BITRATE_THRESHOLD:()=>a,DETECTION_ISSUE_DT_THRESHOLD:()=>o,DETECTION_ISSUE_FPS_THRESHOLD:()=>h,DETECTION_ISSUE_JITTER_THRESHOLD:()=>c,DETECTION_ISSUE_RTT_THRESHOLD:()=>d,DETECTION_ISSUE_ST_THRESHOLD:()=>r,DETECTION_ISSUE_TPF_THRESHOLD:()=>u,DETECTION_RECEIVER_ISSUE_RULES:()=>S,DETECTION_SENDER_ISSUE_RULES:()=>b,DETECTION_VIDEO_ISSUE_RULES:()=>g});var n=s("./src/constants/Content.ts"),i=s("./src/interfaces/Detection/Detection.ts");const r=2.5,o=.5,a=.25,c=.6,d=1/0,l=300,u=.75,h=10,p=[{type:i.IssueType.STVolatility,reportMetric:e=>e.STVolatility,maxThreshold:r},{type:i.IssueType.DTVolatility,reportMetric:e=>e.DTVolatility,maxThreshold:o}],g=[{type:i.IssueType.TimePerFrame,reportMetric:e=>{const t=1e3/e.FPS;return e.timePerFrame/t},maxThreshold:u},{type:i.IssueType.Bitrate,reportMetric:e=>{const t=e.FPS*e.frameWidth*e.frameHeight*n.CONTENT_BPP;return e.bitrate/t},minThreshold:a},{type:i.IssueType.Jitter,reportMetric:e=>e.jitter,maxThreshold:c},{type:i.IssueType.FramePerSecond,reportMetric:e=>e.FPS,minThreshold:h}],m=[{type:i.IssueType.Jitter,reportMetric:e=>e.jitter,maxThreshold:c}],b=[{type:i.IssueType.RoundTripTime,reportMetric:e=>e.roundTripTime,maxThreshold:d}],S=[{type:i.IssueType.AudioVideoDelay,reportMetric:e=>e.AudioVideoDelay,maxThreshold:l}]},"./src/constants/DetectionProblemRules.ts":(e,t,s)=>{s.r(t),s.d(t,{DETECTION_PROBLEM_AV_DELAY_THRESHOLD:()=>a,DETECTION_PROBLEM_BITRATE_THRESHOLD:()=>d,DETECTION_PROBLEM_DT_THRESHOLD:()=>r,DETECTION_PROBLEM_FPS_THRESHOLD:()=>c,DETECTION_PROBLEM_JITTER_THRESHOLD:()=>l,DETECTION_PROBLEM_RTT_THRESHOLD:()=>u,DETECTION_PROBLEM_RULES:()=>h,DETECTION_PROBLEM_ST_THRESHOLD:()=>i,DETECTION_PROBLEM_TPF_THRESHOLD:()=>o});var n=s("./src/interfaces/Detection/Detection.ts");const i=5,r=5,o=3,a=2,c=3,d=3,l=3,u=3,h=[{type:n.ProblemType.CPUCycle,issues:[{type:n.IssueType.STVolatility,threshold:i},{type:n.IssueType.DTVolatility,threshold:r}]},{type:n.ProblemType.TimePerFrame,issues:[{type:n.IssueType.TimePerFrame,threshold:o}]},{type:n.ProblemType.AudioVideoDelay,issues:[{type:n.IssueType.AudioVideoDelay,threshold:a}]},{type:n.ProblemType.FramePerSecond,issues:[{type:n.IssueType.FramePerSecond,threshold:c}]},{type:n.ProblemType.Bitrate,issues:[{type:n.IssueType.Bitrate,threshold:d}]},{type:n.ProblemType.Jitter,issues:[{type:n.IssueType.Jitter,threshold:l}]},{type:n.ProblemType.RoundTripTime,issues:[{type:n.IssueType.RoundTripTime,threshold:u}]}]},"./src/constants/Interval.ts":(e,t,s)=>{s.r(t),s.d(t,{INTERVAL_TIME:()=>n});const n=100},"./src/constants/Node.ts":(e,t,s)=>{s.r(t),s.d(t,{NODE_AGENT_CAPACITY_REPORT_INTERVAL:()=>m,NODE_CLEAN_REMOTE_NODES_INTERVAL:()=>p,NODE_CLEAN_REMOTE_NODES_THRESHOLD:()=>g,NODE_DISTANCE_HOP:()=>d,NODE_DISTANCE_MAX:()=>h,NODE_DISTANCE_RESOLUTION:()=>l,NODE_DISTANCE_TRACKS:()=>u,NODE_PROCESS_RANK_DEBOUCE_TIME:()=>o,NODE_PROCESS_RANK_DEBOUCE_TIME_LIMIT:()=>c,NODE_PROCESS_RANK_DEBOUCE_TIME_MAX:()=>a,NODE_UPDATE_DEBOUNCE_TIME:()=>n,NODE_UPDATE_DEBOUNCE_TIME_LIMIT:()=>r,NODE_UPDATE_DEBOUNCE_TIME_MAX:()=>i});const n=1e3,i=1e4,r=i-n,o=1e3,a=1e4,c=a-o,d=1,l=0,u=10,h=10,p=6e4,g=3e5,m=3e5},"./src/constants/PeerConnection.ts":(e,t,s)=>{s.r(t),s.d(t,{PEER_CONNECTION_BUFFER_THRESHOLD:()=>g,PEER_CONNECTION_CHUNK_IDENTIFIER:()=>h,PEER_CONNECTION_CHUNK_SIZE:()=>p,PEER_CONNECTION_DATACHANNEL_DISCONNECT_HANDLER_DELAY:()=>b,PEER_CONNECTION_DATACHANNEL_RETRY_DELAY:()=>m,PEER_CONNECTION_HANDSHAKE_DEBOUNCE:()=>u,PEER_CONNECTION_HEARTBEAT_INTERVAL:()=>r,PEER_CONNECTION_HEARTBEAT_PING:()=>n,PEER_CONNECTION_HEARTBEAT_PONG:()=>i,PEER_CONNECTION_HEARTBEAT_THRESHOLD:()=>o,PEER_CONNECTION_HEARTBEAT_TIMEOUT:()=>d,PEER_CONNECTION_MESSAGE_RETRY:()=>l,PEER_CONNECTION_RECONNECT_TIMEOUT:()=>a,PEER_CONNECTION_TIMEOUT:()=>c});const n="0",i="1",r=3e3,o=5*r,a=3e4,c=3e4,d=6e4,l=5e3,u=500,h="chunk",p=261120,g=65536,m=100,b=250},"./src/constants/Remediation.ts":(e,t,s)=>{s.r(t),s.d(t,{REMEDIATION_BITRATE:()=>l,REMEDIATION_DOWNGRADE_WAIT_TIME:()=>n,REMEDIATION_FPS:()=>d,REMEDIATION_MAX_RESOLUTION_SCALE:()=>o,REMEDIATION_MIN_BITRATE:()=>a,REMEDIATION_MIN_FPS:()=>r,REMEDIATION_RESOLUTION_SCALE:()=>c,REMEDIATION_UPGRADE_WAIT_TIME:()=>i});const n=5e3,i=15e3,r=15,o=4,a=5e4,c=.5,d=3,l=.25},"./src/constants/RemediationRules.ts":(e,t,s)=>{s.r(t),s.d(t,{REMEDIATION_RULES:()=>r});var n=s("./src/interfaces/Detection/Detection.ts"),i=s("./src/interfaces/Remediation/Remediation.ts");const r=[{problemType:n.ProblemType.CPUCycle,remediations:[{type:i.RemediationMessageType.Remediation,component:i.RemediationComponent.Resolution,action:i.RemediationAction.Downgrade},{type:i.RemediationMessageType.RemoteRemediation,component:i.RemediationComponent.Resolution,action:i.RemediationAction.Downgrade}]},{problemType:n.ProblemType.TimePerFrame,remediations:[{type:i.RemediationMessageType.Remediation,component:i.RemediationComponent.Resolution,action:i.RemediationAction.Downgrade}]},{problemType:n.ProblemType.AudioVideoDelay,remediations:[{type:i.RemediationMessageType.Remediation,component:i.RemediationComponent.Resolution,action:i.RemediationAction.Downgrade}]},{problemType:n.ProblemType.FramePerSecond,remediations:[{type:i.RemediationMessageType.Remediation,component:i.RemediationComponent.Resolution,action:i.RemediationAction.Downgrade}]},{problemType:n.ProblemType.Bitrate,remediations:[{type:i.RemediationMessageType.Remediation,component:i.RemediationComponent.Bitrate,action:i.RemediationAction.Downgrade}]},{problemType:n.ProblemType.Jitter,remediations:[{type:i.RemediationMessageType.Remediation,component:i.RemediationComponent.Bitrate,action:i.RemediationAction.Downgrade}]},{problemType:n.ProblemType.RoundTripTime,remediations:[{type:i.RemediationMessageType.Remediation,component:i.RemediationComponent.Bitrate,action:i.RemediationAction.Downgrade}]}]},"./src/constants/Services.ts":(e,t,s)=>{s.r(t),s.d(t,{MESSAGE_BUFFER_CLEANUP_INTERVAL:()=>i,MESSAGE_BUFFER_RETENTION_TIME:()=>n});const n=12e5,i=12e4},"./src/constants/Stats.ts":(e,t,s)=>{s.r(t),s.d(t,{STATS_COLLECT_DELAY:()=>n,STATS_INBOUND:()=>a,STATS_OUTBOUND:()=>r,STATS_RECEIVER_FILTERS:()=>d,STATS_REMOTE_INBOUND:()=>o,STATS_REPORT_DELAY:()=>i,STATS_SENDER_FILTERS:()=>c});const n=1e3,i=3e4,r="outbound-rtp",o="remote-inbound-rtp",a="inbound-rtp",c=[r,o],d=[a]},"./src/constants/Subscription.ts":(e,t,s)=>{s.r(t),s.d(t,{SUBSCRIPTION_MAX_OUTGOING:()=>r,SUBSCRIPTION_MAX_RETRY_COUNT:()=>i,SUBSCRIPTION_REQUEST_RETRY_DELAY:()=>a,SUBSCRIPTION_REQUEST_TIMEOUT:()=>n,SUBSCRIPTION_RETRY_DELAY:()=>o});const n=2e3,i=10,r=1,o=1e3,a=100},"./src/constants/System.ts":(e,t,s)=>{s.r(t),s.d(t,{SYSTEM_TOPIC:()=>n,SYSTEM_TOPIC_INTERNAL:()=>i});const n=0,i="internal"},"./src/environments/Environment.ts":(e,t,s)=>{s.r(t),s.d(t,{Environment:()=>o,isObject:()=>i,mergeDeep:()=>r});let n=s("./src/environments/environment.default.ts").Environment;function i(e){return!(!e||"object"!=typeof e||Array.isArray(e))}function r(e,...t){if(!Array.isArray(t)||0===t.length)return e;const s=t.shift();if(i(e)&&i(s))for(const t in s)i(s[t])?(e[t]||Object.assign(e,{[t]:{}}),r(e[t],s[t])):Object.assign(e,{[t]:s[t]});return r(e,...t)}n=r(n,s("./src/environments/environment.dev.ts").Environment);const o=n},"./src/environments/environment.default.ts":(e,t,s)=>{s.r(t),s.d(t,{Environment:()=>n});const n={version:"0.1.0",isProduction:!1,firebaseConfig:{apiKey:"AIzaSyDHDgmA574NVeMWV9SpW-q4QQMjkANuueg",authDomain:"crewdle-sdk-stg.firebaseapp.com",databaseURL:"https://crewdle-sdk-stg-default-rtdb.firebaseio.com",projectId:"crewdle-sdk-stg",storageBucket:"crewdle-sdk-stg.appspot.com",appId:"1:519415702791:web:5dd39042f881cfde3251a2",functionsRegion:"northamerica-northeast1"},aws:{endpoint:"https://3nabhjyaabdadnpczsgrye6upu.appsync-api.us-east-1.amazonaws.com/graphql",region:"us-east-1"}}},"./src/environments/environment.dev.ts":(e,t,s)=>{s.r(t),s.d(t,{Environment:()=>n});const n={}},"./src/environments/environment.prd.ts":(e,t,s)=>{s.r(t),s.d(t,{Environment:()=>n});const n={isProduction:!0,firebaseConfig:{apiKey:"AIzaSyCY6T49D81QpoZ_ApZ6atpT4c3Yy0_lWvg",authDomain:"crewdle-sdk.firebaseapp.com",databaseURL:"https://crewdle-sdk-default-rtdb.firebaseio.com",projectId:"crewdle-sdk",storageBucket:"crewdle-sdk.appspot.com",messagingSenderId:"420235181083",appId:"1:420235181083:web:4eff6062bd845cb0748cbe",measurementId:"G-F7W8KXRKQB"},aws:{endpoint:"https://e7if27umpzf2ff4k63wgzo4pri.appsync-api.us-east-1.amazonaws.com/graphql",region:"us-east-1"}}},"./src/environments/environment.stg.ts":(e,t,s)=>{s.r(t),s.d(t,{Environment:()=>n});const n={}},"./src/errors/EarlyReturnError.ts":(e,t,s)=>{s.r(t),s.d(t,{EarlyReturnError:()=>n});class n extends Error{constructor(e){super(`Early return: ${e}`)}}},"./src/errors/SDKInternalError.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{SDKInternalError:()=>r}),function(e){e.ConnectionNotinitialized="connection-not-initialized",e.ConnectionNotConnected="connection-not-connected",e.ConnectionNoRetryQueue="connection-no-retry-queue",e.ConnectionInvalidDataEvent="connection-invalid-data-event",e.ObjectStoreCannotWriteTransaction="object-store-cannot-write-transaction",e.ObjectStoreInvalidSyncMessage="object-store-invalid-sync-message",e.ObjectStoreNotSynced="object-store-not-synced",e.InvalidDataChannel="invalid-data-chanel",e.InvalidPublisher="invalid-publisher",e.InvalidSubscriber="invalid-subscriber",e.InvalidSubscription="invalid-subscription",e.KeyValueDatabaseCreationFailed="key-value-database-creation-failed",e.KeyValueDatabaseTableDoesNotExist="key-value-database-table-does-not-exist",e.KeyValueDatabaseTransactionTableNotInitialized="key-value-database-transaction-table-not-initialized",e.KeyValueDatabaseTransactionValueNotSet="key-value-database-transaction-value-not-set",e.LocalMediaStreamDoesNotExist="local-stream-does-not-exist",e.MissingRemoteConnection="missing-incoming-connection",e.MissingSystemTopic="missing-system-topic",e.OutgoingMediaStreamNoTopic="outgoing-stream-no-topic",e.RemoteMediaStreamDoesNotExist="remote-stream-does-not-exist",e.RemoteMediaStreamMissingProviderId="remote-stream-missing-provider-id",e.RemoteConnectionExists="remote-connection-exists",e.SubscriptionRequestDoesNotExist="subscription-request-does-not-exist",e.SubscriptionRequestFailed="subscription-request-failed",e.SubscriptionRequestNoAnswer="subscription-request-no-answer",e.NodeDoesNotExist="node-does-not-exist",e.NodeAlreadyExist="node-already-exist",e.PeerConnectionInvalidDestination="peer-connection-invalid-destination"}(n||(n={}));const i=new Map([[n.ConnectionNotinitialized,"Connection not initialized."],[n.ConnectionNotConnected,"Connection not connected."],[n.ConnectionNoRetryQueue,"Connection does not have a retry queue."],[n.ConnectionInvalidDataEvent,"Invalid data event."],[n.ObjectStoreCannotWriteTransaction,"Cannot write transaction."],[n.ObjectStoreInvalidSyncMessage,"Invalid object store sync message."],[n.ObjectStoreNotSynced,"Object store not synced."],[n.InvalidDataChannel,"Invalid data chan_NO_RENAMEENAl."],[n.InvalidPublisher,"Invalid publisher."],[n.InvalidSubscriber,"Invalid subscriber."],[n.InvalidSubscription,"Invalid subscription."],[n.KeyValueDatabaseCreationFailed,"Key-value database creation failed."],[n.KeyValueDatabaseTableDoesNotExist,"Key-value database table does not exist."],[n.KeyValueDatabaseTransactionTableNotInitialized,"Key-value database transaction table not initialized."],[n.KeyValueDatabaseTransactionValueNotSet,"Key-value database transaction value not set."],[n.LocalMediaStreamDoesNotExist,"Local stream does not exist."],[n.MissingRemoteConnection,"Connection does not exist."],[n.MissingSystemTopic,"The system topic has not been registered."],[n.OutgoingMediaStreamNoTopic,"Outgoing stream does not have a topic."],[n.RemoteMediaStreamDoesNotExist,"Remote stream does not exist."],[n.RemoteMediaStreamMissingProviderId,"Remote media stream is missing a provider id."],[n.RemoteConnectionExists,"Remote connection already exists."],[n.SubscriptionRequestDoesNotExist,"Subscription request does not exist."],[n.SubscriptionRequestFailed,"Subscription request failed."],[n.SubscriptionRequestNoAnswer,"Subscription request has not been answered."],[n.NodeDoesNotExist,"Node does not exist."],[n.NodeAlreadyExist,"Node already exists."],[n.PeerConnectionInvalidDestination,"Invalid peer connection event destination."]]);class r extends Error{code;static codes=n;data;constructor(e,t){super(`Internal SDK Error: ${e}: ${i.get(e)}\nAdditional data: ${JSON.stringify(t)}`),this.code=e,this.data=t||{}}}},"./src/interfaces/Connection/PeerConnection.ts":(e,t,s)=>{var n,i,r;s.r(t),s.d(t,{PeerConnectionMessageType:()=>i,PeerConnectionOrigin:()=>r,PeerConnectionType:()=>n}),function(e){e[e.Core=0]="Core",e[e.Optimization=1]="Optimization"}(n||(n={})),function(e){e[e.Offer=0]="Offer",e[e.Answer=1]="Answer",e[e.Handshake=2]="Handshake",e[e.Success=3]="Success",e[e.NeedRestart=4]="NeedRestart",e[e.Restart=5]="Restart",e[e.Disconnect=6]="Disconnect",e[e.Stats=7]="Stats",e[e.OptimizationConnectionSuccess=8]="OptimizationConnectionSuccess"}(i||(i={})),function(e){e[e.Sender=0]="Sender",e[e.Receiver=1]="Receiver"}(r||(r={}))},"./src/interfaces/Content/Content.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{ContentMessageType:()=>n}),function(e){e[e.PublishMediaStream=0]="PublishMediaStream",e[e.UnpublishMediaStream=1]="UnpublishMediaStream",e[e.SubscribeMediaStream=2]="SubscribeMediaStream",e[e.UpdateMediaStream=3]="UpdateMediaStream",e[e.UnsubscribeMediaStream=4]="UnsubscribeMediaStream",e[e.CloseObjectStoreBucket=5]="CloseObjectStoreBucket",e[e.CloseKeyValueDatabase=6]="CloseKeyValueDatabase",e[e.ClosePubSubTopic=7]="ClosePubSubTopic",e[e.CloseMediaStream=8]="CloseMediaStream",e[e.LocalMediaStreamTrackFail=9]="LocalMediaStreamTrackFail",e[e.RemoteMediaStreamTrackFail=10]="RemoteMediaStreamTrackFail",e[e.RequestSyncKeyValueDatabase=11]="RequestSyncKeyValueDatabase",e[e.SendTransactionsDump=12]="SendTransactionsDump",e[e.RequestTransactionsValue=13]="RequestTransactionsValue",e[e.PubSubTopicStats=14]="PubSubTopicStats",e[e.ObjectStoreStats=15]="ObjectStoreStats",e[e.KeyValueDatabaseStats=16]="KeyValueDatabaseStats"}(n||(n={}))},"./src/interfaces/Content/DataContent.ts":(e,t,s)=>{var n,i,r,o;s.r(t),s.d(t,{InternalDatabaseTableReadAction:()=>o,InternalDatabaseTableWriteAction:()=>r,InternalObjectStorePayloadAction:()=>n,InternalObjectStorePayloadType:()=>i}),function(e){e.FileWrite="file-write",e.FolderCreate="folder-create",e.Delete="delete",e.Move="move",e.RequestFile="request-file",e.RequestAccepted="request-accepted",e.RequestFileSync="request-file-sync",e.RequestFileWrite="request-file-write"}(n||(n={})),function(e){e.Request="request",e.Transaction="transaction"}(i||(i={})),function(e){e.Add="add",e.Update="update",e.Delete="delete"}(r||(r={})),function(e){e.Get="get",e.List="list",e.Count="count"}(o||(o={}))},"./src/interfaces/Detection/Detection.ts":(e,t,s)=>{var n,i,r;s.r(t),s.d(t,{DetectionMessageType:()=>r,IssueType:()=>n,ProblemType:()=>i}),function(e){e.STVolatility="st_volatility",e.DTVolatility="dt_volatility",e.TimePerFrame="time_per_frame",e.Bitrate="bitrate",e.Jitter="jitter",e.FramePerSecond="fps",e.RoundTripTime="rtt",e.AudioVideoDelay="av_delay"}(n||(n={})),function(e){e.CPUCycle="cpu.cycle",e.TimePerFrame="cpu.time_per_frame",e.AudioVideoDelay="cpu.av_delay",e.FramePerSecond="cpu.fps",e.Bitrate="bandwidth.bitrate",e.Jitter="bandwidth.jitter",e.RoundTripTime="bandwidth.rtt"}(i||(i={})),function(e){e[e.Problem=0]="Problem"}(r||(r={}))},"./src/interfaces/Node/Node.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{NodeStatus:()=>n}),function(e){e[e.Online=0]="Online",e[e.Offline=1]="Offline"}(n||(n={}))},"./src/interfaces/Node/NodeMessage.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{NodeMessageType:()=>n}),function(e){e[e.NodeJoin=0]="NodeJoin",e[e.NodeUpdate=1]="NodeUpdate",e[e.NodeConnectionsUpdate=2]="NodeConnectionsUpdate",e[e.NodeLeave=3]="NodeLeave"}(n||(n={}))},"./src/interfaces/Remediation/Remediation.ts":(e,t,s)=>{var n,i,r;s.r(t),s.d(t,{RemediationAction:()=>i,RemediationComponent:()=>r,RemediationMessageType:()=>n}),function(e){e[e.Remediation=0]="Remediation",e[e.RemoteRemediation=1]="RemoteRemediation"}(n||(n={})),function(e){e.Upgrade="upgrade",e.Downgrade="downgrade"}(i||(i={})),function(e){e.Resolution="resolution",e.Bitrate="bitrate"}(r||(r={}))},"./src/interfaces/SDK/SDK.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{IInternalFeatures:()=>n}),function(e){e.MediaStream="media-stream"}(n||(n={}))},"./src/interfaces/Stats/Stats.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{StatsMessageType:()=>n}),function(e){e[e.StreamReport=0]="StreamReport",e[e.LocalReport=1]="LocalReport"}(n||(n={}))},"./src/interfaces/Subscription/MediaSubscriptionEvent.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{MediaSubscriptionAction:()=>n}),function(e){e[e.Add=0]="Add",e[e.Remove=1]="Remove",e[e.Update=2]="Update",e[e.RemoteAdd=3]="RemoteAdd",e[e.RemoteRemove=4]="RemoteRemove"}(n||(n={}))},"./src/interfaces/Subscription/Subscription.ts":(e,t,s)=>{var n,i;s.r(t),s.d(t,{SubscriptionRequestType:()=>n,SubscriptionType:()=>i}),function(e){e[e.Waiting=0]="Waiting",e[e.Accepted=1]="Accepted",e[e.Rejected=2]="Rejected"}(n||(n={})),function(e){e.Incoming="in",e.Outgoing="out"}(i||(i={}))},"./src/interfaces/Subscription/SubscriptionMessage.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{SubscriptionMessageType:()=>n}),function(e){e[e.SubscribeMediaStream=0]="SubscribeMediaStream",e[e.UpdateMediaStream=1]="UpdateMediaStream",e[e.UnsubscribeMediaStream=2]="UnsubscribeMediaStream",e[e.NeedMediaStream=3]="NeedMediaStream",e[e.RestartNeedMediaStream=4]="RestartNeedMediaStream",e[e.CanProvideMediaStream=5]="CanProvideMediaStream",e[e.CannotProvideMediaStream=6]="CannotProvideMediaStream",e[e.MediaStreamUnavailable=7]="MediaStreamUnavailable"}(n||(n={}))},"./src/interfaces/Subscription/SystemEvent.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{SystemMessageType:()=>n}),function(e){e[e.PeerConnection=0]="PeerConnection",e[e.Node=1]="Node",e[e.Content=2]="Content",e[e.Subscription=3]="Subscription",e[e.Stats=4]="Stats",e[e.Detection=5]="Detection",e[e.Remediation=6]="Remediation"}(n||(n={}))},"./src/interfaces/Utils/Logger.ts":(e,t,s)=>{var n,i;s.r(t),s.d(t,{LoggingChannels:()=>i,LoggingServices:()=>n}),function(e){e.PubSub="pubsub",e.ObjectStorage="object-storage",e.KeyValueDatabase="key-value-database",e.MediaStream="media-stream"}(n||(n={})),function(e){e.All="all",e.Default="default",e.Connection="connection",e.ConnectionState="connection-state",e.Cluster="cluster",e.Content="content",e.Detection="detection",e.Events="events",e.Error="error",e.Node="node",e.Pool="pool",e.PubSub="pubsub",e.Remediation="remediation",e.Signaling="signaling",e.Stats="stats",e.Subscription="subscription",e.Support="support",e.System="system",e.SystemStats="system-stats",e.TestPage="test-page",e.PeerConnection="peer-connection"}(i||(i={}))},"./src/interfaces/Utils/Queue.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{QueueElementPriority:()=>n}),function(e){e[e.High=0]="High",e[e.Medium=1]="Medium",e[e.Low=2]="Low"}(n||(n={}))},"./src/interfaces/Utils/Support.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{SupportFeatureName:()=>n}),function(e){e.AudioContext="AudioContext",e.AudioOutput="AudioOutput",e.AudioVolume="AudioVolume",e.Backgrounds="Backgrounds",e.DeviceConfig="DeviceConfig",e.MediaStream="MediaStream",e.Recording="Recording",e.ScreenSharing="ScreenSharing",e.WebGL="WebGL",e.WebRTC="WebRTC"}(n||(n={}))},"./src/models/Cluster/Cluster.ts":(e,t,s)=>{s.r(t),s.d(t,{Cluster:()=>a});var n=s("@crewdle/web-sdk-types"),i=s("./src/public/errors/SDKClientError.ts"),r=s("./src/models/Cluster/ClusterEventEmitter.ts"),o=s("./src/models/Orchestrator/Orchestrator.ts");class a{vendorId;clusterId;authNode;eventEmitter;orchestrator;constructor(e,t,s,n,i,a,c=new r.ClusterEventEmitter){this.vendorId=e,this.clusterId=t,this.authNode=s,this.eventEmitter=c,this.orchestrator=new o.Orchestrator(this.vendorId,this.clusterId,s,n,i,a,this)}async join(){await this.orchestrator.initialize(),this.authNode.type===n.NodeType.User&&this.authNode.registerCluster(this.clusterId,(e=>{this.orchestrator.updateUser(e)}))}leave(){this.orchestrator.close(),this.authNode.type===n.NodeType.User&&this.authNode.unregisterCluster(this.clusterId),this.emit("cluster-leave",void 0)}openPubSubTopic(e){const t=this.orchestrator.openPubSubTopic(e);return{getName:t.getName.bind(t),getOwnerId:t.getOwnerId.bind(t),getContentType:t.getContentType.bind(t),publish:t.publish.bind(t),subscribe:t.subscribe.bind(t),unsubscribe:t.unsubscribe.bind(t),close:t.close.bind(t)}}async openObjectStoreBucket(e){const t=await this.orchestrator.openObjectStoreBucket(e);return{getName:t.getName.bind(t),getOwnerId:t.getOwnerId.bind(t),getContentType:t.getContentType.bind(t),publish:t.publish.bind(t),unpublish:t.unpublish.bind(t),get:t.get.bind(t),list:t.list.bind(t),subscribe:t.subscribe.bind(t),unsubscribe:t.unsubscribe.bind(t),close:t.close.bind(t)}}async openKeyValueDatabase(e,t){const s=await this.orchestrator.openKeyValueDatabase(e,t);return{getName:s.getName.bind(s),getOwnerId:s.getOwnerId.bind(s),getContentType:s.getContentType.bind(s),getTable:s.getTable.bind(s),subscribe:s.subscribe.bind(s),unsubscribe:s.unsubscribe.bind(s),close:s.close.bind(s)}}getPubSubTopics(e){return this.orchestrator.getPubSubTopics(e).map((e=>({getName:e.getName.bind(e),getOwnerId:e.getOwnerId.bind(e),getContentType:e.getContentType.bind(e),publish:e.publish.bind(e),subscribe:e.subscribe.bind(e),unsubscribe:e.unsubscribe.bind(e),close:e.close.bind(e)})))}getObjectStoreBuckets(e){return this.orchestrator.getObjectStoreBuckets(e).map((e=>({getName:e.getName.bind(e),getOwnerId:e.getOwnerId.bind(e),getContentType:e.getContentType.bind(e),publish:e.publish.bind(e),unpublish:e.unpublish.bind(e),get:e.get.bind(e),list:e.list.bind(e),subscribe:e.subscribe.bind(e),unsubscribe:e.unsubscribe.bind(e),close:e.close.bind(e)})))}getKeyValueDatabases(e){return this.orchestrator.getKeyValueDatabases(e).map((e=>({getName:e.getName.bind(e),getOwnerId:e.getOwnerId.bind(e),getContentType:e.getContentType.bind(e),getTable:e.getTable.bind(e),subscribe:e.subscribe.bind(e),unsubscribe:e.unsubscribe.bind(e),close:e.close.bind(e)})))}publishLocalMediaStream(e,t){const s=this.orchestrator.createLocalMediaStream(e,t);return{getLabel:s.getLabel.bind(s),getOwnerId:s.getOwnerId.bind(s),getContentType:s.getContentType.bind(s),getMediaStream:s.getMediaStream.bind(s),setPriority:s.setPriority.bind(s),unpublish:s.unpublish.bind(s)}}publishLocalDynamicMediaStream(e,t){const s=this.orchestrator.createLocalDynamicMediaStream(e,t);return{getLabel:s.getLabel.bind(s),getOwnerId:s.getOwnerId.bind(s),getContentType:s.getContentType.bind(s),setPriority:s.setPriority.bind(s),unpublish:s.unpublish.bind(s),getMediaStream:s.getMediaStream.bind(s),addTrack:s.addTrack.bind(s),removeTrack:s.removeTrack.bind(s),replaceTrack:s.replaceTrack.bind(s),setTransformations:s.setTransformations.bind(s)}}getLocalMediaStreams(e){return this.orchestrator.getLocalMediaStreams(e).map((e=>({getLabel:e.getLabel.bind(e),getOwnerId:e.getOwnerId.bind(e),getContentType:e.getContentType.bind(e),getMediaStream:e.getMediaStream.bind(e),setPriority:e.setPriority.bind(e),unpublish:e.unpublish.bind(e)})))}getRemoteMediaStreams(e){return this.orchestrator.getRemoteMediaStreams(e).map((e=>({getLabel:e.getLabel.bind(e),getOwnerId:e.getOwnerId.bind(e),getContentType:e.getContentType.bind(e),getMediaStream:e.getMediaStream.bind(e),subscribe:e.subscribe.bind(e),unsubscribe:e.unsubscribe.bind(e),getAvailableTrackKinds:e.getAvailableTrackKinds.bind(e),update:e.update.bind(e),onProviderChange:e.onProviderChange.bind(e)})))}getLocalNode(){const e=this.orchestrator.getLocalNode();switch(e.type){case n.NodeType.User:return{type:n.NodeType.User,getId:e.getId.bind(e),getDisplayName:e.getDisplayName.bind(e),getEmail:e.getEmail.bind(e),getRemoteConnections:e.getRemoteConnections.bind(e),setDisplayName:e.setDisplayName.bind(e),setEmail:e.setEmail.bind(e)};case n.NodeType.Agent:default:return{type:n.NodeType.Agent,getId:e.getId.bind(e),getRemoteConnections:e.getRemoteConnections.bind(e)}}}getRemoteNodes(e){return this.orchestrator.getRemoteNodes(e).map((e=>{switch(e.type){case n.NodeType.User:return{type:n.NodeType.User,getId:e.getId.bind(e),getDisplayName:e.getDisplayName.bind(e),getEmail:e.getEmail.bind(e),getRemoteConnections:e.getRemoteConnections.bind(e)};case n.NodeType.Agent:return{type:n.NodeType.Agent,getId:e.getId.bind(e),getRemoteConnections:e.getRemoteConnections.bind(e)};default:throw new i.SDKClientError(i.SDKClientErrorCodes.NodeInvalidType,"Invalid node type")}}))}on=(...e)=>{this.eventEmitter.on(...e)};emit=(...e)=>this.eventEmitter.emit(...e);off(...e){this.eventEmitter.off(...e)}}},"./src/models/Cluster/ClusterEventEmitter.ts":(e,t,s)=>{s.r(t),s.d(t,{ClusterEventEmitter:()=>r});var n=s("./src/interfaces/Utils/Logger.ts"),i=s("./src/utils/Logger/Logger.ts");class r{registeredListeners;bufferedEvents;eventTarget;constructor(e=new Map,t=new Map,s=new EventTarget){this.registeredListeners=e,this.bufferedEvents=t,this.eventTarget=s}emit=(e,t)=>this.registeredListeners.has(e)?(i.default.log(n.LoggingChannels.Events,"Emitting event on local cluster",{event:e,data:t}),this.eventTarget.dispatchEvent(new CustomEvent(e,{detail:t})),!0):(this.bufferEvent(e,t),!1);on=(e,t)=>{const s=e=>{i.default.log(n.LoggingChannels.Events,"Received event on cluster",e.type,e.detail),t(e.detail)};return this.registeredListeners.set(e,s),this.eventTarget.addEventListener(e,s),i.default.log(n.LoggingChannels.Cluster,"Subscribing to an event: on",e,t),this.consumeBufferedEvents(e),this};off(e){if(!e)return this.registeredListeners.forEach(((e,t)=>{this.eventTarget.removeEventListener(t,e)})),void this.registeredListeners.clear();"string"==typeof e&&this.removeListener(e),Array.isArray(e)&&e.forEach((e=>{this.removeListener(e)}))}removeListener(e){const t=this.registeredListeners.get(e);t&&(this.eventTarget.removeEventListener(e,t),this.registeredListeners.delete(e))}bufferEvent(e,t){i.default.log(n.LoggingChannels.Events,"Buffering event",{event:e,data:t});const s=this.bufferedEvents.get(e)||[];this.bufferedEvents.set(e,[...s,t])}consumeBufferedEvents(e){const t=this.bufferedEvents.get(e);t&&(t.forEach((t=>{i.default.log(n.LoggingChannels.Events,"Consuming buffered event",{event:e,data:t}),this.eventTarget.dispatchEvent(new CustomEvent(e,{detail:t}))})),this.bufferedEvents.delete(e))}}},"./src/models/Connection/AppSyncPubSubConnection.ts":(e,t,s)=>{s.r(t),s.d(t,{AppSyncPubSubConnection:()=>b});var n=s("aws-amplify"),i=s("aws-amplify/utils"),r=s("@aws-amplify/api"),o=s("@aws-amplify/core"),a=s("@crewdle/web-sdk-types"),c=s("./src/environments/Environment.ts"),d=s("./src/interfaces/Utils/Logger.ts"),l=s("./src/models/Connection/BaseConnection.ts"),u=s("./src/models/Subscription/Helpers.ts"),h=s("./src/utils/Logger/Logger.ts"),p=s("./src/utils/Observer/Observer.ts"),g=s("./src/utils/Queue/Queue.ts"),m=s("./src/utils/Queue/RetryQueue.ts");class b extends l.BaseConnection{vendorId;authService;connectionState=r.ConnectionState.Disconnected;connectionStateListener=(0,p.createSingleObserver)();messageListeners=(0,p.createObserver)();subscription;listenUnsubscriber;retryQueue=(0,m.createRetryQueue)(new g.AsyncQueueCallback(this.sendAction.bind(this),this.waitConnected.bind(this)));client;constructor(e,t,s,n,i){super(t,s,n),this.vendorId=e,this.authService=i}async connect(){try{const e={getTokens:async()=>{const e=await this.authService.getIdToken();return{accessToken:(0,o.decodeJWT)(e),idToken:(0,o.decodeJWT)(e)}}};n.Amplify.configure({API:{GraphQL:{endpoint:c.Environment.aws.endpoint,region:c.Environment.aws.region,defaultAuthMode:"oidc"}}},{Auth:{tokenProvider:e}}),this.client=(0,r.generateClient)(),await this.subscribe(),this.listenUnsubscriber=i.Hub.listen("api",(async({payload:e})=>{if(e.event===r.CONNECTION_STATE_CHANGE){const t=e.data;this.connectionState=t.connectionState,this.connectionStateListener.publish(t.connectionState),this.connectionState===r.ConnectionState.Disconnected&&h.default.error("appsync-disconnect",{clusterId:this.clusterId,nodeId:this.getLocalId(),nodeType:this.localNode.type}),this.connectionState===r.ConnectionState.Connected&&h.default.warning("appsync-connect",{clusterId:this.clusterId,nodeId:this.getLocalId(),nodeType:this.localNode.type})}}))}catch(e){h.default.error("appsync-connect-fail",{clusterId:this.clusterId,nodeId:this.getLocalId(),nodeType:this.localNode.type})}}close(){h.default.warning("appsync-close",{clusterId:this.clusterId,nodeId:this.getLocalId(),nodeType:this.localNode.type}),this.retryQueue.clear(),this.listenUnsubscriber?.(),this.subscription?.unsubscribe(),delete this.subscription}isConnected(){return this.connectionState===r.ConnectionState.Connected}send(e){this.retryQueue.push(e)}onMessage(e){return this.messageListeners.subscribe(e)}getSupportedContentTypes(){return[a.ContentType.Data]}async waitConnected(){if(!this.isConnected())return new Promise((e=>{const t=this.connectionStateListener.subscribe((s=>{s===r.ConnectionState.Connected&&(t(),e())}))}))}async sendAction(e){if(this.connectionState!==r.ConnectionState.Connected)throw new Error("AppSync connection not ready");e.destinationIds&&1===e.destinationIds.length?await this.publish(e.destinationIds[0],JSON.stringify(e)):h.default.error("appsync-no-destination",{clusterId:this.clusterId,nodeId:this.getLocalId(),nodeType:this.localNode.type})}async publish(e,t){if(!this.client)throw new Error("AppSync client not ready");h.default.log(d.LoggingChannels.Signaling,"AppSync publish",this.getLocalId(),t),await this.client.graphql({query:"\n  mutation Publish($data: AWSJSON!, $name: String!) {\n    publish(data: $data, name: $name) {\n      data\n      name\n    }\n  }\n",variables:{name:await this.getHash(e),data:t}})}async subscribe(){if(this.subscription)return;if(!this.client)throw new Error("AppSync client not ready");h.default.log(d.LoggingChannels.Signaling,"AppSync subscribe",this.getLocalId());const e=await this.client.graphql({query:"\n  subscription Subscribe($name: String!) {\n    subscribe(name: $name) {\n      data\n      name\n    }\n  }\n",variables:{name:await this.getHash()},authToken:await this.authService.getIdToken()},{Authorization:await this.authService.getIdToken()});this.subscription=e.subscribe({next:({data:e})=>{const t=JSON.parse(e.subscribe.data);!(0,u.isSender)(t,this.getLocalId())&&(0,u.isReceiver)(t,this.getLocalId())&&this.messageListeners.publish(t)},error:console.log})}async getHash(e){const t=await crypto.subtle.digest("SHA-1",(new TextEncoder).encode(`${this.vendorId}-${this.clusterId}-${e??this.getLocalId()}`));return Array.from(new Uint8Array(t)).map((e=>e.toString(16).padStart(2,"0"))).join("")}}},"./src/models/Connection/BaseConnection.ts":(e,t,s)=>{s.r(t),s.d(t,{BaseConnection:()=>n});class n{clusterId;localNode;remoteId;constructor(e,t,s){this.clusterId=e,this.localNode=t,this.remoteId=s}getLocalId(){return this.localNode.getId()}getRemoteId(){return this.remoteId}}},"./src/models/Connection/BasePeerConnection.ts":(e,t,s)=>{s.r(t),s.d(t,{BasePeerConnection:()=>d});var n=s("./src/constants/PeerConnection.ts"),i=s("./src/errors/SDKInternalError.ts"),r=s("./src/interfaces/Connection/PeerConnection.ts"),o=s("./src/interfaces/Subscription/SystemEvent.ts"),a=s("./src/interfaces/Utils/Logger.ts"),c=s("./src/utils/Logger/Logger.ts");class d{clusterId;localNode;remoteId;iceServers;connectionType;connectionConstructor;connection;dataChannel;currentVersion=1;systemTopic;handshakeCandidates=[];pendingHandshakeCandidates=[];handshakeDebounce;constructor(e,t,s,n,i,r){this.clusterId=e,this.localNode=t,this.remoteId=s,this.iceServers=n,this.connectionType=i,this.connectionConstructor=r,this.connection=new this.connectionConstructor({handshakeServers:this.iceServers}),this.setupConnectionEvents()}close(){this.stopConnection()}setConnectionType(e){this.connectionType=e}async handleHandshake(e,t){if(t===this.currentVersion)for(const t of e){if(!this.connection.canAddCandidates)return this.addPendingHandshakeCandidate(t);await this.connection.addCandidate(t)}}isConnected(){return this.logConnectionState(),"connected"===this.connection.connectionState&&["connected","completed"].includes(this.connection.handshakeState)&&"closed"!==this.connection.signalingState&&"open"===this.dataChannel?.state}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}resetConnection(e){this.stopConnection(),this.connection=new this.connectionConstructor({handshakeServers:this.iceServers}),e?this.currentVersion=e:this.currentVersion+=1,this.setupConnectionEvents()}processPendingHandshakeCandidates(){this.pendingHandshakeCandidates.forEach((e=>this.connection.addCandidate(e))),this.pendingHandshakeCandidates=[]}publishSystemMessage(e,t){if(!this.systemTopic)throw new i.SDKInternalError(i.SDKInternalError.codes.MissingSystemTopic,{content:e});const s={sourceId:this.localNode.getId(),destinationIds:[this.remoteId],propagate:this.connectionType!==r.PeerConnectionType.Core,retry:this.connectionType!==r.PeerConnectionType.Core,messageType:o.SystemMessageType.PeerConnection,content:e};t&&(s.uuid=t),this.systemTopic.publish(s)}setupConnectionEvents(){this.connection.onGatheringStateChange=()=>{"complete"===this.connection.gatheringState&&this.handshakeCandidates.length>0&&(this.handshakeDebounce&&clearTimeout(this.handshakeDebounce),this.handshakeDebounce=setTimeout((()=>{delete this.handshakeDebounce,this.sendIceCandidates(),this.handshakeCandidates=[]}),n.PEER_CONNECTION_HANDSHAKE_DEBOUNCE))},this.connection.onCandidate=e=>{e.candidate&&this.handshakeCandidates.push(e.candidate)}}stopConnection(){clearTimeout(this.handshakeDebounce),delete this.handshakeDebounce,this.handshakeCandidates=[],this.pendingHandshakeCandidates=[],this.dataChannel&&(this.dataChannel.onMessage=null,this.dataChannel.onClose=null,this.dataChannel.close(),delete this.dataChannel),this.connection.onGatheringStateChange=null,this.connection.onCandidate=null,this.connection.onHandshakeStateChange=null,this.connection.onConnectionStateChange=null,this.connection.onTrack=null,this.connection.onDataChannel=null,this.connection.close()}addPendingHandshakeCandidate(e){this.pendingHandshakeCandidates.push(e)}logConnectionState(){c.default.log(a.LoggingChannels.ConnectionState,"Base Peer Connection",{localId:this.localNode.getId(),remoteId:this.remoteId,connectionState:this.connection.connectionState,handshakeState:this.connection.handshakeState,signalingState:this.connection.signalingState,dataChannelState:this.dataChannel?.state})}}},"./src/models/Connection/ConnectionManager.ts":(e,t,s)=>{s.r(t),s.d(t,{ConnectionManager:()=>g});var n=s("./src/errors/EarlyReturnError.ts"),i=s("./src/errors/SDKInternalError.ts"),r=s("./src/interfaces/Connection/PeerConnection.ts"),o=s("./src/interfaces/Node/NodeMessage.ts"),a=s("./src/interfaces/Remediation/Remediation.ts"),c=s("./src/interfaces/Subscription/SystemEvent.ts"),d=s("./src/models/Connection/AppSyncPubSubConnection.ts"),l=s("./src/models/Connection/PeerConnection.ts"),u=s("./src/models/Connection/PeerConnectionGroup.ts"),h=s("./src/models/Connection/PeerConnectionPool.ts"),p=s("./src/services/MessageBuffer/MessageBufferService.ts");class g{configs;authService;iceServers;maxFps;maxBpp;connectionConstructor;connections=new Map;connectionPool;connectionGroup;signalingServer;messageBuffer;constructor(e,t,s,n,i,r,o){this.configs=e,this.authService=t,this.iceServers=s,this.maxFps=n,this.maxBpp=i,this.connectionConstructor=o,this.messageBuffer=new p.MessageBufferService,this.connectionGroup=new u.PeerConnectionGroup(this.configs.localNode.getId(),this.messageBuffer,r),this.signalingServer=new d.AppSyncPubSubConnection(this.configs.vendorId,this.configs.clusterId,this.configs.localNode,"server",this.authService),this.connectionPool=new h.PeerConnectionPool(this.configs.localNode.getId(),this.messageBuffer),this.connectionPool.addConnection(this.connectionGroup),this.connectionPool.addConnection(this.signalingServer),this.configs.mediator.registerSystemSource(this.connectionPool)}close(){this.messageBuffer.close(),this.connections.forEach(((e,t)=>this.closeConnection(t))),this.configs.mediator.unregisterSystemSource(this.connectionPool),this.connectionPool.removeConnection(this.signalingServer),this.connectionPool.removeConnection(this.connectionGroup),this.connectionPool.close(),this.signalingServer.close(),this.connectionGroup.close()}async initialize(){await this.signalingServer.connect()}async createConnection(e,t=r.PeerConnectionType.Core){if(this.connections.has(e)){if(this.connections.get(e)?.getConnectionType()===r.PeerConnectionType.Optimization&&t===r.PeerConnectionType.Core)return void this.connections.get(e)?.setConnectionType(r.PeerConnectionType.Core);throw new i.SDKInternalError(i.SDKInternalError.codes.RemoteConnectionExists,{localId:this.configs.localNode.getId(),remoteId:e})}const s=new l.PeerConnection(this.configs.clusterId,this.configs.localNode,e,this.iceServers,t,this.maxFps,this.maxBpp,this.connectionConstructor);this.connections.set(e,s),this.connectionGroup.addConnection(s),this.configs.mediator.registerSystemSource(s),this.configs.mediator.registerRemoteNode(e),await s.connect()}getConnectionGroup(){return this.connectionGroup}getConnection(e){if(!this.connections.has(e))throw new i.SDKInternalError(i.SDKInternalError.codes.MissingRemoteConnection,{localId:this.configs.localNode.getId(),remoteId:e});return this.connections.get(e)}getConnections(e){const t=Array.from(this.connections.values());return e?t.filter(e):t}async collectStats(e){const t=this.connections.get(e);t&&t.isConnected()&&await t.collectStats()}handleOutgoingSystemEvents(e){if(e.messageType!==c.SystemMessageType.PeerConnection||e.propagate)try{this.connectionGroup.send(e)}catch(e){if(e instanceof n.EarlyReturnError)return;throw e}else this.connectionPool.send(e)}async handlePeerConnectionSystemEvents(e){switch(e.content.type){case r.PeerConnectionMessageType.Disconnect:case r.PeerConnectionMessageType.Stats:case r.PeerConnectionMessageType.OptimizationConnectionSuccess:return}if(!e.destinationIds||1!==e.destinationIds.length)throw new i.SDKInternalError(i.SDKInternalError.codes.PeerConnectionInvalidDestination,{message:"Peer Connection system events must have exactly one destination",event:e});if(e.destinationIds[0]!==this.configs.localNode.getId())throw new i.SDKInternalError(i.SDKInternalError.codes.PeerConnectionInvalidDestination,{message:"Incoming Peer Connection events must have the local id as a destination",event:e});if(!this.connections.has(e.sourceId)){let t=r.PeerConnectionType.Core;if(!(this.isOffer(e.content)||this.isIceCandidate(e.content)||this.isNeedRestart(e.content)))return;t=e.content.connectionType,await this.createConnection(e.sourceId,t)}const t=this.connections.get(e.sourceId);await t.handlePeerConnectionSystemEvents(e)}handleRemediationSystemEvents(e){if(e.content.type===a.RemediationMessageType.Remediation){if(e.content.targetId===this.configs.localNode.getId())return void this.connections.forEach((t=>t.handleRemediationSystemEvents(e)));this.connections.get(e.content.targetId)?.handleRemediationSystemEvents(e)}}handleNodeSystemEvents({content:e}){e.type===o.NodeMessageType.NodeLeave&&this.closeConnection(e.id)}closeConnection(e){const t=this.connections.get(e);t&&(this.configs.mediator.unregisterRemoteNode(e),this.configs.mediator.unregisterSystemSource(t),t instanceof l.PeerConnection&&this.connectionGroup.removeConnection(t),t.close(),this.connections.delete(e))}isOffer(e){return e.type===r.PeerConnectionMessageType.Offer}isNeedRestart(e){return e.type===r.PeerConnectionMessageType.NeedRestart}isIceCandidate(e){return e.type===r.PeerConnectionMessageType.Handshake}}},"./src/models/Connection/PeerConnection.ts":(e,t,s)=>{s.r(t),s.d(t,{PeerConnection:()=>b});var n=s("@crewdle/web-sdk-types"),i=s("./src/constants/System.ts"),r=s("./src/errors/SDKInternalError.ts"),o=s("./src/interfaces/Connection/PeerConnection.ts"),a=s("./src/interfaces/Subscription/MediaSubscriptionEvent.ts"),c=s("./src/interfaces/Subscription/SystemEvent.ts"),d=s("./src/interfaces/Utils/Logger.ts"),l=s("./src/models/Connection/BaseConnection.ts"),u=s("./src/models/Connection/ReceiverPeerConnection.ts"),h=s("./src/models/Connection/SenderPeerConnection.ts"),p=s("./src/models/Subscription/Helpers.ts"),g=s("./src/utils/Logger/Logger.ts"),m=s("./src/utils/Observer/Observer.ts");class b extends l.BaseConnection{iceServers;connectionType;maxFps;maxBpp;connectionConstructor;senderConnection;receiverConnection;receiverUnsubscribers=[];messageListeners=(0,m.createObserver)();trackListeners=(0,m.createObserver)();removeTrackListeners=(0,m.createObserver)();listenerUnsubscribers=[];systemTopic;dataTopics=new Map;dataUnsubscribers=new Map;mediaTopics=new Map;mediaUnsubscribers=new Map;successNotified=!1;constructor(e,t,s,n,i,r,o,a){super(e,t,s),this.iceServers=n,this.connectionType=i,this.maxFps=r,this.maxBpp=o,this.connectionConstructor=a}registerPublisher(e){switch(e.getContentType()){case n.ContentType.Data:case n.ContentType.PubSub:case n.ContentType.ObjectStore:case n.ContentType.KeyValueDatabase:this.dataTopics.set(e.getLabel(),e);break;case n.ContentType.Media:this.mediaTopics.set(e.getLabel(),e)}}unregisterPublisher(e){switch(e.getContentType()){case n.ContentType.Data:case n.ContentType.PubSub:case n.ContentType.ObjectStore:case n.ContentType.KeyValueDatabase:this.dataTopics.delete(e.getLabel());break;case n.ContentType.Media:this.mediaTopics.delete(e.getLabel())}}registerSubscriber(e){switch(e.getContentType()){case n.ContentType.Data:case n.ContentType.PubSub:case n.ContentType.ObjectStore:case n.ContentType.KeyValueDatabase:{const t=e.subscribe((e=>{(0,p.isSender)(e,this.getLocalId())&&(0,p.isReceiver)(e,this.remoteId)&&this.send(e)}));this.dataUnsubscribers.set(e.getLabel(),t);break}case n.ContentType.Media:{const t=e.subscribe((({content:e})=>{switch(e.action){case a.MediaSubscriptionAction.Add:this.addTrack(e.track,e.stream,e.priority,e.params);break;case a.MediaSubscriptionAction.Remove:this.removeTrack(e.track,e.stream);break;case a.MediaSubscriptionAction.Update:e.priority&&this.setPriority(e.stream,e.priority),e.params&&this.setParams(e.stream,e.params)}}));this.mediaUnsubscribers.set(e.getLabel(),t);break}}}unregisterSubscriber(e){switch(e.getContentType()){case n.ContentType.Data:case n.ContentType.PubSub:case n.ContentType.ObjectStore:case n.ContentType.KeyValueDatabase:this.dataUnsubscribers.get(e.getLabel())?.(),this.dataUnsubscribers.delete(e.getLabel());break;case n.ContentType.Media:this.mediaUnsubscribers.get(e.getLabel())?.(),this.mediaUnsubscribers.delete(e.getLabel())}}getSupportedContentTypes(){return[n.ContentType.Data,n.ContentType.Media,n.ContentType.PubSub,n.ContentType.ObjectStore,n.ContentType.KeyValueDatabase]}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}async connect(){this.setupListeners(),await this.createOffer()}close(){this.listenerUnsubscribers.forEach((e=>e())),this.listenerUnsubscribers=[],this.senderConnection?.unregisterSystemPublisher(),this.senderConnection?.close(),delete this.senderConnection,this.receiverUnsubscribers.forEach((e=>e())),this.receiverUnsubscribers=[],this.receiverConnection?.unregisterSystemPublisher(),this.receiverConnection?.close(),delete this.receiverConnection}isConnected(){return this.senderConnection?.isConnected()&&this.receiverConnection?.isConnected()||!1}send(e){if(!this.senderConnection||!this.isConnected())throw new r.SDKInternalError(r.SDKInternalError.codes.ConnectionNotinitialized,{message:"Sender connection is not initialized while trying to send a message.",senderConnected:this.senderConnection?.isConnected(),receiverConnected:this.receiverConnection?.isConnected(),localId:this.getLocalId(),remoteId:this.remoteId,data:e});this.senderConnection.send(e)}onMessage(e){return this.messageListeners.subscribe(e)}onTrack(e){return this.trackListeners.subscribe((({track:t,stream:s})=>e(t,s)))}onRemoveTrack(e){return this.removeTrackListeners.subscribe((({track:t,stream:s})=>e(t,s)))}addTrack(e,t,s,n){this.senderConnection?.addTrack(e,t,s,n)}setPriority(e,t){this.senderConnection?.setPriority(e,t)}setParams(e,t){this.senderConnection?.setParams(e,t)}removeTrack(e,t){this.senderConnection?.removeTrack(e,t)}async handlePeerConnectionSystemEvents(e){g.default.log(d.LoggingChannels.Connection,"CrewdleConnection handlePeerConnectionSystemEvents",this.getLocalId(),e);const{content:t}=e;switch(t.type){case o.PeerConnectionMessageType.Offer:await this.handleOffer(t);break;case o.PeerConnectionMessageType.Answer:await this.handleAnswer(t);break;case o.PeerConnectionMessageType.Success:this.handleSuccess();break;case o.PeerConnectionMessageType.Handshake:await this.handleIceCandidates(t);break;case o.PeerConnectionMessageType.NeedRestart:this.handleNeedRestart(t);break;case o.PeerConnectionMessageType.Restart:await this.createOffer()}}handleRemediationSystemEvents(e){this.senderConnection?.applyRemediation(e.content.data)}getConnectionType(){return this.connectionType}setConnectionType(e){this.connectionType=e,this.senderConnection?.setConnectionType(e),this.receiverConnection?.setConnectionType(e)}async collectStats(){await(this.senderConnection?.collectStats()),await(this.receiverConnection?.collectStats())}setupListeners(){this.listenerUnsubscribers.push(this.onMessage((e=>{(0,p.isReceiver)(e,this.getLocalId())&&e.topicLabel!==i.SYSTEM_TOPIC&&this.dataTopics.get(e.topicLabel)?.publish(e)}))),this.listenerUnsubscribers.push(this.onTrack(((e,t)=>{const s=(0,p.getTopicLabel)(n.ContentType.Media,t.id,this.remoteId);this.mediaTopics.get(s)?.publish({topicLabel:s,sourceId:this.remoteId,contentType:n.ContentType.Media,content:{action:a.MediaSubscriptionAction.RemoteAdd,track:e,stream:t,providerId:this.remoteId}})}))),this.listenerUnsubscribers.push(this.onRemoveTrack(((e,t)=>{const s=(0,p.getTopicLabel)(n.ContentType.Media,t.id,this.remoteId);this.mediaTopics.get(s)?.publish({topicLabel:s,sourceId:this.remoteId,contentType:n.ContentType.Media,content:{action:a.MediaSubscriptionAction.RemoteRemove,track:e,stream:t,providerId:this.remoteId}})})))}handleIceCandidates({candidates:e,origin:t,version:s}){return t===o.PeerConnectionOrigin.Sender?(this.receiverConnection||this.createReceiverConnection(),this.receiverConnection.handleHandshake(e,s)):this.senderConnection.handleHandshake(e,s)}async createOffer(){this.senderConnection||this.createSenderConnection(),await this.senderConnection.createOffer()}async handleOffer({offer:e,version:t}){this.receiverConnection||this.createReceiverConnection(),await this.receiverConnection.handleOffer(e,t)}async handleAnswer({answer:e,version:t}){if(!this.senderConnection)throw new r.SDKInternalError(r.SDKInternalError.codes.ConnectionNotinitialized,{message:"Sender connection is not initialized.",localId:this.getLocalId(),remoteId:this.remoteId,answer:e});await this.senderConnection.handleAnswer(e,t)}handleSuccess(){if(!this.receiverConnection)throw new r.SDKInternalError(r.SDKInternalError.codes.ConnectionNotinitialized,{message:"Receiver connection is not initialized.",localId:this.getLocalId(),remoteId:this.remoteId});this.receiverConnection.handleSuccess(),this.successNotified||this.connectionType!==o.PeerConnectionType.Optimization||(this.successNotified=!0,this.systemTopic?.publish({sourceId:this.remoteId,destinationIds:[this.getLocalId()],messageType:c.SystemMessageType.PeerConnection,content:{type:o.PeerConnectionMessageType.OptimizationConnectionSuccess}}))}handleNeedRestart(e){this.receiverConnection||this.createReceiverConnection(),this.receiverConnection.handleNeedRestart(e.version)}createSenderConnection(){this.senderConnection=new h.SenderPeerConnection(this.clusterId,this.localNode,this.remoteId,this.iceServers,this.connectionType,this.maxFps,this.maxBpp,this.connectionConstructor),this.senderConnection.registerSystemPublisher(this.systemTopic)}createReceiverConnection(){this.receiverConnection=new u.ReceiverPeerConnection(this.clusterId,this.localNode,this.remoteId,this.iceServers,this.connectionType,this.connectionConstructor),this.receiverConnection.registerSystemPublisher(this.systemTopic),this.receiverUnsubscribers.push(this.receiverConnection.onMessage((e=>this.messageListeners.publish(e)))),this.receiverUnsubscribers.push(this.receiverConnection.onTrack(((e,t)=>this.trackListeners.publish({track:e,stream:t})))),this.receiverUnsubscribers.push(this.receiverConnection.onRemoveTrack(((e,t)=>this.removeTrackListeners.publish({track:e,stream:t}))))}}},"./src/models/Connection/PeerConnectionGroup.ts":(e,t,s)=>{s.r(t),s.d(t,{PeerConnectionGroup:()=>S});var n=s("@crewdle/web-sdk-types"),i=s("./src/constants/Connection.ts"),r=s("./src/constants/System.ts"),o=s("./src/errors/EarlyReturnError.ts"),a=s("./src/errors/SDKInternalError.ts"),c=s("./src/interfaces/Connection/PeerConnection.ts"),d=s("./src/interfaces/Utils/Logger.ts"),l=s("./src/models/Subscription/Helpers.ts"),u=s("./src/utils/Interval/Interval.ts"),h=s("./src/utils/Logger/Logger.ts"),p=s("./src/utils/Logger/Helpers.ts"),g=s("./src/utils/Observer/Observer.ts"),m=s("./src/utils/Queue/Queue.ts"),b=s("./src/utils/Queue/VersionedRetryQueue.ts");class S{localId;messageBuffer;graphService;connections=new Map;messageListeners=(0,g.createObserver)();messageUnsubscriber;dataTopics=new Map;dataUnsubscribers=new Map;retryQueues=new Map;constructor(e,t,s){this.localId=e,this.messageBuffer=t,this.graphService=s,this.messageUnsubscriber=this.onMessage((e=>{this.messageBuffer.hasMessage(e.uuid)||((0,l.isReceiver)(e,this.localId)&&e.topicLabel!==r.SYSTEM_TOPIC&&(this.messageBuffer.addMessage(e.uuid),this.dataTopics.get(e.topicLabel)?.publish(e)),e.propagate&&this.send(e))}))}close(){this.messageUnsubscriber?.()}addConnection(e){const t=e.onMessage((e=>{this.messageListeners.publish(e)}));this.connections.set(e,t),this.retryQueues.set(e.getRemoteId(),(0,b.createVersionedRetryQueue)(new m.SyncQueueCallback((t=>e.send(t)),(()=>u.default.wait(i.CONNECTION_GROUP_RETRY_DELAY)))))}removeConnection(e){this.connections.get(e)?.(),this.connections.delete(e),this.retryQueues.get(e.getRemoteId())?.clear(),this.retryQueues.delete(e.getRemoteId())}isConnected(e){return h.default.log(d.LoggingChannels.ConnectionState,"ConnectionGroup",this.localId,this.connections.keys()),0!==this.connections.size&&(Array.from(this.connections.keys()).find((t=>t.getRemoteId()===e))?.isConnected()??!1)}registerPublisher(e){this.dataTopics.set(e.getLabel(),e)}unregisterPublisher(e){this.dataTopics.delete(e.getLabel())}registerSubscriber(e){const t=e.subscribe(this.send.bind(this));this.dataUnsubscribers.set(e.getLabel(),t)}unregisterSubscriber(e){this.dataUnsubscribers.get(e.getLabel())?.(),this.dataUnsubscribers.delete(e.getLabel())}getSupportedContentTypes(){return[n.ContentType.Data,n.ContentType.PubSub,n.ContentType.ObjectStore,n.ContentType.KeyValueDatabase]}send(e){if(!1===e.retry){if(e.propagate||!e.destinationIds||1!==e.destinationIds.length)throw new a.SDKInternalError(a.SDKInternalError.codes.ConnectionInvalidDataEvent,{message:"CrewdleConnectionGroup: Cannot broadcast with AppSync.",localId:this.localId});if(!this.isConnected(e.destinationIds[0]))throw new o.EarlyReturnError("Ignoring message - retry flag is false")}const t=e.recipients??[];try{const{filteredDestinationIds:s,extendedRecipients:n}=this.updatePropagationProperties(e,t);e.destinationIds=s,e.recipients=n}catch(t){if(t instanceof o.EarlyReturnError)return void h.default.log(d.LoggingChannels.Connection,"CrewdleConnectionGroup","Early return",e,t.message)}const s=this.shouldContinuePropagation(e);this.logPropagateSystemEvent(e,s),e.propagate=s;const n=this.getConnectionDestinations(e,t);for(const t of n){const s=this.retryQueues.get(t.getRemoteId());if(!s)throw new a.SDKInternalError(a.SDKInternalError.codes.ConnectionNoRetryQueue,{message:"CrewdleConnectionGroup: No retry queue available.",localId:this.localId,remoteId:t.getRemoteId(),data:e});s.push(e)}}getRemoteId(){return""}getLocalId(){return this.localId}onMessage(e){return this.messageListeners.subscribe(e)}updatePropagationProperties(e,t){const s={filteredDestinationIds:e.destinationIds,extendedRecipients:e.recipients};if(!e.propagate)return s;const n=Array.from(this.connections.keys()).filter((e=>e.getConnectionType()===c.PeerConnectionType.Core||e.isConnected())).map((e=>e.getRemoteId()));if(n.reduce(((t,s)=>t&&e.recipients.includes(s)),!0))throw new o.EarlyReturnError("All recipients already received");if(e.destinationIds){const t=e.destinationIds.filter((t=>t!==this.localId&&!e.recipients.includes(t)));if(0===t.length)throw new o.EarlyReturnError("No destinationIds left");s.filteredDestinationIds=t}return s.extendedRecipients=[...new Set([...t,...n,this.localId])],s}logPropagateSystemEvent(e,t=!1){if(e.topicLabel===r.SYSTEM_TOPIC&&!(0,l.isSender)(e,this.localId)&&e.propagate){const s=(0,p.getFormattedSytemLog)(e,this.localId);h.default.logRaw(d.LoggingChannels.System,`${e.uuid} - Sending propagation (${t}) ${s}`,e,t)}}shouldContinuePropagation(e){if(e.destinationIds&&e.propagate){const t=Array.from(this.connections.keys()).filter((e=>e.getConnectionType()===c.PeerConnectionType.Core||e.isConnected())).map((e=>e.getRemoteId()));return!e.destinationIds.reduce(((e,s)=>e&&t.includes(s)),!0)}return e.propagate??!1}getConnectionDestinations(e,t){if(e.propagate&&e.destinationIds){const t=Array.from(this.connections.keys()).filter((e=>e.getConnectionType()===c.PeerConnectionType.Core||e.isConnected())).map((e=>e.getRemoteId())),s=new Set,n=e.sourceId===this.localId?3:1;return e.destinationIds.forEach((e=>{const i=this.graphService.getClosestNodes(t,e);let r=0,o=0;i.forEach((e=>{if(r>=n)return;const t=Array.from(this.connections.keys()).find((t=>t.getRemoteId()===e));if(t){if(t.getConnectionType()===c.PeerConnectionType.Core&&o>0)return void(o-=1);s.add(t),t.getConnectionType()===c.PeerConnectionType.Optimization&&(o+=1),r+=1}}))})),Array.from(s)}return Array.from(this.connections.keys()).filter((s=>{return n=s.getRemoteId(),!t.includes(n)&&((0,l.isReceiver)(e,n)||e.propagate)&&(!e.propagate||s.isConnected()||s.getConnectionType()===c.PeerConnectionType.Core);var n}))}}},"./src/models/Connection/PeerConnectionPool.ts":(e,t,s)=>{s.r(t),s.d(t,{PeerConnectionPool:()=>d});var n=s("@crewdle/web-sdk-types"),i=s("./src/constants/System.ts"),r=s("./src/errors/EarlyReturnError.ts"),o=s("./src/interfaces/Utils/Logger.ts"),a=s("./src/models/Subscription/Helpers.ts"),c=s("./src/utils/Logger/Logger.ts");class d{localId;messageBuffer;connections=new Map;systemTopic;constructor(e,t){this.localId=e,this.messageBuffer=t}close(){}send(e){for(const t of this.connections.keys())try{return void t.send({retry:!1,...e})}catch(s){s instanceof r.EarlyReturnError||c.default.log(o.LoggingChannels.Pool,`send error on ${t}`,s,e)}c.default.log(o.LoggingChannels.Pool,"No connections available to send message")}addConnection(e){const t=e.onMessage((e=>{this.messageBuffer.hasMessage(e.uuid)||e.topicLabel===i.SYSTEM_TOPIC&&(this.messageBuffer.addMessage(e.uuid),(0,a.isReceiver)(e,this.localId)&&this.systemTopic?.publish(e))}));this.connections.set(e,t)}removeConnection(e){this.connections.get(e)?.(),this.connections.delete(e)}getLocalId(){return this.localId}getRemoteId(){return""}getSupportedContentTypes(){return[n.ContentType.Data]}isConnected(){throw new Error("Method not implemented.")}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}}},"./src/models/Connection/ReceiverPeerConnection.ts":(e,t,s)=>{s.r(t),s.d(t,{ReceiverPeerConnection:()=>b});var n=s("uuid"),i=s("./src/constants/Content.ts"),r=s("./src/constants/System.ts"),o=s("./src/constants/PeerConnection.ts"),a=s("./src/interfaces/Connection/PeerConnection.ts"),c=s("./src/interfaces/Subscription/SystemEvent.ts"),d=s("./src/interfaces/Utils/Logger.ts"),l=s("./src/models/Connection/BasePeerConnection.ts"),u=s("./src/models/Stats/Helpers.ts"),h=s("./src/utils/Interval/Interval.ts"),p=s("./src/utils/Logger/Helpers.ts"),g=s("./src/utils/Logger/Logger.ts"),m=s("./src/utils/Observer/Observer.ts");class b extends l.BasePeerConnection{messageCallback=(0,m.createSingleObserver)();trackCallback=(0,m.createSingleObserver)();removeTrackCallback=(0,m.createSingleObserver)();receivers=new Map;chunks=new Map;waitSuccess;messagesReceived=0;systemMessagesReceived={messages:{total:0}};bytesReceived=0;timeReceiving=0;close(){this.clearWaitSuccess(),this.receivers.clear(),super.close()}async handleOffer(e,t){this.currentVersion=t,this.clearWaitSuccess();const s=await this.connection.createAnswer(e);this.processPendingHandshakeCandidates();const i=(0,n.v4)();this.publishSystemMessage({type:a.PeerConnectionMessageType.Answer,answer:s,version:t,connectionType:this.connectionType},i),this.connectionType===a.PeerConnectionType.Core&&(this.waitSuccess=h.default.setInterval((()=>{this.publishSystemMessage({type:a.PeerConnectionMessageType.Answer,answer:s,version:t,connectionType:this.connectionType},i)}),o.PEER_CONNECTION_MESSAGE_RETRY))}handleSuccess(){this.clearWaitSuccess()}handleNeedRestart(e){this.resetConnection(e),this.publishSystemMessage({type:a.PeerConnectionMessageType.Restart})}async collectStats(){this.systemTopic&&(await this.connection.collectReceiversStats(this.receivers,((e,t)=>{(0,u.sendStats)({type:a.PeerConnectionMessageType.Stats,streamId:t,nodeId:this.remoteId,stats:e},this.systemTopic)})),this.systemTopic.publish({sourceId:r.SYSTEM_TOPIC_INTERNAL,messageType:c.SystemMessageType.PeerConnection,content:{type:a.PeerConnectionMessageType.Stats,nodeId:this.remoteId,stats:{origin:a.PeerConnectionOrigin.Receiver,timestamp:Date.now(),messagesReceived:this.messagesReceived,bytesReceived:this.bytesReceived,timeReceiving:this.timeReceiving,systemMessages:this.systemMessagesReceived}}}))}onMessage(e){return this.messageCallback.subscribe(e)}onTrack(e){return this.trackCallback.subscribe((({track:t,stream:s})=>e(t,s)))}onRemoveTrack(e){return this.removeTrackCallback.subscribe((({track:t,stream:s})=>e(t,s)))}resetConnection(e){this.clearWaitSuccess(),this.receivers.forEach((e=>{e.clear()})),super.resetConnection(e)}sendIceCandidates(){this.publishSystemMessage({type:a.PeerConnectionMessageType.Handshake,candidates:this.handshakeCandidates,origin:a.PeerConnectionOrigin.Receiver,version:this.currentVersion,connectionType:this.connectionType})}setupConnectionEvents(){super.setupConnectionEvents(),this.connection.onTrack=e=>{g.default.log(d.LoggingChannels.Connection,"CrewdleReceiverConnection ontrack",this.localNode.getId(),e),e.streams[0].onremovetrack=t=>{this.receivers.get(e.streams[0].id)?.delete(t.track),0===this.receivers.get(e.streams[0].id)?.size&&this.receivers.delete(e.streams[0].id),this.removeTrackCallback.publish({track:t.track,stream:e.streams[0]})},this.receivers.has(e.streams[0].id)||this.receivers.set(e.streams[0].id,new Set),this.receivers.get(e.streams[0].id).add(e.track),this.trackCallback.publish({track:e.track,stream:e.streams[0]})},this.connection.onDataChannel=e=>{this.dataChannel=e.channel,this.dataChannel.onMessage=e=>{if(e.data!==o.PEER_CONNECTION_HEARTBEAT_PING)this.handleOnMessage(e.data);else{if(!this.dataChannel)return void g.default.error("missing-datachannel",{clusterId:this.clusterId,nodeId:this.localNode.getId(),nodeType:this.localNode.type,remoteId:this.remoteId,data:{connection:"receiver"}});if("open"!==this.dataChannel.state)return;this.dataChannel.send(o.PEER_CONNECTION_HEARTBEAT_PONG)}}}}handleOnMessage(e){if("string"==typeof e&&e.startsWith(o.PEER_CONNECTION_CHUNK_IDENTIFIER))return this.messagesReceived+=1,this.bytesReceived+=e.length,this.handleChunkMessage(e);setTimeout((()=>{const t=Date.now();let s;if((e instanceof ArrayBuffer||e.length<=o.PEER_CONNECTION_CHUNK_SIZE)&&(this.messagesReceived+=1,this.bytesReceived+=e instanceof ArrayBuffer?e.byteLength:e.length),e instanceof ArrayBuffer){const[t,n]=this.splitParts(e);s=t,s.content.data=n}else s=JSON.parse(e);if(s.topicLabel===r.SYSTEM_TOPIC){this.systemMessagesReceived.messages.total+=1;const{systemMessageType:e,systemContentMessageType:t}=(0,p.getLoggableSystemMessage)(s);this.systemMessagesReceived[e]||(this.systemMessagesReceived[e]={[t]:0}),this.systemMessagesReceived[e][t]||(this.systemMessagesReceived[e][t]=0),this.systemMessagesReceived[e].total||(this.systemMessagesReceived[e].total=0),this.systemMessagesReceived[e][t]+=1,this.systemMessagesReceived[e].total+=1}this.messageCallback.publish(s),this.timeReceiving+=Date.now()-t}),0)}handleChunkMessage(e){const t=e.split(";"),s=t[1],n=parseInt(t[2],10),i=parseInt(t[3],10),r=e.replace(`${o.PEER_CONNECTION_CHUNK_IDENTIFIER};${s};${n};${i};`,"");this.chunks.has(s)||this.chunks.set(s,[]);const a=this.chunks.get(s);a[n]=r,a.length===i&&(this.handleOnMessage(a.join("")),this.chunks.delete(s))}clearWaitSuccess(){this.waitSuccess?.(),delete this.waitSuccess}arrayBufferToObject(e){const t=(new TextDecoder).decode(e);return JSON.parse(t)}splitParts(e){const t=new Uint8Array(e.slice(0,i.CONTENT_FILE_HEADER_SIZE)),s=new Uint32Array(t.buffer)[0],n=new Uint8Array(e.slice(i.CONTENT_FILE_HEADER_SIZE,i.CONTENT_FILE_HEADER_SIZE+s)),r=new Uint8Array(e.slice(i.CONTENT_FILE_HEADER_SIZE+s));return[this.arrayBufferToObject(n.buffer),r.buffer]}}},"./src/models/Connection/SenderPeerConnection.ts":(e,t,s)=>{s.r(t),s.d(t,{SenderPeerConnection:()=>I});var n=s("uuid"),i=s("./src/constants/Content.ts"),r=s("./src/constants/Remediation.ts"),o=s("./src/constants/System.ts"),a=s("./src/constants/PeerConnection.ts"),c=s("./src/errors/SDKInternalError.ts"),d=s("./src/interfaces/Connection/PeerConnection.ts"),l=s("./src/interfaces/Remediation/Remediation.ts"),u=s("./src/interfaces/Subscription/SystemEvent.ts"),h=s("./src/interfaces/Utils/Logger.ts"),p=s("./src/interfaces/Utils/Queue.ts"),g=s("./src/models/Connection/BasePeerConnection.ts"),m=s("./src/models/Remediation/Helpers.ts"),b=s("./src/models/Stats/Helpers.ts"),S=s("./src/utils/Interval/Interval.ts"),y=s("./src/utils/Logger/Logger.ts"),T=s("./src/utils/Queue/PriorityRetryQueue.ts"),C=s("./src/utils/Queue/Queue.ts");class I extends g.BasePeerConnection{maxFps;maxBpp;senders=new Map;heartbeatUnsubscriber;waitAnswer;lastHeartbeat;isReconnecting=!1;connectionTimeout;restartTimeout;upgradeTimeout;retryQueue=(0,T.createPriorityRetryQueue)(new C.SyncQueueCallback(this.sendAction.bind(this),this.waitSendBuffer.bind(this)));messagesSent=0;bytesSent=0;timeSending=0;roundTripTime=0;oncloseTimeout;constructor(e,t,s,n,i,r,o,a){super(e,t,s,n,i,a),this.maxFps=r,this.maxBpp=o}close(){this.clearUpgradeTimeout(),this.clearHeartbeat(),delete this.lastHeartbeat,this.clearRestartTimeout(),this.clearConnectionTimeout(),this.clearWaitAnswer(),this.senders.clear(),this.isReconnecting=!1,this.retryQueue.queues.forEach((e=>e.clear())),this.clearOncloseTimeout(),super.close()}isConnected(){return!!this.lastHeartbeat&&super.isConnected()&&Date.now()-this.lastHeartbeat<a.PEER_CONNECTION_HEARTBEAT_THRESHOLD}async collectStats(){this.systemTopic&&(await this.connection.collectSendersStats(this.senders,((e,t)=>{(0,b.sendStats)({type:d.PeerConnectionMessageType.Stats,streamId:t,nodeId:this.remoteId,stats:e},this.systemTopic)})),this.systemTopic.publish({sourceId:o.SYSTEM_TOPIC_INTERNAL,messageType:u.SystemMessageType.PeerConnection,content:{type:d.PeerConnectionMessageType.Stats,nodeId:this.remoteId,stats:{origin:d.PeerConnectionOrigin.Sender,timestamp:Date.now(),messagesSent:this.messagesSent,bytesSent:this.bytesSent,timeSending:this.timeSending,roundTripTime:this.roundTripTime}}}))}async createOffer(e){y.default.log(h.LoggingChannels.Connection,"CrewdleSenderConnection createOffer",this.localNode.getId(),this.remoteId),this.clearRestartTimeout(),this.clearConnectionTimeout(),this.clearWaitAnswer(),this.connectionTimeout=setTimeout((()=>{this.handleDisconnect()}),a.PEER_CONNECTION_TIMEOUT),this.dataChannel||(this.dataChannel=this.connection.createDataChannel("data"),this.dataChannel.bufferedAmountLowThreshold=a.PEER_CONNECTION_BUFFER_THRESHOLD,this.dataChannel.onClose=()=>{this.oncloseTimeout=setTimeout((()=>{delete this.oncloseTimeout,["connecting","open"].includes(this.dataChannel?.state??"")||this.handleDisconnect()}),a.PEER_CONNECTION_DATACHANNEL_DISCONNECT_HANDLER_DELAY)});const t=await this.connection.createOffer(e);this.lastHeartbeat||(this.lastHeartbeat=Date.now());const s=(0,n.v4)();this.publishSystemMessage({type:d.PeerConnectionMessageType.Offer,offer:t,version:this.currentVersion,connectionType:this.connectionType},s),this.connectionType===d.PeerConnectionType.Core&&(this.waitAnswer=S.default.setInterval((()=>{this.publishSystemMessage({type:d.PeerConnectionMessageType.Offer,offer:t,version:this.currentVersion,connectionType:this.connectionType},s)}),a.PEER_CONNECTION_MESSAGE_RETRY))}async handleAnswer(e,t){if(t===this.currentVersion){this.clearWaitAnswer();try{await this.connection.handleAnswer(e,this.createOffer.bind(this)),this.processPendingHandshakeCandidates(),this.clearConnectionTimeout(),this.startHeartbeat()}catch(e){this.handleDisconnect()}}}send(e){if(!this.dataChannel)throw new c.SDKInternalError(c.SDKInternalError.codes.InvalidDataChannel,{message:"DataChannel is not initialized.",localId:this.localNode.getId(),remoteId:this.remoteId,eventMessage:e});if("open"!==this.dataChannel.state)throw new c.SDKInternalError(c.SDKInternalError.codes.InvalidDataChannel,{message:"Data cluster is not open.",localId:this.localNode.getId(),remoteId:this.remoteId,eventMessage:e});let t;if(e.content.data instanceof ArrayBuffer){const s=e.content.data;delete e.content.data,t=this.mergeParts(e,s)}else t=JSON.stringify(e);if("string"==typeof t&&t.length>a.PEER_CONNECTION_CHUNK_SIZE)return this.sendChunked(e,t);const s=e.topicLabel===o.SYSTEM_TOPIC&&[u.SystemMessageType.Subscription,u.SystemMessageType.PeerConnection].includes(e.messageType)?p.QueueElementPriority.High:e instanceof ArrayBuffer?p.QueueElementPriority.Low:p.QueueElementPriority.Medium;this.sendWithRetry(t,s)}addTrack(e,t,s,n){const i=(0,m.getMaxBitrate)(this.maxFps,this.maxBpp),r=this.senders.get(t.id)||{stream:t,priority:s,resolutionScale:1,minResolutionScale:1,bitrate:i,maxBitrate:i,framerate:this.maxFps,maxFramerate:this.maxFps,tracks:{},params:n},o=r.tracks[e.kind]||{track:e};if(o.sender?(o.track=e,this.connection.replaceTrack(e,o.sender)):o.sender=this.connection.addTrack(e,t),r.tracks[e.kind]=o,n&&(r.params=n),n&&"video"===n.kind&&n.resolution&&n.maxResolution&&(r.resolutionScale=this.getResolutionScale(n.resolution,n.maxResolution),r.minResolutionScale=r.resolutionScale,r.tracks.video&&r.tracks.video.sender)){const e=r.tracks.video.sender;this.connection.setEncodingParameters(e,Math.floor(10*r.resolutionScale)/10,r.framerate,r.bitrate,r.priority)}this.senders.set(t.id,r)}setPriority(e,t){const s=this.senders.get(e.id);if(s&&s.priority!==t&&(s.priority=t,s.tracks.video&&s.tracks.video.sender)){const e=s.tracks.video.sender;this.connection.setEncodingParameters(e,Math.floor(10*s.resolutionScale)/10,s.framerate,s.bitrate,s.priority)}}setParams(e,t){const s=this.senders.get(e.id);if(s){if(s.params=t,t&&"video"===t.kind&&t.resolution&&t.maxResolution){if(s.minResolutionScale=this.getResolutionScale(t.resolution,t.maxResolution),s.resolutionScale<s.minResolutionScale&&(s.resolutionScale=s.minResolutionScale),s.tracks.video&&s.tracks.video.sender){const e=s.tracks.video.sender;this.connection.setEncodingParameters(e,Math.floor(10*s.resolutionScale)/10,s.framerate,s.bitrate,s.priority)}this.clearUpgradeTimeout(),this.setUpgradeTimeout()}this.senders.set(e.id,s)}}removeTrack(e,t){const s=this.senders.get(t.id);if(s){const t=s.tracks[e.kind];t&&(t.sender&&this.connection.removeTrack(t.sender),t.track=void 0)}}applyRemediation(e){this.clearUpgradeTimeout();const t=(0,m.findSender)(Array.from(this.senders.values()),e);if(t&&((0,m.applyRemediation)(t,e),t.tracks.video&&t.tracks.video.sender)){const e=t.tracks.video.sender;this.connection.setEncodingParameters(e,Math.floor(10*t.resolutionScale)/10,t.framerate,t.bitrate,t.priority)}(t||e.action===l.RemediationAction.Downgrade)&&this.setUpgradeTimeout()}resetConnection(){super.resetConnection(),this.clearOncloseTimeout(),this.clearWaitAnswer(),this.senders.forEach((e=>{e.tracks.video&&(e.tracks.video.sender=void 0),e.tracks.audio&&(e.tracks.audio.sender=void 0)})),this.isReconnecting=!0}async waitSendBuffer(){return new Promise((async e=>{if(!this.dataChannel||"open"!==this.dataChannel.state)return await S.default.wait(a.PEER_CONNECTION_DATACHANNEL_RETRY_DELAY),void e();this.dataChannel.bufferedAmount<a.PEER_CONNECTION_BUFFER_THRESHOLD?e():this.dataChannel.onBufferedAmountLow=()=>{this.dataChannel&&(this.dataChannel.onBufferedAmountLow=null),e()}}))}sendChunked(e,t){const s=[];for(let e=0;e<t.length;e+=a.PEER_CONNECTION_CHUNK_SIZE)s.push(t.slice(e,e+a.PEER_CONNECTION_CHUNK_SIZE));for(const t of s)this.sendWithRetry(`${a.PEER_CONNECTION_CHUNK_IDENTIFIER};${e.uuid};${s.indexOf(t)};${s.length};${t}`,p.QueueElementPriority.Low)}async sendWithRetry(e,t){e===a.PEER_CONNECTION_HEARTBEAT_PING?this.retryQueue.queues[t].head?.value!==a.PEER_CONNECTION_HEARTBEAT_PING&&this.retryQueue.queues[t].unshift(e):this.retryQueue.queues[t].push(e)}sendAction(e){if(!this.dataChannel||"open"!==this.dataChannel.state)throw new Error("DataChannel is not open.");const t=Date.now();e!==a.PEER_CONNECTION_HEARTBEAT_PING&&(this.messagesSent+=1,this.bytesSent+=e instanceof ArrayBuffer?e.byteLength:e.length),ArrayBuffer,this.dataChannel.send(e),this.timeSending+=Date.now()-t}startHeartbeat(){this.heartbeatUnsubscriber&&this.clearHeartbeat();let e=!0,t=Date.now();this.lastHeartbeat=Date.now(),this.dataChannel.onMessage=s=>{s.data===a.PEER_CONNECTION_HEARTBEAT_PONG&&(this.roundTripTime=Date.now()-t,e&&this.publishSystemMessage({type:d.PeerConnectionMessageType.Success}),e=!1,this.lastHeartbeat=Date.now(),this.isReconnecting&&(this.isReconnecting=!1,this.handleMissingSenders()))},this.heartbeatUnsubscriber=S.default.setInterval((()=>{t=Date.now(),this.sendWithRetry(a.PEER_CONNECTION_HEARTBEAT_PING,p.QueueElementPriority.High),Date.now()-this.lastHeartbeat>(e&&6*a.PEER_CONNECTION_HEARTBEAT_THRESHOLD||a.PEER_CONNECTION_HEARTBEAT_THRESHOLD)&&this.handleDisconnect()}),a.PEER_CONNECTION_HEARTBEAT_INTERVAL)}handleMissingSenders(){this.senders.forEach((e=>{e.tracks.video&&e.tracks.video.track&&!e.tracks.video.sender&&(e.tracks.video.sender=this.connection.addTrack(e.tracks.video.track,e.stream)),e.tracks.audio&&e.tracks.audio.track&&!e.tracks.audio.sender&&(e.tracks.audio.sender=this.connection.addTrack(e.tracks.audio.track,e.stream))}))}sendIceCandidates(){this.publishSystemMessage({type:d.PeerConnectionMessageType.Handshake,candidates:this.handshakeCandidates,origin:d.PeerConnectionOrigin.Sender,version:this.currentVersion,connectionType:this.connectionType})}setupConnectionEvents(){super.setupConnectionEvents(),this.connection.onHandshakeStateChange=()=>{if("failed"===this.connection.handshakeState){y.default.log(h.LoggingChannels.ConnectionState,"iceConnectionState failed",this.localNode.getId(),this.remoteId);try{if(this.connection.canRestartHandshake)return void this.connection.restartHandshake()}catch(e){}this.createOffer({handshakeRestart:!0})}},this.connection.onConnectionStateChange=()=>{"disconnected"!==this.connection.connectionState&&"failed"!==this.connection.connectionState||this.handleDisconnect()}}handleDisconnect(){this.clearHeartbeat(),this.clearRestartTimeout(),this.clearConnectionTimeout(),y.default.warning("disconnect",{clusterId:this.clusterId,nodeId:this.localNode.getId(),nodeType:this.localNode.type,remoteId:this.remoteId,data:{connectionType:this.connectionType,connectionState:this.connection.connectionState,iceConnectionState:this.connection.handshakeState,signalingState:this.connection.signalingState,readyState:this.dataChannel?.state||"",lastHeartbeat:this.lastHeartbeat?Date.now()-this.lastHeartbeat:"",retryQueue:this.retryQueue}}),(this.lastHeartbeat&&Date.now()-this.lastHeartbeat>a.PEER_CONNECTION_HEARTBEAT_TIMEOUT)??1?this.systemTopic.publish({sourceId:this.remoteId,destinationIds:[this.localNode.getId()],messageType:u.SystemMessageType.PeerConnection,content:{type:d.PeerConnectionMessageType.Disconnect}}):(this.resetConnection(),this.publishSystemMessage({type:d.PeerConnectionMessageType.NeedRestart,version:this.currentVersion,connectionType:this.connectionType}),this.restartTimeout=setTimeout((()=>{this.handleDisconnect()}),a.PEER_CONNECTION_RECONNECT_TIMEOUT))}clearHeartbeat(){this.heartbeatUnsubscriber?.(),delete this.heartbeatUnsubscriber}clearConnectionTimeout(){this.connectionTimeout&&(clearTimeout(this.connectionTimeout),delete this.connectionTimeout)}clearRestartTimeout(){this.restartTimeout&&(clearTimeout(this.restartTimeout),delete this.restartTimeout)}clearUpgradeTimeout(){this.upgradeTimeout&&(clearTimeout(this.upgradeTimeout),delete this.upgradeTimeout)}setUpgradeTimeout(){this.upgradeTimeout=setTimeout((()=>{this.applyRemediation({type:l.RemediationMessageType.Remediation,action:l.RemediationAction.Upgrade})}),r.REMEDIATION_UPGRADE_WAIT_TIME)}getResolutionScale(e,t){const s=Math.max(e.width/t.width,e.height/t.height);return Math.min(Math.max(s,1),r.REMEDIATION_MAX_RESOLUTION_SCALE)}clearWaitAnswer(){this.waitAnswer?.(),delete this.waitAnswer}clearOncloseTimeout(){this.oncloseTimeout&&(clearTimeout(this.oncloseTimeout),delete this.oncloseTimeout)}objectToArrayBuffer(e){const t=JSON.stringify(e);return(new TextEncoder).encode(t).buffer}mergeParts(e,t){const s=this.objectToArrayBuffer(e),n=new Uint8Array(i.CONTENT_FILE_HEADER_SIZE),r=new Uint8Array(s),o=new Uint8Array(t);n.set(new Uint8Array(new Uint32Array([r.length]).buffer));const a=new Uint8Array(i.CONTENT_FILE_HEADER_SIZE+r.length+o.length);return a.set(n),a.set(r,i.CONTENT_FILE_HEADER_SIZE),a.set(o,i.CONTENT_FILE_HEADER_SIZE+r.length),a.buffer}}},"./src/models/Content/BaseDataStream.ts":(e,t,s)=>{s.r(t),s.d(t,{BaseDataStream:()=>a});var n=s("@crewdle/web-sdk-types"),i=s("./src/errors/SDKInternalError.ts"),r=s("./src/models/Content/BaseStream.ts"),o=s("./src/utils/ObjectStore/Helpers.ts");class a extends r.BaseStream{outgoingTopic;incomingTopic;fileChunks=new Map;messagesSent=0;messagesReceived=0;bytesSent=0;bytesReceived=0;constructor(e,t){super(e,t)}getLabel(){return this.label}getName(){return this.label}getContentType(){return n.ContentType.Data}getInternalStreamId(){return this.label}registerPublisher(e){if(this.outgoingTopic)throw new i.SDKInternalError(i.SDKInternalError.codes.InvalidPublisher,{message:`Publisher already registered on PubSubTopic ${this.owner.getId()} - ${this.label}`,topic:this.outgoingTopic});this.outgoingTopic=e}registerSubscriber(e){if(this.incomingTopic)throw new i.SDKInternalError(i.SDKInternalError.codes.InvalidSubscriber,{message:`Subscriber already registered on PubSubTopic ${this.owner.getId()} - ${this.label}`,topic:this.incomingTopic});this.incomingTopic=e}unregisterPublisher(){delete this.outgoingTopic}unregisterSubscriber(){delete this.incomingTopic}async send(e,t){if(this.messagesSent+=1,e instanceof File){const s=await(0,o.readFileContent)(e);return this.bytesSent+=s.reduce(((e,t)=>e+t.byteLength),0),void s.forEach(((i,r)=>{this.outgoingTopic.publish({sourceId:this.owner.getId(),destinationIds:t,propagate:!0,contentType:n.ContentType.File,content:{name:e.name,type:e.type,data:i,index:r,total:s.length}})}))}this.bytesSent+=JSON.stringify(e).length,this.outgoingTopic.publish({sourceId:this.owner.getId(),destinationIds:t,propagate:!0,contentType:n.ContentType.Data,content:e})}onMessage(e){return this.incomingTopic.subscribe((t=>{switch(t.contentType){case n.ContentType.Data:this.messagesReceived+=1,this.bytesReceived+=JSON.stringify(t.content).length,e(t.sourceId,t.content);break;case n.ContentType.File:this.fileChunks.has(t.content.name)||this.fileChunks.set(t.content.name,[]);const s=this.fileChunks.get(t.content.name);s[t.content.index]=t.content.data,s.length===t.content.total&&(this.messagesReceived+=1,this.bytesReceived+=s.reduce(((e,t)=>e+t.byteLength),0),e(t.sourceId,(0,o.getFileContent)(s,t.content.name,t.content.type)),this.fileChunks.delete(t.content.name))}}))}}},"./src/models/Content/BaseLocalMediaStream.ts":(e,t,s)=>{s.r(t),s.d(t,{BaseLocalMediaStream:()=>u});var n=s("@crewdle/web-sdk-types"),i=s("./src/constants/System.ts"),r=s("./src/interfaces/Content/Content.ts"),o=s("./src/interfaces/Subscription/SystemEvent.ts"),a=s("./src/interfaces/Utils/Logger.ts"),c=s("./src/models/Content/BaseMediaStream.ts"),d=s("./src/models/Content/OutgoingMediaStream.ts"),l=s("./src/utils/Logger/Logger.ts");class u extends c.BaseMediaStream{clusterId;priority=n.MediaStreamPriority.Default;trackEndedListeners=new Map;outgoingStreams=new Map;constructor(e,t,s,n){super(e,t,s instanceof MediaStream?s:s.srcObject?s.srcObject:s.captureStream()),this.clusterId=n,this.mediaStream.getTracks().forEach((e=>this.setupTrackEndedListeners(e))),l.default.logServiceEvent(a.LoggingServices.MediaStream,{type:"publish",label:this.label,nodeId:this.owner.getId(),nodeType:this.owner.type,clusterId:this.clusterId,streamId:this.getInternalStreamId(),trackKinds:this.mediaStream.getTracks().map((e=>e.kind))})}destroy(){this.outgoingStreams.size>0&&(this.outgoingStreams.forEach((e=>{e.unregisterSystemPublisher(),e.destroy()})),this.outgoingStreams.clear()),this.trackEndedListeners.forEach((e=>e())),super.destroy()}publish(e){this.systemTopic.publish({sourceId:this.owner.getId(),destinationIds:e?[e]:void 0,propagate:!0,messageType:o.SystemMessageType.Content,content:{type:r.ContentMessageType.PublishMediaStream,ownerId:this.owner.getId(),label:this.label,stream:{streamId:this.getInternalStreamId(),availableTrackKinds:this.mediaStream.getTracks().map((e=>e.kind))}}})}unpublish(){this.systemTopic.publish({sourceId:this.owner.getId(),propagate:!0,messageType:o.SystemMessageType.Content,content:{type:r.ContentMessageType.UnpublishMediaStream,ownerId:this.owner.getId(),label:this.label}}),this.systemTopic.publish({sourceId:i.SYSTEM_TOPIC_INTERNAL,messageType:o.SystemMessageType.Content,content:{type:r.ContentMessageType.CloseMediaStream,label:this.label}}),l.default.logServiceEvent(a.LoggingServices.MediaStream,{type:"unpublish",label:this.label,nodeId:this.owner.getId(),nodeType:this.owner.type,clusterId:this.clusterId,streamId:this.getInternalStreamId()})}getPriority(){return this.priority}setPriority(e){this.priority=e,this.outgoingStreams.forEach((t=>t.setPriority(e)))}getShareableStream(e,t){if(!this.outgoingStreams.has(e)){const s=new d.OutgoingMediaStream(this.owner,this.label,this.mediaStream,e,t),n=s.onUnregisterPublisher((()=>{n(),this.outgoingStreams.get(e)?.destroy(),this.outgoingStreams.delete(e)}));this.outgoingStreams.set(e,s),s.registerSystemPublisher(this.systemTopic)}return this.outgoingStreams.get(e)}getShareableStreamId(){return this.mediaStream.id}handleLocalTrackFailure(e){this.systemTopic.publish({sourceId:i.SYSTEM_TOPIC_INTERNAL,messageType:o.SystemMessageType.Content,content:{type:r.ContentMessageType.LocalMediaStreamTrackFail,label:this.label,trackKinds:[e.kind]}})}setupTrackEndedListeners(e){const t=()=>this.handleLocalTrackFailure(e);e.addEventListener("ended",t),e.addEventListener("mute",t),this.trackEndedListeners.set(e.kind,(()=>{e.removeEventListener("ended",t),e.removeEventListener("mute",t),this.trackEndedListeners.delete(e.kind)}))}}},"./src/models/Content/BaseMediaStream.ts":(e,t,s)=>{s.r(t),s.d(t,{BaseMediaStream:()=>r});var n=s("@crewdle/web-sdk-types"),i=s("./src/models/Content/BaseStream.ts");class r extends i.BaseStream{mediaStream;constructor(e,t,s){super(e,t),this.mediaStream=s}getContentType(){return n.ContentType.Media}getMediaStream(){return this.mediaStream}getInternalStreamId(){return this.mediaStream.id}}},"./src/models/Content/BaseStream.ts":(e,t,s)=>{s.r(t),s.d(t,{BaseStream:()=>n});class n{owner;label;systemTopic;constructor(e,t){this.owner=e,this.label=t}getLabel(){return this.label}getOwnerId(){return this.owner.getId()}destroy(){}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}}},"./src/models/Content/ContentManager.ts":(e,t,s)=>{s.r(t),s.d(t,{ContentManager:()=>y});var n=s("./src/public/errors/SDKClientError.ts"),i=s("./src/errors/SDKInternalError.ts"),r=s("./src/interfaces/Content/Content.ts"),o=s("./src/interfaces/Node/NodeMessage.ts"),a=s("./src/interfaces/Subscription/SubscriptionMessage.ts"),c=s("./src/interfaces/Utils/Logger.ts"),d=s("./src/models/Content/ObjectStore.ts"),l=s("./src/models/Content/KeyValueDatabase.ts"),u=s("./src/models/Content/LocalDynamicMediaStream.ts"),h=s("./src/models/Content/LocalMediaStream.ts"),p=s("./src/models/Content/PubSubTopic.ts"),g=s("./src/models/Content/RemoteMediaStream.ts"),m=s("./src/models/Node/User.ts"),b=s("./src/services/Transaction/FirebaseRDBTransactionService.ts"),S=s("./src/utils/Logger/Logger.ts");class y{configs;maxFps;audioContext;localMediaStreams=new Map;remoteMediaStreams=new Map;pubSubTopics=new Map;objectStores=new Map;keyValueDatabases=new Map;transactionService;constructor(e,t,s){this.configs=e,this.maxFps=t,this.audioContext=s,this.transactionService=new b.FirebaseRDBTransactionService(this.configs.vendorId,this.configs.clusterId)}close(e=!1){this.remoteMediaStreams.forEach(((e,t)=>{e.forEach(((e,s)=>{this.removeRemoteMediaStream(t,s)}))})),e||(this.localMediaStreams.forEach(((e,t)=>{this.removeLocalMediaStream(t)})),this.pubSubTopics.forEach(((e,t)=>{this.removePubSubTopic(t)})),this.objectStores.forEach(((e,t)=>{this.removeObjectStore(t)})),this.keyValueDatabases.forEach(((e,t)=>{this.removeKeyValueDatabase(t)})))}createObjectStoreBucket(e,t){if(this.objectStores.has(e))throw new n.SDKClientError(n.SDKClientErrorCodes.ObjectStoreAlreadyExists,"Store already exists");const s=new d.ObjectStore(this.configs.localNode,e,this.configs.clusterId,this.configs.vendorId,this.transactionService,t);return this.objectStores.set(e,s),this.configs.mediator.registerSystemSource(s),s}async createKeyValueDatabase(e,t,s){if(this.keyValueDatabases.has(e))throw new n.SDKClientError(n.SDKClientErrorCodes.KeyValueDatabaseAlreadyExists,"Database already exists");try{const n=new l.KeyValueDatabase(this.configs.localNode,e,this.configs.clusterId,this.configs.vendorId,t,s);return this.keyValueDatabases.set(e,n),this.configs.mediator.registerSystemSource(n),n}catch(t){if(t instanceof n.SDKClientError)throw t;throw console.warn("Failed to create key value database",t),new i.SDKInternalError(i.SDKInternalError.codes.KeyValueDatabaseCreationFailed,{label:e,clusterId:this.configs.clusterId,vendorId:this.configs.vendorId})}}createLocalDynamicMediaStream(e,t){if(this.localMediaStreams.has(e))throw new n.SDKClientError(n.SDKClientErrorCodes.LocalMediaStreamAlreadyExists,"Local MediaStream already exists");if(!this.audioContext)throw new n.SDKClientError(n.SDKClientErrorCodes.LocalMediaStreamNoAudioContext,"AudioContext is not available");const s=new u.LocalDynamicMediaStream(this.configs.localNode,e,t,this.maxFps,this.audioContext,this.configs.clusterId);return this.localMediaStreams.set(e,s),this.configs.mediator.registerSystemSource(s),s.publish(),s}createLocalMediaStream(e,t){if(this.localMediaStreams.has(e))throw new n.SDKClientError(n.SDKClientErrorCodes.LocalMediaStreamAlreadyExists,"Stream already exists");const s=new h.LocalMediaStream(this.configs.localNode,e,t,this.configs.clusterId);return this.localMediaStreams.set(e,s),this.configs.mediator.registerSystemSource(s),s.publish(),s}createPubSubTopic(e){if(this.pubSubTopics.has(e))throw new n.SDKClientError(n.SDKClientErrorCodes.PubSubTopicAlreadyExists,"PubSub already exists");const t=new p.PubSubTopic(this.configs.localNode,e,this.configs.clusterId);return this.pubSubTopics.set(e,t),this.configs.mediator.registerSystemSource(t),t}createRemoteMediaStream(e,t,s,i){this.remoteMediaStreams.has(e)||this.remoteMediaStreams.set(e,new Map);const r=this.remoteMediaStreams.get(e);if(r.has(t))throw new n.SDKClientError(n.SDKClientErrorCodes.RemoteMediaStreamAlreadyExists,"Remote MediaStream already exists");const o=new m.User(e,"",""),a=new g.RemoteMediaStream(this.configs.localNode,o,t,s,i,this.configs.clusterId);return r.set(t,a),this.configs.mediator.registerSystemSource(a),a}getObjectStoreBuckets(e){const t=Array.from(this.objectStores.values());return e?t.filter(e):t}getKeyValueDatabases(e){const t=Array.from(this.keyValueDatabases.values());return e?t.filter(e):t}getLocalMediaStreams(e){const t=Array.from(this.localMediaStreams.values());return e?t.filter(e):t}getPubSubTopics(e){const t=Array.from(this.pubSubTopics.values());return e?t.filter(e):t}getRemoteMediaStreams(e){const t=Array.from(this.remoteMediaStreams.values()).reduce(((e,t)=>[...e,...Array.from(t.values())]),[]);return e?t.filter(e):t}handleContentSystemEvents(e){switch(e.content.type){case r.ContentMessageType.PublishMediaStream:this.handlePublishMediaStream(e.content);break;case r.ContentMessageType.UnpublishMediaStream:this.handleUnpublishMediaStream(e.content);break;case r.ContentMessageType.CloseMediaStream:this.handleCloseMediaStream(e.content);break;case r.ContentMessageType.ClosePubSubTopic:this.handleClosePubSubTopic(e.content);break;case r.ContentMessageType.CloseObjectStoreBucket:this.handleCloseObjectStore(e.content);break;case r.ContentMessageType.CloseKeyValueDatabase:this.handleCloseKeyValueDatabase(e.content);break;case r.ContentMessageType.UnsubscribeMediaStream:this.handleContentUnsubscribeMediaStream(e.content);break;case r.ContentMessageType.RequestSyncKeyValueDatabase:this.keyValueDatabases.get(e.content.label)?.sendTransactionsDump(e.sourceId);break;case r.ContentMessageType.SendTransactionsDump:this.keyValueDatabases.get(e.content.label)?.processTransactionsDump(e.sourceId,e.content.transactions);break;case r.ContentMessageType.RequestTransactionsValue:this.keyValueDatabases.get(e.content.label)?.sendTransactionsValue(e.sourceId,e.content.transactionIds);break;case r.ContentMessageType.LocalMediaStreamTrackFail:this.configs.mediator.notifyCluster("local-media-stream-track-fail",{label:e.content.label,trackKinds:e.content.trackKinds})}}handleNodeSystemEvents({content:e}){switch(e.type){case o.NodeMessageType.NodeJoin:this.handleNodeJoinNeedPublishedStream(e),this.notifyObjectStoreOfNodeJoin(e);break;case o.NodeMessageType.NodeLeave:this.handleNodeLeave(e),this.notifyObjectStoreOfNodeLeave(e)}}handleSubscriptionSystemEvents(e){switch(e.content.type){case a.SubscriptionMessageType.SubscribeMediaStream:this.handleSubscribeMediaStream(e.sourceId,e.content);break;case a.SubscriptionMessageType.UpdateMediaStream:this.handleUpdateMediaStream(e.sourceId,e.content);break;case a.SubscriptionMessageType.UnsubscribeMediaStream:this.handleUnsubscribeMediaStream(e.sourceId,e.content)}}handleContentUnsubscribeMediaStream(e){if(0===e.remainingTracks)this.remoteMediaStreams.get(e.ownerId)?.get(e.label)?.destroy();else{const t=this.remoteMediaStreams.get(e.ownerId)?.get(e.label);if(!t)return;e.trackKinds.forEach((e=>t.unsubscribeTrackEndedListener(e)))}}handlePublishMediaStream(e){const{label:t,ownerId:s,stream:{streamId:n,availableTrackKinds:i}}=e;if(this.remoteMediaStreams.get(s)?.has(t))return void S.default.log(c.LoggingChannels.Content,"Stream already exists",n);const r=this.createRemoteMediaStream(s,t,n,i);this.configs.mediator.notifyCluster("content-publish-media",{ownerId:s,stream:r})}handleUnpublishMediaStream({ownerId:e,label:t}){this.removeRemoteMediaStream(e,t),this.configs.mediator.notifyCluster("content-unpublish-media",{ownerId:e,label:t})}handleCloseMediaStream(e){this.removeLocalMediaStream(e.label)}handleCloseObjectStore(e){this.removeObjectStore(e.label)}handleClosePubSubTopic(e){this.removePubSubTopic(e.label)}handleCloseKeyValueDatabase(e){this.removeKeyValueDatabase(e.label)}handleSubscribeMediaStream(e,t){const{ownerId:s,label:n}=t;let i;i=s!==this.configs.localNode.getId()?this.remoteMediaStreams.get(s).get(n):this.localMediaStreams.get(n),i.getShareableStream(e,t.params).subscribe(t,i.getPriority())}handleUpdateMediaStream(e,t){const{ownerId:s,label:n}=t;let i;i=s!==this.configs.localNode.getId()?this.remoteMediaStreams.get(s).get(n):this.localMediaStreams.get(n),i.getShareableStream(e,t.params).update(t)}handleUnsubscribeMediaStream(e,t){const{ownerId:s,label:n}=t;let i;i=s!==this.configs.localNode.getId()?this.remoteMediaStreams.get(s).get(n):this.localMediaStreams.get(n),i.getShareableStream(e).unsubscribe(t)}handleNodeJoinNeedPublishedStream({id:e}){this.getLocalMediaStreams().forEach((t=>{t.publish(e)}))}handleNodeLeave({id:e}){this.getRemoteMediaStreams((t=>t.getOwnerId()===e)).forEach((e=>{this.removeRemoteMediaStream(e.getOwnerId(),e.getLabel())}))}notifyObjectStoreOfNodeJoin({id:e}){this.objectStores.forEach((t=>t.handleNodeJoin(e)))}notifyObjectStoreOfNodeLeave({id:e}){this.objectStores.forEach((t=>t.handleNodeLeave(e)))}removeObjectStore(e){if(!this.objectStores.has(e))throw new n.SDKClientError(n.SDKClientErrorCodes.ObjectStoreDoesNotExist,"Stream does not exist");const t=this.objectStores.get(e);this.objectStores.delete(e),t.destroy(),this.configs.mediator.unregisterSystemSource(t)}removePubSubTopic(e){if(!this.pubSubTopics.has(e))throw new n.SDKClientError(n.SDKClientErrorCodes.PubSubTopicDoesNotExist,"Stream does not exist");const t=this.pubSubTopics.get(e);this.pubSubTopics.delete(e),t.destroy(),this.configs.mediator.unregisterSystemSource(t)}removeKeyValueDatabase(e){if(!this.keyValueDatabases.has(e))throw new n.SDKClientError(n.SDKClientErrorCodes.KeyValueDatabaseDoesNotExist,"Database does not exist");const t=this.keyValueDatabases.get(e);this.keyValueDatabases.delete(e),t.destroy(),this.configs.mediator.unregisterSystemSource(t)}removeLocalMediaStream(e){if(!this.localMediaStreams.has(e))throw new i.SDKInternalError(i.SDKInternalError.codes.LocalMediaStreamDoesNotExist,{label:e,localId:this.configs.localNode.getId()});const t=this.localMediaStreams.get(e);this.configs.mediator.unregisterSystemSource(t),t.destroy(),this.localMediaStreams.delete(e)}removeRemoteMediaStream(e,t){if(!this.remoteMediaStreams.has(e))throw new i.SDKInternalError(i.SDKInternalError.codes.NodeDoesNotExist,{nodeId:e,localId:this.configs.localNode.getId()});const s=this.remoteMediaStreams.get(e);if(!s.has(t))throw new i.SDKInternalError(i.SDKInternalError.codes.RemoteMediaStreamDoesNotExist,{nodeId:e,label:t,localId:this.configs.localNode.getId()});const n=s.get(t);this.configs.mediator.unregisterSystemSource(n),n.destroy(),s.delete(t)}}},"./src/models/Content/KeyValueDatabase.ts":(e,t,s)=>{s.r(t),s.d(t,{KeyValueDatabase:()=>T});var n=s("@crewdle/web-sdk-types"),i=s("./src/public/errors/SDKClientError.ts"),r=s("./src/public/models/Content/KeyValueDatabaseQueryBuilder.ts"),o=s("./src/public/models/Content/KeyValueDatabaseLayoutBuilder.ts"),a=s("./src/constants/Content.ts"),c=s("./src/constants/System.ts"),d=s("./src/errors/SDKInternalError.ts"),l=s("./src/interfaces/Content/Content.ts"),u=s("./src/interfaces/Content/DataContent.ts"),h=s("./src/interfaces/Subscription/SystemEvent.ts"),p=s("./src/interfaces/Utils/Logger.ts"),g=s("./src/models/Content/BaseDataStream.ts"),m=s("./src/models/Content/KeyValueDatabaseTable.ts"),b=s("./src/services/Firebase/FirebaseService.ts"),S=s("./src/utils/Observer/Observer.ts"),y=s("./src/utils/Logger/Logger.ts");class T extends g.BaseDataStream{localNode;clusterId;vendorId;db;dbKey;tables=new Map;tableObserver;transactionTable;tableUnsubscriber;isSync;syncResolve;transactionsToSync=[];timeoutCallback=()=>{};syncTimeout;eventListener=(0,S.createSingleObserver)();listenerUnsubscriber;syncTransactionsWritten=[];layout;debounceStats;writes=0;reads=0;constructor(e,t,s,n,r,a){if("string"!=typeof t)throw new i.SDKClientError(i.SDKClientErrorCodes.KeyValueDatabaseNameNotString,"Cannot create Key-Value Database: Name must be a string");if(super(e,t),this.localNode=e,this.clusterId=s,this.vendorId=n,this.dbKey=`ccc${this.vendorId}ccc${this.clusterId}ccc${this.label}`,this.tableObserver=(0,S.createSingleObserver)(),this.isSync=new Promise((e=>{this.syncResolve=e})),r instanceof o.LayoutBuilder)this.layout=r.getLayout();else{const[e,t]=o.LayoutBuilder.validateLayout(r);if(!e)throw new i.SDKClientError(i.SDKClientErrorCodes.KeyValueDatabaseInvalidLayout,`Invalid layout: ${t}`);this.layout=r}this.addReservedTables(this.layout),this.db=new a(this.dbKey,this.layout),this.sendStats()}reset(){this.sendStats()}getContentType(){return n.ContentType.KeyValueDatabase}destroy(){this.db.close(),this.tableUnsubscriber?.(),clearTimeout(this.debounceStats),delete this.debounceStats,super.destroy()}close(){this.systemTopic.publish({sourceId:c.SYSTEM_TOPIC_INTERNAL,messageType:h.SystemMessageType.Content,content:{type:l.ContentMessageType.CloseKeyValueDatabase,label:this.label}})}getTable(e){const t=this.tables.get(e);if(t)return t;try{if(!this.db.hasTable(e))throw new i.SDKClientError(i.SDKClientErrorCodes.KeyValueDatabaseTableNotFound,"Table not found");const t=new m.DatabaseTable(this.db.getTableConnector(e),e,this.tableObserver);return this.tables.set(e,t),{get:t.get.bind(t),set:t.set.bind(t),add:t.add.bind(t),delete:t.delete.bind(t),clear:t.clear.bind(t),list:t.list.bind(t),count:t.count.bind(t),subscribe:t.subscribe.bind(t),unsubscribe:t.unsubscribe.bind(t)}}catch(e){throw new i.SDKClientError(i.SDKClientErrorCodes.KeyValueDatabaseNotOpen,"Database not open")}}subscribe(e){this.listenerUnsubscriber=this.eventListener.subscribe(e)}unsubscribe(){this.listenerUnsubscriber?.()}async open(){const e=[a.CONTENT_KEY_VALUE_DATABASE_TRANSACTION_TABLE_NAME,a.CONTENT_KEY_VALUE_DATABASE_LAYOUT_TABLE_NAME],t=[];try{await this.db.open();const s=this.db.getTableConnector(a.CONTENT_KEY_VALUE_DATABASE_LAYOUT_TABLE_NAME),n=await s.list(),{id:i,layout:r}=n[0]??{};if(r){for(const s in r)e.includes(s)||this.db.hasTable(s)||t.push(s);s.set(i,{layout:this.layout})}else s.add({layout:this.layout})}catch(e){throw new i.SDKClientError(i.SDKClientErrorCodes.KeyValueDatabaseNotOpen,e.message||"Error encountered while opening database")}this.instantiateTransactionTable(),this.setOnMessageHandler(),this.setOnTableWriteHandler(),t.forEach((e=>this.deleteTransactionsForTable(e)))}async sync(e,t){e?(this.timeoutCallback=t,this.syncTimeout=setTimeout(t,a.CONTENT_KEY_VALUE_DATABASE_SYNC_TIMEOUT),this.systemTopic.publish({sourceId:this.localNode.getId(),destinationIds:[e],messageType:h.SystemMessageType.Content,content:{type:l.ContentMessageType.RequestSyncKeyValueDatabase,label:this.label}}),await this.isSync):setTimeout((()=>{this.clearSyncTimeout(),this.publishSyncCompleted()}),0)}async sendTransactionsDump(e){if(!this.transactionTable)throw new d.SDKInternalError(d.SDKInternalError.codes.KeyValueDatabaseTransactionTableNotInitialized);await this.isSync;const t=await this.transactionTable.list();this.systemTopic.publish({sourceId:this.localNode.getId(),destinationIds:[e],messageType:h.SystemMessageType.Content,content:{type:l.ContentMessageType.SendTransactionsDump,label:this.label,transactions:t}})}async processTransactionsDump(e,t){if(!this.transactionTable)throw new d.SDKInternalError(d.SDKInternalError.codes.KeyValueDatabaseTransactionTableNotInitialized);this.clearSyncTimeout();const s=await this.transactionTable.list();for(const e of s){const s=t.find((t=>t.id===e.id));if(s&&this.compareTransactions(e,s)<=0)continue;const[n,i]=e.id.split("::"),r=this.tables.get(n),o=await(r?.get(i));e.value=o,this.send(e)}for(const e of t){const t=await this.transactionTable.get(e.id);if(!(t&&this.compareTransactions(e,t)<=0))if(e.action===u.InternalDatabaseTableWriteAction.Delete){const[t,s]=e.id.split("::"),n=this.tables.get(t);await(n?.delete(s,!1))}else this.transactionsToSync.push(e.id)}if(0===this.transactionsToSync.length)return this.clearSyncTimeout(),void this.publishSyncCompleted();this.syncTimeout=setTimeout(this.timeoutCallback,a.CONTENT_KEY_VALUE_DATABASE_SYNC_TIMEOUT),this.systemTopic.publish({sourceId:this.localNode.getId(),destinationIds:[e],messageType:h.SystemMessageType.Content,content:{type:l.ContentMessageType.RequestTransactionsValue,label:this.label,transactionIds:this.transactionsToSync}})}async sendTransactionsValue(e,t){if(!this.transactionTable)throw new d.SDKInternalError(d.SDKInternalError.codes.KeyValueDatabaseTransactionTableNotInitialized);for(const s of t){const t=await this.transactionTable.get(s);if(!t)continue;const[n,i]=s.split("::"),r=this.tables.get(n),o=await(r?.get(i));t.value=o,this.send(t,[e])}}async writeTransaction(e){if(!this.transactionTable)throw new d.SDKInternalError(d.SDKInternalError.codes.KeyValueDatabaseTransactionTableNotInitialized);const t=await this.transactionTable.get(e.id);if(t&&this.compareTransactions(e,t)<=0)return;const s={...e};return delete s.value,await this.transactionTable.set(e.id,s),e}compareTransactions(e,t){return e.timestamp<t.timestamp?-1:e.timestamp>t.timestamp?1:e.priority-t.priority}async getTransactionFromTableWriteEvent(e){if(!this.transactionTable)throw new d.SDKInternalError(d.SDKInternalError.codes.KeyValueDatabaseTransactionTableNotInitialized);const t=`${e.tableName}::${e.key}`,s=await b.default.getEstimatedTimestamp(),n={id:t,priority:Math.random(),timestamp:s,action:e.action};if(await this.writeTransaction(n))return n}async deleteTransactionsForTable(e){if(!this.transactionTable)throw new d.SDKInternalError(d.SDKInternalError.codes.KeyValueDatabaseTransactionTableNotInitialized);const t=r.QueryBuilder.index("id").where("between",[`${e}::`,`${e}::￿`]),s=await this.transactionTable.list(t.getQuery());for(const e of s)await this.transactionTable.delete(e.id)}setOnMessageHandler(){this.onMessage((async(e,t)=>{if(t instanceof File)return;if(!await this.writeTransaction(t))return void this.checkSyncComplete(t);if(!t.value)throw new d.SDKInternalError(d.SDKInternalError.codes.KeyValueDatabaseTransactionValueNotSet);const[s,n]=t.id.split("::"),i=this.tables.get(s);if(!i)throw new d.SDKInternalError(d.SDKInternalError.codes.KeyValueDatabaseTableDoesNotExist,{table:i});let r=0;switch(t.action){case u.InternalDatabaseTableWriteAction.Add:case u.InternalDatabaseTableWriteAction.Update:{const e=i.set(n,t.value,!1);r=JSON.stringify(t.value).length,this.transactionsToSync.includes(t.id)&&this.syncTransactionsWritten.push(e);break}case u.InternalDatabaseTableWriteAction.Delete:{const e=i.delete(n,!1);this.transactionsToSync.includes(t.id)&&this.syncTransactionsWritten.push(e);break}}y.default.logServiceEvent(p.LoggingServices.KeyValueDatabase,{type:"sync",label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,tableName:s,key:n,size:r}),this.checkSyncComplete(t)}))}setOnTableWriteHandler(){this.tableUnsubscriber=this.tableObserver.subscribe((async e=>{let t=0;switch(e.action){case u.InternalDatabaseTableWriteAction.Add:case u.InternalDatabaseTableWriteAction.Update:case u.InternalDatabaseTableWriteAction.Delete:{const s=await this.getTransactionFromTableWriteEvent(e);if(!s)return;s.value=e.value,this.send(s),t=JSON.stringify(e.value).length,this.writes+=1;break}case u.InternalDatabaseTableReadAction.Get:case u.InternalDatabaseTableReadAction.List:case u.InternalDatabaseTableReadAction.Count:this.reads+=1}y.default.logServiceEvent(p.LoggingServices.KeyValueDatabase,{type:e.action,label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,tableName:e.tableName,key:e.key,size:t}),this.sendStats()}))}instantiateTransactionTable(){this.db&&(this.transactionTable||(this.transactionTable=this.db.getTableConnector(a.CONTENT_KEY_VALUE_DATABASE_TRANSACTION_TABLE_NAME)))}clearSyncTimeout(){this.syncTimeout&&(clearTimeout(this.syncTimeout),delete this.syncTimeout)}publishSyncCompleted(){this.eventListener.publish({event:n.DatabaseEvent.SyncComplete}),this.syncResolve?.(!0),delete this.syncResolve,this.sendStats()}async publishSyncCompletedAfterWrites(){await Promise.all(this.syncTransactionsWritten),this.publishSyncCompleted()}checkSyncComplete(e){this.transactionsToSync.includes(e.id)&&(this.clearSyncTimeout(),this.transactionsToSync=this.transactionsToSync.filter((t=>t!==e.id)),0!==this.transactionsToSync.length?this.syncTimeout=setTimeout(this.timeoutCallback,a.CONTENT_KEY_VALUE_DATABASE_SYNC_TIMEOUT):this.publishSyncCompletedAfterWrites())}sendStats(){this.debounceStats&&clearTimeout(this.debounceStats),this.debounceStats=setTimeout((async()=>{delete this.debounceStats;let e=0;for(const t of this.tables.values())e+=await t.calculateSize();this.systemTopic.publish({sourceId:c.SYSTEM_TOPIC_INTERNAL,messageType:h.SystemMessageType.Content,content:{type:l.ContentMessageType.KeyValueDatabaseStats,label:this.label,stats:{timestamp:Date.now(),storage:e,messagesSent:this.messagesSent,messagesReceived:this.messagesReceived,bytesSent:this.bytesSent,bytesReceived:this.bytesReceived,writes:this.writes,reads:this.reads}}}),y.default.logStorage(p.LoggingServices.KeyValueDatabase,`ccc${this.clusterId}ccc${this.label}`,e)}),a.CONTENT_KEY_VALUE_DATABASE_STATS_DEBOUNCE)}addReservedTables(e){if(e.tables[a.CONTENT_KEY_VALUE_DATABASE_TRANSACTION_TABLE_NAME])throw new i.SDKClientError(i.SDKClientErrorCodes.KeyValueDatabaseTableNameReserved,`Cannot create Key-Value Database: Table '${a.CONTENT_KEY_VALUE_DATABASE_TRANSACTION_TABLE_NAME}' reserved`);if(e.tables[a.CONTENT_KEY_VALUE_DATABASE_LAYOUT_TABLE_NAME])throw new i.SDKClientError(i.SDKClientErrorCodes.KeyValueDatabaseTableNameReserved,`Cannot create Key-Value Database: Table '${a.CONTENT_KEY_VALUE_DATABASE_LAYOUT_TABLE_NAME}' reserved`);e.tables[a.CONTENT_KEY_VALUE_DATABASE_TRANSACTION_TABLE_NAME]={indexes:[]},e.tables[a.CONTENT_KEY_VALUE_DATABASE_LAYOUT_TABLE_NAME]={indexes:[]}}}},"./src/models/Content/KeyValueDatabaseTable.ts":(e,t,s)=>{s.r(t),s.d(t,{DatabaseTable:()=>a});var n=s("./src/public/errors/SDKClientError.ts"),i=s("./src/public/models/Content/KeyValueDatabaseQueryBuilder.ts"),r=s("./src/interfaces/Content/DataContent.ts"),o=s("./src/utils/Observer/Observer.ts");class a{connector;tableName;tableObserver;eventListener=(0,o.createSingleObserver)();listenerUnsubscriber;constructor(e,t,s){this.connector=e,this.tableName=t,this.tableObserver=s}destroy(){this.listenerUnsubscriber?.()}async get(e){const t={key:e,tableName:this.tableName,action:r.InternalDatabaseTableReadAction.Get};return this.tableObserver.publish(t),this.connector.get(e)}async set(e,t,s=!0){this.validateValue(t);const n=await this.connector.get(e),i=await this.connector.set(e,t),o=n?r.InternalDatabaseTableWriteAction.Update:r.InternalDatabaseTableWriteAction.Add;if(this.publish(o,i),!s)return i;const a={key:e,tableName:this.tableName,action:o,value:i};return this.tableObserver.publish(a),i}async add(e){this.validateValue(e);const t=await this.connector.add(e),s={key:t.id,tableName:this.tableName,action:r.InternalDatabaseTableWriteAction.Add,value:t};return this.tableObserver.publish(s),this.publish(s.action,t),t}async delete(e,t=!0){const s=await this.connector.get(e);if(!s)return;await this.connector.delete(e);const n=r.InternalDatabaseTableWriteAction.Delete;if(this.publish(n,s),!t)return;const i={key:e,tableName:this.tableName,action:n,value:s};this.tableObserver.publish(i)}async clear(){const e=await this.list();for(const t of e){const e=r.InternalDatabaseTableWriteAction.Delete;this.publish(e,t);const s={key:t.id,tableName:this.tableName,action:e,value:t};this.tableObserver.publish(s)}return this.connector.clear()}async list(e){const t={key:"",tableName:this.tableName,action:r.InternalDatabaseTableReadAction.List};this.tableObserver.publish(t);try{e&&(e=e instanceof i.QueryBuilder?e.getQuery():i.QueryBuilder.buildQuery(e).getQuery())}catch(e){throw new n.SDKClientError(n.SDKClientErrorCodes.KeyValueDatabaseInvalidQuery,"Invalid query")}try{return await this.connector.list(e)}catch(e){let t="Invalid query";throw e instanceof Error&&(t=e.message),new n.SDKClientError(n.SDKClientErrorCodes.KeyValueDatabaseInvalidQuery,t)}}async count(e){const t={key:"",tableName:this.tableName,action:r.InternalDatabaseTableReadAction.Count};this.tableObserver.publish(t);try{e&&(e=e instanceof i.QueryBuilder?e.getQuery():i.QueryBuilder.buildQuery(e).getQuery())}catch(e){throw new n.SDKClientError(n.SDKClientErrorCodes.KeyValueDatabaseInvalidQuery,"Invalid query")}try{return await this.connector.count(e)}catch(e){let t="Invalid query";throw e instanceof Error&&(t=e.message),new n.SDKClientError(n.SDKClientErrorCodes.KeyValueDatabaseInvalidQuery,t)}}calculateSize(){return this.connector.calculateSize()}subscribe(e){this.listenerUnsubscriber=this.eventListener.subscribe(e)}unsubscribe(){this.listenerUnsubscriber?.()}publish(e,t){const s=this.buildTableEvent(e,t);this.eventListener.publish(s)}buildTableEvent(e,t){let s;switch(e){case r.InternalDatabaseTableWriteAction.Add:s="add";break;case r.InternalDatabaseTableWriteAction.Update:s="update";break;case r.InternalDatabaseTableWriteAction.Delete:s="delete"}return{action:s,value:t}}validateValue(e){if("object"!=typeof e||null===e)throw new n.SDKClientError(n.SDKClientErrorCodes.KeyValueDatabaseInvalidValue,"Invalid value. Must be an object.");for(const t in e){const s=e[t];if("object"!=typeof s||s instanceof Date){if(!["string","number","boolean"].includes(typeof s))throw new n.SDKClientError(n.SDKClientErrorCodes.KeyValueDatabaseInvalidValue,`Invalid value. Property '${t}' must be a string, number, boolean, or Date.`)}else this.validateValue(s)}}}},"./src/models/Content/LocalDynamicMediaStream.ts":(e,t,s)=>{s.r(t),s.d(t,{LocalDynamicMediaStream:()=>i});var n=s("./src/models/Content/BaseLocalMediaStream.ts");class i extends n.BaseLocalMediaStream{audioContext;transformations=[];clientStream;audioSource;audioDestination;sourceVideo;canvas;context;interval;constructor(e,t,s,n,i,r){if(super(e,t,s,r),this.audioContext=i,this.clientStream=this.mediaStream,this.sourceVideo=document.createElement("video"),this.sourceVideo.autoplay=!0,this.sourceVideo.muted=!0,this.sourceVideo.srcObject=this.clientStream,this.sourceVideo.load(),this.sourceVideo.onloadeddata=()=>{this.sourceVideo.play()},this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),this.mediaStream=this.canvas.captureStream(n),this.audioDestination=this.audioContext.createMediaStreamDestination(),this.clientStream.getAudioTracks().length>0){const e=this.clientStream.getAudioTracks()[0];this.audioSource=this.audioContext.createMediaStreamSource(new MediaStream([e])),this.audioSource.connect(this.audioDestination)}const o=this.audioDestination.stream.getTracks()[0];this.mediaStream.addTrack(o),this.interval=setInterval((()=>{this.canvas.width=this.sourceVideo.videoWidth,this.canvas.height=this.sourceVideo.videoHeight,this.sourceVideo.videoWidth?(0!==this.clientStream.getVideoTracks().length&&this.clientStream.getVideoTracks()[0].enabled?this.mediaStream.getVideoTracks()[0].enabled=!0:this.mediaStream.getVideoTracks()[0].enabled=!1,0!==this.clientStream.getAudioTracks().length&&this.clientStream.getAudioTracks()[0].enabled?this.mediaStream.getAudioTracks()[0].enabled=!0:this.mediaStream.getAudioTracks()[0].enabled=!1,this.context.drawImage(this.sourceVideo,0,0)):this.context.clearRect(0,0,this.canvas.width,this.canvas.height)}),1e3/n)}destroy(){clearInterval(this.interval),this.sourceVideo.remove(),this.canvas.remove(),this.audioSource?.disconnect(),this.audioDestination.disconnect(),this.mediaStream.getTracks().forEach((e=>{e.stop(),this.mediaStream.removeTrack(e)})),super.destroy()}addTrack(e){const t=this.getTrack(e.kind);t&&this.removeTrack(t),"audio"!==e.kind?("video"===e.kind&&this.addVideoTrack(e),this.setupTrackEndedListeners(e)):this.addAudioTrack(e)}removeTrack(e){const t=this.getTrackFromParam(e);return t&&("audio"===t.kind&&(this.audioSource?.disconnect(),this.audioSource=void 0),this.trackEndedListeners.get(t.kind)?.(),this.clientStream.removeTrack(t)),t}replaceTrack(e){this.removeTrack(e.kind),this.addTrack(e)}setTransformations(e){this.transformations=e}getTrack(e){return this.clientStream.getTracks().find((t=>t.kind===e))||null}getTrackFromParam(e){return"string"==typeof e?this.getTrack(e):e}addAudioTrack(e){"suspended"===this.audioContext.state&&this.audioContext.resume(),this.clientStream.addTrack(e),this.audioSource=this.audioContext.createMediaStreamSource(this.clientStream),this.audioSource.connect(this.audioDestination)}addVideoTrack(e){this.clientStream.addTrack(e),this.sourceVideo.load()}}},"./src/models/Content/LocalMediaStream.ts":(e,t,s)=>{s.r(t),s.d(t,{LocalMediaStream:()=>i});var n=s("./src/models/Content/BaseLocalMediaStream.ts");class i extends n.BaseLocalMediaStream{}},"./src/models/Content/ObjectStore.ts":(e,t,s)=>{s.r(t),s.d(t,{ObjectStore:()=>S});var n=s("uuid"),i=s("@crewdle/web-sdk-types"),r=s("./src/public/errors/SDKClientError.ts"),o=s("./src/constants/Content.ts"),a=s("./src/constants/System.ts"),c=s("./src/errors/SDKInternalError.ts"),d=s("./src/interfaces/Content/Content.ts"),l=s("./src/interfaces/Content/DataContent.ts"),u=s("./src/interfaces/Subscription/SystemEvent.ts"),h=s("./src/interfaces/Utils/Logger.ts"),p=s("./src/models/Content/BaseDataStream.ts"),g=s("./src/utils/Logger/Logger.ts"),m=s("./src/utils/ObjectStore/Helpers.ts"),b=s("./src/utils/Observer/Observer.ts");class S extends p.BaseDataStream{localNode;clusterId;vendorId;transactionService;unsubscribeHandler;lastTransactionId;pendingSyncTransactions=new Map;objectRequests=new Map;pendingFilesSyncing=new Map;pendingFilesTransactions=new Map;pendingFilesRename=new Map;objectStoreConnector;eventListener=(0,b.createSingleObserver)();listenerUnsubscriber;debounceStats;writes=0;reads=0;constructor(e,t,s,n,i,o){if("string"!=typeof t)throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreNameNotString,"Cannot create ObjectStore: Label must be a string");super(e,t),this.localNode=e,this.clusterId=s,this.vendorId=n,this.transactionService=i;const a=`ccc${this.vendorId}ccc${this.clusterId}ccc${t}`;this.objectStoreConnector=new o(a),this.sendStats()}reset(){this.sendStats()}getContentType(){return i.ContentType.ObjectStore}async sync(){try{const e=await this.objectStoreConnector.get(o.CONTENT_OBJECT_STORE_LAST_TRANSACTION_OBJECT_NAME),t=await e.text();this.lastTransactionId=t}catch(e){}this.unsubscribeHandler=this.onMessage((async(e,t)=>{if(!(t instanceof File))try{if(t.payloadType===l.InternalObjectStorePayloadType.Request)return void this.handleRequestPayload(t);this.handleTransactionPayload(t)}catch(e){if(e instanceof c.SDKInternalError)throw e;throw new c.SDKInternalError(c.SDKInternalError.codes.ObjectStoreInvalidSyncMessage,{payload:t})}})),await this.syncTransactions(),await this.syncPendingFiles(),this.sendStats()}destroy(){this.unsubscribeHandler?.(),clearTimeout(this.debounceStats),delete this.debounceStats,super.destroy()}close(){this.systemTopic?.publish({sourceId:a.SYSTEM_TOPIC_INTERNAL,messageType:u.SystemMessageType.Content,content:{type:d.ContentMessageType.CloseObjectStoreBucket,label:this.label}})}subscribe(e){if(this.listenerUnsubscriber)throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreAlreadySubscribed,"Cannot subscribe to ObjectStore: Already subscribed");this.listenerUnsubscriber=this.eventListener.subscribe(e)}unsubscribe(){this.listenerUnsubscriber&&this.listenerUnsubscriber()}publish(e){switch(e.action){case i.PayloadAction.File:return this.publishFile(e.file,e.path);case i.PayloadAction.Folder:return this.publishFolder(e.path);case i.PayloadAction.Move:return this.publishMove(e.path,e.newPath);default:throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreInvalidPayload,`Cannot publish payload: ${e}`)}}async unpublish(e){try{const t=(0,n.v4)(),s=this.lastTransactionId,i={payloadType:l.InternalObjectStorePayloadType.Transaction,action:l.InternalObjectStorePayloadAction.Delete,id:t,parentId:s,path:e};await this.publishTransaction(i);const r=await this.deleteObject(e);await this.send(i),g.default.logServiceEvent(h.LoggingServices.ObjectStorage,{type:"unpublish",label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,kind:r,path:e}),this.writes+=1,this.sendStats()}catch(t){if(t instanceof c.SDKInternalError)throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreNotInSync,"Object store data stream is not in sync");throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreInvalidPath,`Cannot unpublish object: ${e}`)}}async get(e){g.default.logServiceEvent(h.LoggingServices.ObjectStorage,{type:"get",label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,path:e}),this.reads+=1,this.sendStats();try{return await this.objectStoreConnector.get(e)}catch(t){try{await this.objectStoreConnector.get(e+o.CONTENT_OBJECT_STORE_PENDING_EXTENSION)}catch(t){throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreInvalidPath,`Cannot get file: ${e}`)}throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreNotInSync,"Object store is not in sync")}}async list(e,t=!1,s=!1){g.default.logServiceEvent(h.LoggingServices.ObjectStorage,{type:"list",label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,path:e}),this.reads+=1,this.sendStats();try{const n=await this.objectStoreConnector.list(e,t);return s?n:this.cleanList(n)}catch(t){throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreInvalidPath,`Cannot list directory: ${e}`)}}handleNodeJoin(e){for(const t of this.objectRequests.values())this.send(t,[e])}handleNodeLeave(e){const t=this.pendingFilesSyncing.get(e);if(t){for(const[e,s]of t.values())this.sendFileRequestPayload(e,s);this.pendingFilesSyncing.delete(e)}}cleanList(e){for(const t of e)t.kind===i.ObjectKind.Folder&&(t.entries=this.cleanList(t.entries??[])),(t.name.endsWith(o.CONTENT_OBJECT_STORE_PENDING_EXTENSION)||t.name===o.CONTENT_OBJECT_STORE_LAST_TRANSACTION_OBJECT_NAME)&&e.splice(e.indexOf(t),1);return e}async publishFile(e,t){try{const s=(0,n.v4)(),r=this.lastTransactionId,o=await(0,m.getFileChecksum)(e);await this.publishTransaction({payloadType:l.InternalObjectStorePayloadType.Transaction,action:l.InternalObjectStorePayloadAction.FileWrite,id:s,parentId:r,answererId:this.localNode.getId(),name:e.name,type:e.type,path:t??"/",checksum:o}),await this.writeFile(e,t),await this.sendFile(e,{payloadType:l.InternalObjectStorePayloadType.Transaction,action:l.InternalObjectStorePayloadAction.FileWrite,id:s,parentId:r,answererId:this.localNode.getId(),name:e.name,type:e.type,path:t??"/",checksum:o}),g.default.logServiceEvent(h.LoggingServices.ObjectStorage,{type:"publish",label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,kind:i.ObjectKind.File,path:t,fileName:e.name,fileType:e.type,size:e.size}),this.writes+=1,this.sendStats()}catch(e){if(e instanceof c.SDKInternalError)throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreNotInSync,"Object store is not in sync");throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreInvalidPath,`Cannot publish file: ${t}`)}}async publishFolder(e){try{const t=(0,n.v4)(),s=this.lastTransactionId,r={payloadType:l.InternalObjectStorePayloadType.Transaction,action:l.InternalObjectStorePayloadAction.FolderCreate,id:t,parentId:s,path:e};await this.publishTransaction(r),await this.objectStoreConnector.createFolder(e),await this.send(r),g.default.logServiceEvent(h.LoggingServices.ObjectStorage,{type:"publish",label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,kind:i.ObjectKind.Folder,path:e}),this.writes+=1,this.sendStats()}catch(t){if(t instanceof c.SDKInternalError)throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreNotInSync,"Object store is not in sync");throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreInvalidPath,`Cannot publish folder: ${e}`)}}async publishMove(e,t){try{const s=(0,n.v4)(),i=this.lastTransactionId,r={payloadType:l.InternalObjectStorePayloadType.Transaction,action:l.InternalObjectStorePayloadAction.Move,id:s,parentId:i,path:e,newPath:t};await this.publishTransaction(r);const o=await this.moveObject(e,t);await this.send(r),g.default.logServiceEvent(h.LoggingServices.ObjectStorage,{type:"move",label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,kind:o,path:e,newPath:t}),this.writes+=1,this.sendStats()}catch(t){if(t instanceof c.SDKInternalError)throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreNotInSync,"Object store is not in sync");throw new r.SDKClientError(r.SDKClientErrorCodes.ObjectStoreInvalidPath,`Cannot publish move operation: ${e}`)}}async handleTransactionPayload(e){if(this.lastTransactionId&&e.parentId!==this.lastTransactionId&&e.id!==this.lastTransactionId){if(!e.parentId)throw new c.SDKInternalError(c.SDKInternalError.codes.ObjectStoreInvalidSyncMessage);this.pendingSyncTransactions.set(e.parentId,e)}else{try{await this.processTransactionPayload(e)}catch(e){}await this.updateLastTransactionId(e.id),await this.processPendingSyncTransactions(e.id)}}async processTransactionPayload(e){switch(e.action){case l.InternalObjectStorePayloadAction.FileWrite:await this.handleFileWrite(e);break;case l.InternalObjectStorePayloadAction.FolderCreate:await this.handleFolderCreate(e);break;case l.InternalObjectStorePayloadAction.Move:await this.handleObjectMove(e);break;case l.InternalObjectStorePayloadAction.Delete:await this.handleObjectDelete(e);break;default:throw new c.SDKInternalError(c.SDKInternalError.codes.ObjectStoreInvalidSyncMessage,{payload:e})}}async processPendingSyncTransactions(e){if(this.pendingSyncTransactions.has(e)){const t=this.pendingSyncTransactions.get(e);this.pendingSyncTransactions.delete(e),await this.handleTransactionPayload(t)}}async handleRequestPayload(e){switch(e.action){case l.InternalObjectStorePayloadAction.RequestFile:return this.handleFileRequest(e);case l.InternalObjectStorePayloadAction.RequestAccepted:return this.handleFileRequestAnswer(e);case l.InternalObjectStorePayloadAction.RequestFileSync:return this.handleFileSync(e);case l.InternalObjectStorePayloadAction.RequestFileWrite:return this.handleFileWrite(e);default:throw new c.SDKInternalError(c.SDKInternalError.codes.ObjectStoreInvalidSyncMessage,{payload:e})}}async handleFileWrite(e){if(!e.data||void 0===e.index||!e.total)return void await this.createPendingFileWrite(e);const t=(0,m.getPathName)(e.path,e.name);this.fileChunks.has(t)||(this.fileChunks.set(t,[]),await this.createPendingFileWrite(e)),this.setPendingFileSyncingPayload(e,t);const s=this.fileChunks.get(t);if(s[e.index]=e.data,s.filter((e=>e)).length<e.total)return;const n=(0,m.getFileContent)(s,e.name,e.type);await this.writeFile(n,e.path),await this.deletePendingFile(e),this.fileChunks.delete(t),g.default.logServiceEvent(h.LoggingServices.ObjectStorage,{type:"sync",label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,kind:i.ObjectKind.File,path:e.path,fileName:e.name,fileType:e.type,size:n.size});const r=this.pendingFilesTransactions.get(e.path)??[];for(const e of r)await this.processTransactionPayload(e);this.pendingFilesTransactions.delete(e.path),this.eventListener.publish({event:i.StorageEventType.FileWrite,payload:{file:{kind:i.ObjectKind.File,path:e.path,type:n.type,size:n.size,name:e.name,pathName:t}}})}async handleFolderCreate(e){await this.objectStoreConnector.createFolder(e.path);const[t,s]=(0,m.splitPathName)(e.path);this.eventListener.publish({event:i.StorageEventType.FolderCreate,payload:{folder:{kind:i.ObjectKind.Folder,name:s,path:t,pathName:e.path}}})}async handleObjectDelete(e){if(!this.shouldProcessTransaction(e))return;const t=await this.deleteObject(e.path),[s,n]=(0,m.splitPathName)(e.path);this.eventListener.publish({event:t===i.ObjectKind.Folder?i.StorageEventType.FolderDelete:i.StorageEventType.FileDelete,payload:{name:n,path:s,pathName:e.path}})}async handleObjectMove(e){if(!this.shouldProcessTransaction(e))return this.pendingFilesRename.set(e.newPath,this.pendingFilesRename.get(e.path)??e.path),void this.pendingFilesRename.delete(e.path);this.pendingFilesRename.delete(e.path);const t=await this.objectStoreConnector.moveObject(e.path,e.newPath),[s,n]=(0,m.splitPathName)(e.path),[r,o]=(0,m.splitPathName)(e.newPath);this.eventListener.publish({event:t===i.ObjectKind.Folder?i.StorageEventType.FolderMove:i.StorageEventType.FileMove,payload:{name:o,path:r,pathName:e.newPath,oldName:n,oldPath:s,oldPathName:e.path}})}shouldProcessTransaction(e){const t=this.pendingFilesRename.get(e.path)??e.path;let s=!1;for(const n of this.fileChunks.keys())if(n.startsWith(t)){const t=this.pendingFilesTransactions.get(n)??[];t.push(e),this.pendingFilesTransactions.set(n,t),s=!0}return!s}async publishTransaction(e){if(!e.id)throw new c.SDKInternalError(c.SDKInternalError.codes.ObjectStoreInvalidSyncMessage,{message:"Missing transaction id"});await this.transactionService.writeTransaction(e,this.label,this.lastTransactionId),await this.updateLastTransactionId(e.id)}async updateLastTransactionId(e){this.lastTransactionId=e;const t=new File([new Blob([this.lastTransactionId])],o.CONTENT_OBJECT_STORE_LAST_TRANSACTION_OBJECT_NAME,{type:"text/plain"});await this.writeFile(t,"/")}async handleFileRequest(e){try{const t=await this.get(e.path+"/"+e.name);if(await(0,m.getFileChecksum)(t)!==e.checksum)return;e.answererId=this.localNode.getId(),e.action=l.InternalObjectStorePayloadAction.RequestAccepted,await this.send(e,[e.sourceId])}catch(e){}}async handleFileRequestAnswer(e){const t=(0,m.getPathName)(e.path,e.name);if(!this.objectRequests.has(t))return;const s=this.objectRequests.get(t);s.action=l.InternalObjectStorePayloadAction.RequestFileSync;const n=e.answererId;if(!n)throw new c.SDKInternalError(c.SDKInternalError.codes.ObjectStoreInvalidSyncMessage,{message:"Missing answerer id on request answer"});this.objectRequests.delete(t),this.pendingFilesSyncing.has(n)||this.pendingFilesSyncing.set(n,new Map),this.pendingFilesSyncing.get(n).set(t,[s,this.getOrResetPendingFileTimeout(n,t)]),s.answererId=n,this.send(s,[n])}async handleFileSync(e){const t=(0,m.getPathName)(e.path,e.name),s=await this.get(t),n={...e,answererId:this.localNode.getId(),action:l.InternalObjectStorePayloadAction.RequestFileWrite};await this.sendFile(s,n,[e.sourceId])}async sendFile(e,t,s){const n=await(0,m.readFileContent)(e);for(const[i,r]of n.entries()){const o={...t,type:e.type,data:r,index:i,total:n.length};this.send(o,s)}}async deletePendingFile(e){try{const t=(0,m.getPathName)(e.path,e.name),s=t+o.CONTENT_OBJECT_STORE_PENDING_EXTENSION;await this.deleteObject(s);const[,n]=this.pendingFilesSyncing.get(e.answererId)?.get(t)??[];n&&(clearTimeout(n),this.pendingFilesSyncing.get(e.answererId).delete(t))}catch(e){}}async syncTransactions(){const e=await this.transactionService.getTransactions(this.label,this.lastTransactionId);for(const t of e)await this.handleTransactionPayload(t)}async syncPendingFiles(){const e=await this.list("/",!0,!0),t=async e=>{for(const s of e){if(s.kind===i.ObjectKind.Folder){s.entries&&s.entries.length>0&&await t(s.entries);continue}if(!s.name.endsWith(o.CONTENT_OBJECT_STORE_PENDING_EXTENSION))continue;const e=await this.get(s.pathName),n=await e.text(),r=s.name.replace(o.CONTENT_OBJECT_STORE_PENDING_EXTENSION,""),a={payloadType:l.InternalObjectStorePayloadType.Request,action:l.InternalObjectStorePayloadAction.RequestFile,sourceId:this.localNode.getId(),type:"",path:s.path,name:r,checksum:n},c=(0,m.getPathName)(s.path,r);this.objectRequests.set(c,a)}};await t(e)}async createPendingFileWrite(e){const t=new File([new Blob([e.checksum])],`${e.name}${o.CONTENT_OBJECT_STORE_PENDING_EXTENSION}`,{type:"text/plain"});await this.writeFile(t,e.path)}getOrResetPendingFileTimeout(e,t){const[s,n]=this.pendingFilesSyncing.get(e)?.get(t)??[];return n&&clearTimeout(n),setTimeout((()=>{const[s,n]=this.pendingFilesSyncing.get(e).get(t);this.sendFileRequestPayload(s,n)}),o.CONTENT_OBJECT_STORE_PENDING_RETRY_DELAY)}async sendFileRequestPayload(e,t){clearTimeout(t),e.action=l.InternalObjectStorePayloadAction.RequestFile,this.objectRequests.set((0,m.getPathName)(e.path,e.name),e),this.send(e)}setPendingFileSyncingPayload(e,t){this.pendingFilesSyncing.has(e.answererId)||this.pendingFilesSyncing.set(e.answererId,new Map);const[s]=this.pendingFilesSyncing.get(e.answererId).get(t)??[{payloadType:l.InternalObjectStorePayloadType.Request,action:l.InternalObjectStorePayloadAction.RequestFile,sourceId:this.localNode.getId(),type:e.type,name:e.name,path:e.path,checksum:e.checksum,answererId:e.answererId}];this.pendingFilesSyncing.get(e.answererId).set(t,[s,this.getOrResetPendingFileTimeout(e.answererId,t)])}async writeFile(e,t){await this.objectStoreConnector.writeFile(e,t)}async deleteObject(e){try{return await this.objectStoreConnector.deleteObject(e)}catch(t){return await this.objectStoreConnector.deleteObject(e+o.CONTENT_OBJECT_STORE_PENDING_EXTENSION)}}async moveObject(e,t){try{return await this.objectStoreConnector.moveObject(e,t)}catch(s){return await this.objectStoreConnector.moveObject(e+o.CONTENT_OBJECT_STORE_PENDING_EXTENSION,t+o.CONTENT_OBJECT_STORE_PENDING_EXTENSION)}}sendStats(){this.debounceStats&&clearTimeout(this.debounceStats),this.debounceStats=setTimeout((async()=>{delete this.debounceStats;const e=await this.objectStoreConnector.calculateSize("/");this.systemTopic?.publish({sourceId:a.SYSTEM_TOPIC_INTERNAL,messageType:u.SystemMessageType.Content,content:{type:d.ContentMessageType.ObjectStoreStats,label:this.label,stats:{timestamp:Date.now(),storage:e,messagesSent:this.messagesSent,messagesReceived:this.messagesReceived,bytesSent:this.bytesSent,bytesReceived:this.bytesReceived,writes:this.writes,reads:this.reads}}}),g.default.logStorage(h.LoggingServices.ObjectStorage,`ccc${this.clusterId}ccc${this.label}`,e)}),o.CONTENT_OBJECT_STORE_STATS_DEBOUNCE)}}},"./src/models/Content/OutgoingMediaStream.ts":(e,t,s)=>{s.r(t),s.d(t,{OutgoingMediaStream:()=>c});var n=s("@crewdle/web-sdk-types"),i=s("./src/errors/SDKInternalError.ts"),r=s("./src/interfaces/Subscription/MediaSubscriptionEvent.ts"),o=s("./src/models/Content/BaseMediaStream.ts"),a=s("./src/utils/Observer/Observer.ts");class c extends o.BaseMediaStream{remoteId;params;topic;unregisterPublisherListener=(0,a.createSingleObserver)();constructor(e,t,s,n,i){super(e,t,s),this.remoteId=n,this.params=i}destroy(){this.removeTrack("audio"),this.removeTrack("video"),super.destroy()}addTrack(e){if(!this.topic)throw new i.SDKInternalError(i.SDKInternalError.codes.OutgoingMediaStreamNoTopic,{label:this.label,ownerId:this.owner.getId(),remoteId:this.remoteId});this.topic.publish({sourceId:this.owner.getId(),content:{action:r.MediaSubscriptionAction.Add,track:e,stream:this.mediaStream,priority:n.MediaStreamPriority.Default,params:this.getInternalTrackParams(e.kind,this.params)}})}removeTrack(e){const t=this.getTrack(e);if(t){if(!this.topic)return null;this.topic.publish({sourceId:this.owner.getId(),content:{action:r.MediaSubscriptionAction.Remove,track:t,stream:this.mediaStream}})}return t}setPriority(e){if(!this.topic)throw new i.SDKInternalError(i.SDKInternalError.codes.OutgoingMediaStreamNoTopic,{label:this.label,ownerId:this.owner.getId(),remoteId:this.remoteId});this.topic.publish({sourceId:this.owner.getId(),content:{action:r.MediaSubscriptionAction.Update,priority:e,stream:this.mediaStream}})}subscribe({trackKinds:e,params:t},s){if(!this.topic)throw new i.SDKInternalError(i.SDKInternalError.codes.OutgoingMediaStreamNoTopic,{label:this.label,ownerId:this.owner.getId(),remoteId:this.remoteId});for(const n of this.mediaStream.getTracks())e.includes(n.kind)&&this.topic.publish({sourceId:this.owner.getId(),content:{action:r.MediaSubscriptionAction.Add,track:n,stream:this.mediaStream,priority:s,params:this.getInternalTrackParams(n.kind,t)}})}update({params:e}){if(!this.topic)throw new i.SDKInternalError(i.SDKInternalError.codes.OutgoingMediaStreamNoTopic,{label:this.label,ownerId:this.owner.getId(),remoteId:this.remoteId});for(const t of this.mediaStream.getTracks())this.topic.publish({sourceId:this.owner.getId(),content:{action:r.MediaSubscriptionAction.Update,stream:this.mediaStream,params:this.getInternalTrackParams(t.kind,e)}})}unsubscribe({trackKinds:e}){if(this.topic)for(const t of this.mediaStream.getTracks())e.includes(t.kind)&&this.topic.publish({sourceId:this.owner.getId(),content:{action:r.MediaSubscriptionAction.Remove,stream:this.mediaStream,track:t}})}registerPublisher(e){this.topic=e}unregisterPublisher(e){e===this.topic&&(delete this.topic,this.unregisterPublisherListener.publish())}onUnregisterPublisher(e){return this.unregisterPublisherListener.subscribe(e)}getTrack(e){return this.mediaStream.getTracks().find((t=>t.kind===e))||null}getInternalTrackParams(e,t){let s;return"video"===e&&t?.video&&"boolean"!=typeof t.video&&(s={kind:"video",...t.video},s.resolution=this.getResolution()),"audio"===e&&t?.audio&&"boolean"!=typeof t.audio&&(s={kind:"audio",...t.audio}),s}getResolution(){let e={width:0,height:0};const t=this.mediaStream.getVideoTracks();if(t.length>0){const s=t[0].getSettings();s.width&&s.height&&(e={width:s.width,height:s.height})}return e}}},"./src/models/Content/PubSubTopic.ts":(e,t,s)=>{s.r(t),s.d(t,{PubSubTopic:()=>h});var n=s("@crewdle/web-sdk-types"),i=s("./src/public/errors/SDKClientError.ts"),r=s("./src/constants/Content.ts"),o=s("./src/constants/System.ts"),a=s("./src/interfaces/Content/Content.ts"),c=s("./src/interfaces/Subscription/SystemEvent.ts"),d=s("./src/interfaces/Utils/Logger.ts"),l=s("./src/models/Content/BaseDataStream.ts"),u=s("./src/utils/Logger/Logger.ts");class h extends l.BaseDataStream{localNode;clusterId;unsubscribeHandler=new Map;debounceStats;constructor(e,t,s){if("string"!=typeof t)throw new i.SDKClientError(i.SDKClientErrorCodes.PubSubTopicNameNotString,"Cannot create PubSubStream: Label must be a string");super(e,t),this.localNode=e,this.clusterId=s,this.sendStats()}reset(){this.sendStats()}getContentType(){return n.ContentType.PubSub}publish(e,t){u.default.log(d.LoggingChannels.PubSub,"PubSubTopic publish",this.localNode.getId(),e,t),u.default.logServiceEvent(d.LoggingServices.PubSub,{type:"publish",label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,remoteIds:t??[],contentType:e instanceof File?n.ContentType.File:n.ContentType.Data,size:e instanceof File?e.size:JSON.stringify(e).length}),this.sendStats(),this.send(e,t)}subscribe(e,t){if(this.unsubscribeHandler.has(e))throw new i.SDKClientError(i.SDKClientErrorCodes.PubSubTopicAlreadySubscribed,"Cannot subscribe to PubSubTopic: Already subscribed");this.unsubscribeHandler.set(e,this.onMessage(((s,n)=>{"data"===e&&n instanceof File||!("file"!==e||n instanceof File)||(u.default.log(d.LoggingChannels.PubSub,"PubSubTopic onMessage",this.localNode.getId(),s,n),u.default.logServiceEvent(d.LoggingServices.PubSub,{type:"subscribe",label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,remoteId:s,contentType:e,size:n instanceof File?n.size:JSON.stringify(n).length}),this.sendStats(),t(s,n))})))}unsubscribe(e){this.unsubscribeHandler.get(e)?.(),this.unsubscribeHandler.delete(e)}destroy(){this.unsubscribeHandler.forEach((e=>e())),clearTimeout(this.debounceStats),delete this.debounceStats,super.destroy()}close(){this.systemTopic?.publish({sourceId:o.SYSTEM_TOPIC_INTERNAL,messageType:c.SystemMessageType.Content,content:{type:a.ContentMessageType.ClosePubSubTopic,label:this.label}})}sendStats(){this.debounceStats&&clearTimeout(this.debounceStats),this.debounceStats=setTimeout((()=>{this.systemTopic?.publish({sourceId:o.SYSTEM_TOPIC_INTERNAL,messageType:c.SystemMessageType.Content,content:{type:a.ContentMessageType.PubSubTopicStats,label:this.label,stats:{timestamp:Date.now(),storage:0,messagesSent:this.messagesSent,messagesReceived:this.messagesReceived,bytesSent:this.bytesSent,bytesReceived:this.bytesReceived,writes:0,reads:0}}})}),r.CONTENT_PUBSUB_TOPIC_STATS_DEBOUNCE)}}},"./src/models/Content/RemoteMediaStream.ts":(e,t,s)=>{s.r(t),s.d(t,{RemoteMediaStream:()=>m});var n=s("@crewdle/web-sdk-types"),i=s("./src/public/errors/SDKClientError.ts"),r=s("./src/constants/Content.ts"),o=s("./src/constants/System.ts"),a=s("./src/interfaces/Content/Content.ts"),c=s("./src/interfaces/Subscription/MediaSubscriptionEvent.ts"),d=s("./src/interfaces/Subscription/SystemEvent.ts"),l=s("./src/interfaces/Utils/Logger.ts"),u=s("./src/models/Content/BaseMediaStream.ts"),h=s("./src/models/Content/OutgoingMediaStream.ts"),p=s("./src/utils/Logger/Logger.ts"),g=s("./src/utils/Observer/Observer.ts");class m extends u.BaseMediaStream{localNode;internalId;availableTrackKinds;clusterId;unsubscribeHandler;resizeHandler;updateDebounce;outgoingStreams=new Map;renderElement;subscribedTracks=new Set;providerId;providerListener=(0,g.createObserver)();trackEndedListeners=new Map;constructor(e,t,s,n,i,r){super(t,s,new MediaStream),this.localNode=e,this.internalId=n,this.availableTrackKinds=i,this.clusterId=r,this.mediaStream.getTracks().forEach((e=>this.setupTrackEndedListeners(e)))}destroy(){this.outgoingStreams.size>0&&(this.outgoingStreams.forEach((e=>{e.unregisterSystemPublisher(),e.destroy()})),this.outgoingStreams.clear()),this.trackEndedListeners.forEach((e=>e())),this.mediaStream.getTracks().forEach((e=>this.mediaStream.removeTrack(e))),this.updateDebounce&&(clearTimeout(this.updateDebounce),delete this.updateDebounce),this.resizeHandler?.(),super.destroy()}registerSubscriber(e){this.unsubscribeHandler=e.subscribe((({content:e})=>{switch(e.action){case c.MediaSubscriptionAction.RemoteAdd:if(p.default.log(l.LoggingChannels.Subscription,"Received track",this.localNode.getId(),this.providerId),e.stream.id!==this.internalId||e.providerId!==this.providerId)return;this.removeTrack(e.track.kind),this.mediaStream.addTrack(e.track);for(const[t,s]of this.outgoingStreams.entries())try{s.addTrack(e.track)}catch(e){s.destroy(),this.outgoingStreams.delete(t)}this.setupTrackEndedListeners(e.track),this.setupRenderElement(),"video"===e.track.kind&&this.renderElement&&(this.mediaStream.active?setTimeout((()=>this.renderElement?.play()),0):setTimeout((()=>this.renderElement?.load()),0),this.setupResizeHandler());break;case c.MediaSubscriptionAction.RemoteRemove:if(e.stream.id!==this.internalId||e.providerId!==this.providerId)return;this.removeTrack(e.track.kind),this.renderElement&&"video"===e.track.kind&&(this.resizeHandler?.(),this.mediaStream.getTracks().length>0?this.renderElement.load():this.renderElement.srcObject=null)}}))}unregisterSubscriber(){this.unsubscribeHandler?.(),this.trackEndedListeners.forEach((e=>e())),delete this.unsubscribeHandler}getInternalStreamId(){return this.internalId}setInternalId(e){this.internalId=e}getAvailableTrackKinds(){return this.availableTrackKinds}hasTracks(e){for(const t of e||this.availableTrackKinds)if(!this.mediaStream.getTracks().find((e=>e.kind===t)))return!1;return!0}getResolution(){let e={width:0,height:0};const t=this.mediaStream.getVideoTracks();if(t.length>0){const s=t[0].getSettings();s.width&&s.height&&(e={width:s.width,height:s.height})}return e}isSubscribed(e){for(const t of e)if(!this.subscribedTracks.has(t))return!1;return!0}getShareableStream(e,t){if(!this.outgoingStreams.has(e)){const s=new h.OutgoingMediaStream(this.owner,this.label,this.mediaStream,e,t),n=s.onUnregisterPublisher((()=>{n(),this.outgoingStreams.get(e)?.destroy(),this.outgoingStreams.delete(e)}));this.outgoingStreams.set(e,s),s.registerSystemPublisher(this.systemTopic)}return this.outgoingStreams.get(e)}getShareableStreamId(){return this.mediaStream.id}getPriority(){return n.MediaStreamPriority.Default}getSubscribedTracks(){return Array.from(this.subscribedTracks)}subscribe(e){let t=[];if(e){"object"!=typeof e.video||e.video.renderElement instanceof HTMLVideoElement||!this.renderElement||(e.video={renderElement:this.renderElement});try{(0,n.isValidMediaSubscriptionParams)(e)}catch(e){throw new i.SDKClientError(i.SDKClientErrorCodes.RemoteMediaStreamInvalidSubscriptionParams,"Invalid params")}e.video&&(t.push("video"),"boolean"!=typeof e.video&&e.video.renderElement&&(this.renderElement=e.video.renderElement,e.video.maxResolution||(e.video.maxResolution={width:this.renderElement.clientWidth,height:this.renderElement.clientHeight}),delete e.video.renderElement)),e.audio&&t.push("audio")}else t=this.getAvailableTrackKinds();this.isSubscribed(t)||(t.forEach((e=>this.subscribedTracks.add(e))),this.systemTopic.publish({sourceId:o.SYSTEM_TOPIC_INTERNAL,messageType:d.SystemMessageType.Content,content:{type:a.ContentMessageType.SubscribeMediaStream,label:this.label,ownerId:this.owner.getId(),trackKinds:t,params:e}}),p.default.logServiceEvent(l.LoggingServices.MediaStream,{type:"subscribe",label:this.label,nodeId:this.localNode.getId(),nodeType:this.localNode.type,clusterId:this.clusterId,sourceId:this.owner.getId(),streamId:this.internalId,trackKinds:t}))}update(e){try{(0,n.isValidMediaSubscriptionParams)(e)}catch(e){throw new i.SDKClientError(i.SDKClientErrorCodes.RemoteMediaStreamInvalidSubscriptionParams,"Invalid params")}this.updateDebounce&&clearTimeout(this.updateDebounce),this.updateDebounce=setTimeout((()=>{delete this.updateDebounce,this.systemTopic.publish({sourceId:o.SYSTEM_TOPIC_INTERNAL,messageType:d.SystemMessageType.Content,content:{type:a.ContentMessageType.UpdateMediaStream,label:this.label,ownerId:this.owner.getId(),params:e}})}),r.CONTENT_UPDATE_DEBOUNCE)}unsubscribe(e){e||(e=this.getAvailableTrackKinds()),(e=Array.isArray(e)?e:[e]).forEach((e=>this.subscribedTracks.delete(e))),this.systemTopic.publish({sourceId:o.SYSTEM_TOPIC_INTERNAL,messageType:d.SystemMessageType.Content,content:{type:a.ContentMessageType.UnsubscribeMediaStream,label:this.label,ownerId:this.owner.getId(),trackKinds:e,remainingTracks:this.subscribedTracks.size}})}onProviderChange(e){return this.providerListener.subscribe(e)}getProviderId(){return this.providerId}setProviderId(e){this.providerId!==e&&(this.providerId=e,this.providerListener.publish(e))}unsubscribeTrackEndedListener(e){this.trackEndedListeners.get(e)?.(),this.trackEndedListeners.delete(e)}removeTrack(e){const t=this.mediaStream.getTracks().find((t=>t.kind===e));t&&(this.mediaStream.removeTrack(t),this.outgoingStreams.forEach((t=>t.removeTrack(e))),this.trackEndedListeners.get(e)?.())}setupRenderElement(){this.renderElement&&(this.renderElement.srcObject&&this.renderElement.srcObject===this.mediaStream||(this.renderElement.srcObject=this.mediaStream))}setupResizeHandler(){if(this.renderElement&&!this.resizeHandler&&"undefined"!=typeof ResizeObserver){let e=this.renderElement.clientWidth,t=this.renderElement.clientHeight;const s=new ResizeObserver((s=>{const{width:n,height:i}=s[0].contentRect;e===n&&t===i||(e=Math.floor(n),t=Math.floor(i),this.update({video:{maxResolution:{width:n,height:i}}}))}));s.observe(this.renderElement),this.resizeHandler=()=>s.disconnect()}}handleRemoteTrackFailure(e){const t=[];for(const e of this.subscribedTracks)this.removeTrack(e),t.push(e);this.providerId&&this.systemTopic.publish({sourceId:o.SYSTEM_TOPIC_INTERNAL,messageType:d.SystemMessageType.Content,content:{type:a.ContentMessageType.RemoteMediaStreamTrackFail,label:this.label,streamId:this.internalId,ownerId:this.owner.getId(),providerId:this.providerId,trackKinds:t}})}setupTrackEndedListeners(e){const t=()=>this.handleRemoteTrackFailure(e);e.addEventListener("ended",t),e.addEventListener("mute",t),this.trackEndedListeners.set(e.kind,(()=>{e.removeEventListener("ended",t),e.removeEventListener("mute",t),this.trackEndedListeners.delete(e.kind)}))}}},"./src/models/Detection/DetectionManager.ts":(e,t,s)=>{s.r(t),s.d(t,{DetectionManager:()=>p});var n=s("./src/constants/Detection.ts"),i=s("./src/constants/DetectionIssueRules.ts"),r=s("./src/constants/DetectionProblemRules.ts"),o=s("./src/constants/System.ts"),a=s("./src/interfaces/Connection/PeerConnection.ts"),c=s("./src/interfaces/Detection/Detection.ts"),d=s("./src/interfaces/Stats/Stats.ts"),l=s("./src/interfaces/Subscription/SystemEvent.ts"),u=s("./src/interfaces/Utils/Logger.ts"),h=s("./src/utils/Logger/Logger.ts");class p{configs;issues=[];systemTopic;constructor(e){this.configs=e,this.configs.mediator.registerSystemSource(this)}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){this.systemTopic=void 0}close(){this.configs.mediator.unregisterSystemSource(this),this.issues=[]}handleStatsSystemEvents(e){switch(e.content.type){case d.StatsMessageType.LocalReport:this.detectLocalIssues(e.content.data);break;case d.StatsMessageType.StreamReport:this.detectStreamIssues(e.content.data)}}detectProblems(e,t,s,n){const i=r.DETECTION_PROBLEM_RULES.find((t=>t.issues.some((t=>t.type===e))));n>=i.issues.find((t=>t.type===e)).threshold&&(this.addProblem(i.type,t,s),this.issues=this.issues.filter((n=>!(n.type===e&&n.nodeId===t&&n.origin===s))))}detectLocalIssues(e){i.DETECTION_CORE_ISSUE_RULES.forEach((t=>{const s=t.reportMetric(e);t.maxThreshold&&s>t.maxThreshold&&this.addIssue(t.type,this.configs.localNode.getId(),a.PeerConnectionOrigin.Sender,s),t.minThreshold&&s<t.minThreshold&&this.addIssue(t.type,this.configs.localNode.getId(),a.PeerConnectionOrigin.Sender,s)}))}detectStreamIssues(e){let t=[];switch(e.origin){case a.PeerConnectionOrigin.Sender:t=i.DETECTION_SENDER_ISSUE_RULES;break;case a.PeerConnectionOrigin.Receiver:t=i.DETECTION_RECEIVER_ISSUE_RULES}e.video&&this.detectVideoIssues(e.nodeId,a.PeerConnectionOrigin.Sender,e.video),e.audio&&this.detectAudioIssues(e.nodeId,a.PeerConnectionOrigin.Sender,e.audio),t.forEach((t=>{const s=t.reportMetric(e);t.maxThreshold&&s>t.maxThreshold&&this.addIssue(t.type,e.nodeId,a.PeerConnectionOrigin.Sender,s),t.minThreshold&&s<t.minThreshold&&this.addIssue(t.type,e.nodeId,a.PeerConnectionOrigin.Sender,s)}))}detectVideoIssues(e,t,s){0!==s.bitrate&&i.DETECTION_VIDEO_ISSUE_RULES.forEach((n=>{const i=n.reportMetric(s);n.maxThreshold&&i>n.maxThreshold&&this.addIssue(n.type,e,t,i,"video"),n.minThreshold&&i<n.minThreshold&&this.addIssue(n.type,e,t,i,"video")}))}detectAudioIssues(e,t,s){0!==s.bitrate&&i.DETECTION_AUDIO_ISSUE_RULES.forEach((n=>{const i=n.reportMetric(s);n.maxThreshold&&i>n.maxThreshold&&this.addIssue(n.type,e,t,i,"audio"),n.minThreshold&&i<n.minThreshold&&this.addIssue(n.type,e,t,i,"audio")}))}addIssue(e,t,s,i,r){h.default.log(u.LoggingChannels.Detection,`Issue detected: ${e}`,e,i),h.default.logEvent("issue",{clusterId:this.configs.clusterId,nodeId:this.configs.localNode.getId(),nodeType:this.configs.localNode.type,remoteId:t,data:{type:e,value:i,kind:r}}),this.issues=this.issues.filter((e=>Date.now()-e.timestamp<n.DETECTION_ISSUE_TIMEOUT)),this.issues.push({timestamp:Date.now(),type:e,nodeId:t,origin:s,value:i,kind:r});const o=this.issues.filter((n=>n.type===e&&n.nodeId===t&&n.origin===s)).length;this.detectProblems(e,t,s,o)}addProblem(e,t,s){h.default.log(u.LoggingChannels.Detection,`Problem detected: ${e}`),h.default.logEvent("problem",{clusterId:this.configs.clusterId,nodeId:this.configs.localNode.getId(),nodeType:this.configs.localNode.type,remoteId:t,data:{type:e}}),this.systemTopic?.publish({sourceId:o.SYSTEM_TOPIC_INTERNAL,messageType:l.SystemMessageType.Detection,content:{type:c.DetectionMessageType.Problem,data:{timestamp:Date.now(),nodeId:t,origin:a.PeerConnectionOrigin.Sender,type:e}}})}}},"./src/models/Node/Agent.ts":(e,t,s)=>{s.r(t),s.d(t,{Agent:()=>r});var n=s("@crewdle/web-sdk-types"),i=s("./src/models/Node/Node.ts");class r extends i.Node{type=n.NodeType.Agent}},"./src/models/Node/AuthAgent.ts":(e,t,s)=>{s.r(t),s.d(t,{AuthAgent:()=>l});var n=s("firebase/firestore"),i=s("@crewdle/web-sdk-types"),r=s("./src/constants/Node.ts"),o=s("./src/interfaces/Utils/Logger.ts"),a=s("./src/services/Firebase/FirebaseService.ts"),c=s("./src/utils/Interval/Interval.ts"),d=s("./src/utils/Logger/Logger.ts");class l{id;groupId;vendorId;agentConfig;type=i.NodeType.Agent;constructor(e,t,s,n){this.id=e,this.groupId=t,this.vendorId=s,this.agentConfig=n}getId(){return this.id}onConfigurationChange(e){const t=(0,n.onSnapshot)((0,n.doc)(a.default.getFirestore(),`developers/${this.vendorId}/resources/agent/items/${this.groupId}`),(t=>{if(t.exists()){const s=t.data();if(this.agentConfig.timestamp.isEqual(s.timestamp))return;d.default.log(o.LoggingChannels.Node,"agent-config-changed",{agentId:this.id,groupId:this.groupId,oldConfig:this.agentConfig,newConfig:s}),this.agentConfig=s,e()}}));return()=>t()}setReportCapacity(e){return this.reportCapacity(this.groupId,e),c.default.setInterval((()=>this.reportCapacity(this.groupId,e)),r.NODE_AGENT_CAPACITY_REPORT_INTERVAL)}async reportCapacity(e,t){const s=await t();await(0,n.addDoc)((0,n.collection)(a.default.getFirestore(),`developers/${this.vendorId}/capacities`),{agentId:this.id,groupId:e,timestamp:(0,n.serverTimestamp)(),capacity:s})}}},"./src/models/Node/AuthUser.ts":(e,t,s)=>{s.r(t),s.d(t,{AuthUser:()=>r});var n=s("@crewdle/web-sdk-types"),i=s("./src/utils/Observer/Observer.ts");class r{id;displayName;email;type=n.NodeType.User;joinedClusters=new Map;observer=(0,i.createObserver)();constructor(e,t,s){this.id=e,this.displayName=t,this.email=s}getId(){return this.id}getDisplayName(){return this.displayName}getEmail(){return this.email}setDisplayName(e){this.displayName!==e&&(this.displayName=e,this.observer.publish(this))}setEmail(e){this.email!==e&&(this.email=e,this.observer.publish(this))}registerCluster(e,t){if(this.joinedClusters.has(e))return;const s=this.observer.subscribe(t);this.joinedClusters.set(e,s)}unregisterCluster(e){if(!this.joinedClusters.has(e))return;const t=this.joinedClusters.get(e);t&&t(),this.joinedClusters.delete(e)}}},"./src/models/Node/LocalAgent.ts":(e,t,s)=>{s.r(t),s.d(t,{LocalAgent:()=>a});var n=s("./src/constants/Node.ts"),i=s("./src/interfaces/Node/NodeMessage.ts"),r=s("./src/interfaces/Subscription/SystemEvent.ts"),o=s("./src/models/Node/Agent.ts");class a extends o.Agent{systemTopic;currentVersion=Date.now();updateDebounceTimeout;lastUpdated;close(){this.updateDebounceTimeout&&(clearTimeout(this.updateDebounceTimeout),delete this.updateDebounceTimeout),delete this.lastUpdated,this.currentVersion=Date.now(),super.close()}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}answerJoin(e){!this.updateDebounceTimeout&&this.rank&&this.systemTopic.publish({sourceId:this.id,destinationIds:[e],propagate:!0,messageType:r.SystemMessageType.Node,content:{type:i.NodeMessageType.NodeUpdate,id:this.id,metaData:{type:this.type},rank:this.getRank(),remoteConnections:Array.from(this.remoteConnections),version:this.currentVersion}})}addRemoteConnection(e){this.remoteConnections.has(e)||(this.remoteConnections.add(e),this.incrementVersion(),this.publishUserUpdate(!0))}removeRemoteConnection(e){this.remoteConnections.has(e)&&(this.remoteConnections.delete(e),this.incrementVersion(),this.publishUserUpdate(!0))}getCurrentVersion(){return this.currentVersion}setRank(e,t=!0){this.rank!==e&&(this.rank=e,t&&(this.incrementVersion(),this.publishUserUpdate()))}incrementVersion(){this.currentVersion=Date.now()}publishUserUpdate(e=!1){if(this.rank){if(this.lastUpdated||(this.lastUpdated=Date.now()),this.updateDebounceTimeout){if(Date.now()-this.lastUpdated>n.NODE_UPDATE_DEBOUNCE_TIME_LIMIT)return;clearTimeout(this.updateDebounceTimeout)}this.updateDebounceTimeout=setTimeout((()=>{delete this.lastUpdated,delete this.updateDebounceTimeout,this.systemTopic.publish({sourceId:this.id,propagate:!0,messageType:r.SystemMessageType.Node,content:{type:e?i.NodeMessageType.NodeConnectionsUpdate:i.NodeMessageType.NodeUpdate,id:this.id,metaData:{type:this.type},rank:this.getRank(),remoteConnections:Array.from(this.remoteConnections),version:this.currentVersion}})}),n.NODE_UPDATE_DEBOUNCE_TIME)}}}},"./src/models/Node/LocalUser.ts":(e,t,s)=>{s.r(t),s.d(t,{LocalUser:()=>a});var n=s("./src/constants/Node.ts"),i=s("./src/interfaces/Node/NodeMessage.ts"),r=s("./src/interfaces/Subscription/SystemEvent.ts"),o=s("./src/models/Node/User.ts");class a extends o.User{systemTopic;currentVersion=Date.now();updateDebounceTimeout;lastUpdated;close(){this.updateDebounceTimeout&&(clearTimeout(this.updateDebounceTimeout),delete this.updateDebounceTimeout),delete this.lastUpdated,this.currentVersion=Date.now(),super.close()}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}answerJoin(e){!this.updateDebounceTimeout&&this.rank&&this.systemTopic.publish({sourceId:this.id,destinationIds:[e],propagate:!0,messageType:r.SystemMessageType.Node,content:{type:i.NodeMessageType.NodeUpdate,id:this.id,metaData:{type:this.type,displayName:this.getDisplayName(),email:this.getEmail()},rank:this.getRank(),remoteConnections:Array.from(this.remoteConnections),version:this.currentVersion}})}addRemoteConnection(e){this.remoteConnections.has(e)||(this.remoteConnections.add(e),this.incrementVersion(),this.publishUserUpdate(!0))}removeRemoteConnection(e){this.remoteConnections.has(e)&&(this.remoteConnections.delete(e),this.incrementVersion(),this.publishUserUpdate(!0))}getCurrentVersion(){return this.currentVersion}setDisplayName(e){this.displayName!==e&&(this.displayName=e,this.incrementVersion(),this.publishUserUpdate())}setEmail(e){this.email!==e&&(this.email=e,this.incrementVersion(),this.publishUserUpdate())}setRank(e,t=!0){this.rank!==e&&(this.rank=e,t&&(this.incrementVersion(),this.publishUserUpdate()))}incrementVersion(){this.currentVersion=Date.now()}publishUserUpdate(e=!1){if(this.rank){if(this.lastUpdated||(this.lastUpdated=Date.now()),this.updateDebounceTimeout){if(Date.now()-this.lastUpdated>n.NODE_UPDATE_DEBOUNCE_TIME_LIMIT)return;clearTimeout(this.updateDebounceTimeout)}this.updateDebounceTimeout=setTimeout((()=>{delete this.lastUpdated,delete this.updateDebounceTimeout,this.systemTopic.publish({sourceId:this.id,propagate:!0,messageType:r.SystemMessageType.Node,content:{type:e?i.NodeMessageType.NodeConnectionsUpdate:i.NodeMessageType.NodeUpdate,id:this.id,metaData:{type:this.type,displayName:this.getDisplayName(),email:this.getEmail()},rank:this.getRank(),remoteConnections:Array.from(this.remoteConnections),version:this.currentVersion}})}),n.NODE_UPDATE_DEBOUNCE_TIME)}}}},"./src/models/Node/Node.ts":(e,t,s)=>{s.r(t),s.d(t,{Node:()=>n});class n{id;remoteConnections;rank;constructor(e,t=new Set,s){this.id=e,this.remoteConnections=t,this.rank=s}close(){this.rank=void 0,this.remoteConnections.clear()}getId(){return this.id}getRank(){return this.rank}getRemoteConnections(){return this.remoteConnections}}},"./src/models/Node/NodeManager.ts":(e,t,s)=>{s.r(t),s.d(t,{NodeManager:()=>y});var n=s("@crewdle/web-sdk-types"),i=s("./src/constants/Node.ts"),r=s("./src/constants/System.ts"),o=s("./src/errors/EarlyReturnError.ts"),a=s("./src/errors/SDKInternalError.ts"),c=s("./src/interfaces/Connection/PeerConnection.ts"),d=s("./src/interfaces/Node/Node.ts"),l=s("./src/interfaces/Node/NodeMessage.ts"),u=s("./src/interfaces/Subscription/SystemEvent.ts"),h=s("./src/interfaces/Utils/Logger.ts"),p=s("./src/models/Node/RemoteAgent.ts"),g=s("./src/models/Node/RemoteUser.ts"),m=s("./src/services/Discovery/FirebaseRDBDiscoveryService.ts"),b=s("./src/utils/Interval/Interval.ts"),S=s("./src/utils/Logger/Logger.ts");class y{configs;graphService;localNode;remoteUnsubscriber;discoveryService;discoveryUnsubscriber;ancestors=[];systemTopic;optimizationLayers=new Map;debounceProcessRank;lastProcessRank;constructor(e,t,s){this.configs=e,this.graphService=t,this.localNode=s,this.discoveryService=new m.FirebaseRDBDiscoveryService(this.configs.vendorId,this.configs.clusterId,this.localNode,this.graphService.getMinConnections()),this.discoveryUnsubscriber=this.discoveryService.onNodeDisconnect(this.handleNodeDisconnect.bind(this)),this.configs.mediator.registerSystemSource(this.localNode),this.configs.mediator.registerSystemSource(this),this.remoteUnsubscriber=b.default.setInterval((()=>{const e=Date.now();this.graphService.getRemoteNodes().forEach((t=>{t.getStatus()===d.NodeStatus.Offline&&t.getLastUpdated()<e-i.NODE_CLEAN_REMOTE_NODES_THRESHOLD&&this.graphService.deleteRemoteNode(t.getId())}))}),i.NODE_CLEAN_REMOTE_NODES_INTERVAL)}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}close(){this.debounceProcessRank&&(clearTimeout(this.debounceProcessRank),delete this.debounceProcessRank),delete this.lastProcessRank,this.localNode.close(),this.remoteUnsubscriber(),this.discoveryUnsubscriber(),this.configs.mediator.unregisterSystemSource(this.localNode),this.configs.mediator.unregisterSystemSource(this),this.discoveryService.close()}getAncestorIds(){return this.ancestors}getLocalId(){return this.localNode.getId()}getLocalNode(){return this.localNode}getRemoteNodes(e){const t=Array.from(this.graphService.getRemoteNodes().values()).filter((e=>e.getStatus()===d.NodeStatus.Online));return e?t.filter(e):t}async discover(){return this.ancestors=await this.discoveryService.join(),this.ancestors.length<this.graphService.getMinConnections()&&(this.localNode.setRank(this.ancestors.length+1),this.processRank()),this.ancestors}getDistance(e,t){const s=this.localNode.getRemoteConnections(),n=new Set(s),r=Array.from(s).filter((t=>t!==e)).map((e=>({id:e,distance:1})));for(;r.length>0;){const e=r.shift();if(!e)continue;if(e.id===t)return e.distance;const s=this.graphService.getRemoteNode(e.id);s&&s.getStatus()!==d.NodeStatus.Offline&&s.getRemoteConnections().forEach((t=>{n.has(t)||(n.add(t),r.push({id:t,distance:e.distance+i.NODE_DISTANCE_HOP}))}))}return-1}handleNodeSystemEvents(e){try{switch(e.content.type){case l.NodeMessageType.NodeUpdate:case l.NodeMessageType.NodeConnectionsUpdate:this.handleNodeUpdate(e.content),S.default.log(h.LoggingChannels.Node,"NodeManager - NodeUpdate",`'${this.localNode.getId()}, ${e.sourceId}'`,e,e.content);break;case l.NodeMessageType.NodeLeave:this.removeNode(e.content.id),S.default.log(h.LoggingChannels.Node,"NodeManager - NodeLeave",`'${this.localNode.getId()}, ${e.sourceId}'`,e,e.content)}}catch(e){if(e instanceof o.EarlyReturnError)return void S.default.log(h.LoggingChannels.Node,e.message);throw e}}handlePeerConnectionSystemEvents(e){switch(e.content.type){case c.PeerConnectionMessageType.Success:this.handleConnectionSuccess(e.sourceId),S.default.log(h.LoggingChannels.Node,"NodeManager - ConnectionSuccess",`'${this.localNode.getId()}, ${e.sourceId}'`,e,e.content);break;case c.PeerConnectionMessageType.Disconnect:this.publishNodeLeave(e.sourceId),S.default.log(h.LoggingChannels.Node,"NodeManager - PublishNodeLeave",this.localNode.getId(),e,e.content)}}handleNodeJoin(e){this.createRemoteNode(e),this.notifyJoin(e)}notifyJoin(e){this.localNode.answerJoin(e.id),this.publishNodeJoin(e.id),this.notifyClusterNodeJoin(e)}handleNodeUpdate(e){const{id:t,metaData:s,rank:i,remoteConnections:r,version:o}=e,a=this.graphService.getRemoteNode(t);if(a){if(!(o<=a.getCurrentVersion())){if(a.setRemoteConnections(r),a.setCurrentVersion(o),a.type===n.NodeType.User&&s.type===n.NodeType.User&&(a.setDisplayName(s.displayName),a.setEmail(s.email)),i&&a.setRank(i),this.setLocalRank(t,i),a.getStatus()===d.NodeStatus.Offline)return a.setStatus(d.NodeStatus.Online),this.processRank(),void this.notifyJoin(e);this.processRank(),this.notifyClusterNodeUpdate({id:t,metaData:s,remoteConnections:r,version:o})}}else this.handleNodeJoin(e)}setLocalRank(e,t){t&&this.ancestors.includes(e)&&this.localNode.setRank(t+this.ancestors.indexOf(e)+1)}handleConnectionSuccess(e){this.localNode.addRemoteConnection(e)}createRemoteNode({id:e,metaData:t,rank:s,remoteConnections:i,version:r}){if(this.graphService.hasRemoteNode(e))throw new o.EarlyReturnError(`Cannot create remote node: Node already exists: ${e}`);switch(t.type){case n.NodeType.User:const{displayName:o,email:a}=t;this.graphService.setRemoteNode(e,new g.RemoteUser(e,o,a,new Set(i),r,s));break;case n.NodeType.Agent:this.graphService.setRemoteNode(e,new p.RemoteAgent(e,new Set(i),r,s))}this.setLocalRank(e,s),this.processRank()}publishNodeJoin(e){this.systemTopic.publish({sourceId:r.SYSTEM_TOPIC_INTERNAL,messageType:u.SystemMessageType.Node,content:{type:l.NodeMessageType.NodeJoin,id:e}})}publishNodeLeave(e){this.systemTopic?.publish({sourceId:r.SYSTEM_TOPIC_INTERNAL,messageType:u.SystemMessageType.Node,content:{type:l.NodeMessageType.NodeLeave,id:e}})}handleNodeDisconnect(e){if(e===this.localNode.getId())return this.configs.mediator.notifyCluster("cluster-disconnect",{id:e}),this.configs.mediator.close(!0),this.configs.mediator.open(),void this.configs.mediator.initialize();this.publishNodeLeave(e)}removeNode(e){this.ancestors.includes(e)?this.manageAncestor(e):this.localNode.getRemoteConnections().has(e)&&this.manageOptimization(e),this.localNode.removeRemoteConnection(e);const t=Array.from(this.optimizationLayers.entries()).find((([,e])=>e==e));t&&this.optimizationLayers.delete(t[0]);const s=this.graphService.getRemoteNode(e);if(!s)return;const n=s.getRank(),i=this.localNode.getRank();i&&n&&n<i&&this.localNode.setRank(i-1,!1),Array.from(this.graphService.getRemoteNodes().values()).forEach((e=>{const t=e.getRank();t&&n&&n<t&&e.setRank(t-1)})),s.setStatus(d.NodeStatus.Offline),this.configs.mediator.notifyCluster(`${s.type}-leave`,{id:e})}notifyClusterNodeJoin({id:e,metaData:t,remoteConnections:s}){switch(t.type){case n.NodeType.User:this.configs.mediator.notifyCluster("user-join",{id:e,metaData:t,remoteConnections:s});break;case n.NodeType.Agent:this.configs.mediator.notifyCluster("agent-join",{id:e,metaData:t,remoteConnections:s})}}notifyClusterNodeUpdate({id:e,metaData:t,remoteConnections:s}){switch(t.type){case n.NodeType.User:this.configs.mediator.notifyCluster("user-update",{id:e,metaData:t,remoteConnections:s});break;case n.NodeType.Agent:this.configs.mediator.notifyCluster("agent-update",{id:e,metaData:t,remoteConnections:s})}}processRank(){if(this.lastProcessRank||(this.lastProcessRank=Date.now()),this.debounceProcessRank){if(Date.now()-this.lastProcessRank>i.NODE_PROCESS_RANK_DEBOUCE_TIME_LIMIT)return;clearTimeout(this.debounceProcessRank)}this.debounceProcessRank=setTimeout((async()=>{delete this.lastProcessRank,delete this.debounceProcessRank;const e=this.localNode.getRank();if(!e)return;const t=this.graphService.getCurrentMaxLayer(this.graphService.getRemoteNodes().size);if(this.optimizationLayers.size>=t)return;let s=1;for(;this.configs.mediator.getConnections().length<this.graphService.getMaxConnections()&&s<=t;){if(this.optimizationLayers.has(s)){s+=1;continue}const t=this.graphService.getNextTargetRank(e,s),n=Array.from(this.graphService.getRemoteNodes().values()).find((e=>e.getRank()===t&&e.getStatus()===d.NodeStatus.Online));if(n){try{await this.configs.mediator.createConnection(n.getId(),c.PeerConnectionType.Optimization),this.optimizationLayers.set(s,n.getId())}catch(e){if(!(e instanceof a.SDKInternalError&&e.code===a.SDKInternalError.codes.RemoteConnectionExists))throw e;S.default.log(h.LoggingChannels.Node,this.localNode.getId(),n.getId(),e.message)}s+=1}else s+=1}}),i.NODE_PROCESS_RANK_DEBOUCE_TIME)}async manageAncestor(e){this.ancestors.splice(this.ancestors.indexOf(e),1);const t=await this.discoveryService.getAncestors();for(const e of t)if(!this.ancestors.includes(e)){const t=Array.from(this.optimizationLayers.entries()).find((([,t])=>t===e));t&&this.optimizationLayers.delete(t[0]),this.configs.mediator.createConnection(e,c.PeerConnectionType.Core)}0===t.length&&this.localNode.setRank(1),this.ancestors=t}async manageOptimization(e){const t=this.localNode.getRank();if(!t)return;const s=this.graphService.getRemoteNode(e);if(!s||s.getStatus()===d.NodeStatus.Offline)return;const n=s.getRank();if(!n||n<t)return;const i=this.getOutgoingOptimizationConnections(this.localNode.getRemoteConnections(),t),r=this.getOutgoingOptimizationConnections(s.getRemoteConnections(),n)[i.findIndex((([t])=>t===e))];if(!r||this.localNode.getRemoteConnections().has(r[0]))return;const o=this.graphService.getRemoteNode(r[0]);if(o&&o.getStatus()!==d.NodeStatus.Offline)try{await this.configs.mediator.createConnection(r[0],c.PeerConnectionType.Optimization);const t=Array.from(this.optimizationLayers.entries()).find((([,t])=>t===e));t&&this.optimizationLayers.set(t[0],r[0])}catch(e){if(!(e instanceof a.SDKInternalError&&e.code===a.SDKInternalError.codes.RemoteConnectionExists))throw e;S.default.log(h.LoggingChannels.Node,this.localNode.getId(),r[0],e.message)}}getOutgoingOptimizationConnections(e,t){return Array.from(e).reduce(((e,s)=>{const n=this.graphService.getRemoteNode(s);if(!n||n.getStatus()===d.NodeStatus.Offline)return e;const i=n.getRank();if(!i)return e;const r=i-t;return r<=this.graphService.getMinConnections()||e.push([s,r]),e}),[]).sort((([,e],[,t])=>e-t))}}},"./src/models/Node/RemoteAgent.ts":(e,t,s)=>{s.r(t),s.d(t,{RemoteAgent:()=>r});var n=s("./src/interfaces/Node/Node.ts"),i=s("./src/models/Node/Agent.ts");class r extends i.Agent{currentVersion;status=n.NodeStatus.Online;lastUpdated=Date.now();constructor(e,t=new Set,s,n){super(e,t,n),this.currentVersion=s}getCurrentVersion(){return this.currentVersion}getStatus(){return this.status}getLastUpdated(){return this.lastUpdated}setRank(e){this.rank!==e&&(this.rank=e,this.updateLastUpdated())}setRemoteConnections(e){let t=!1;for(const s of this.remoteConnections)e.includes(s)||(t=!0,this.remoteConnections.delete(s));for(const s of e)this.remoteConnections.has(s)||(t=!0,this.remoteConnections.add(s));t&&this.updateLastUpdated()}setCurrentVersion(e){this.currentVersion!==e&&(this.currentVersion=e,this.updateLastUpdated())}setStatus(e){this.status!==e&&(this.status=e,this.updateLastUpdated(),e===n.NodeStatus.Offline&&this.close())}updateLastUpdated(){this.lastUpdated=Date.now()}}},"./src/models/Node/RemoteUser.ts":(e,t,s)=>{s.r(t),s.d(t,{RemoteUser:()=>r});var n=s("./src/interfaces/Node/Node.ts"),i=s("./src/models/Node/User.ts");class r extends i.User{currentVersion;status=n.NodeStatus.Online;lastUpdated=Date.now();constructor(e,t,s,n=new Set,i,r){super(e,t,s,n,r),this.currentVersion=i}getCurrentVersion(){return this.currentVersion}getStatus(){return this.status}getLastUpdated(){return this.lastUpdated}setDisplayName(e){this.displayName!==e&&(this.displayName=e,this.updateLastUpdated())}setEmail(e){this.email!==e&&(this.email=e,this.updateLastUpdated())}setRank(e){this.rank!==e&&(this.rank=e,this.updateLastUpdated())}setRemoteConnections(e){let t=!1;for(const s of this.remoteConnections)e.includes(s)||(t=!0,this.remoteConnections.delete(s));for(const s of e)this.remoteConnections.has(s)||(t=!0,this.remoteConnections.add(s));t&&this.updateLastUpdated()}setCurrentVersion(e){this.currentVersion!==e&&(this.currentVersion=e,this.updateLastUpdated())}setStatus(e){this.status!==e&&(this.status=e,this.updateLastUpdated(),e===n.NodeStatus.Offline&&this.close())}updateLastUpdated(){this.lastUpdated=Date.now()}}},"./src/models/Node/User.ts":(e,t,s)=>{s.r(t),s.d(t,{User:()=>r});var n=s("@crewdle/web-sdk-types"),i=s("./src/models/Node/Node.ts");class r extends i.Node{id;displayName;email;remoteConnections;rank;type=n.NodeType.User;constructor(e,t,s,n=new Set,i){super(e,n,i),this.id=e,this.displayName=t,this.email=s,this.remoteConnections=n,this.rank=i}getDisplayName(){return this.displayName}getEmail(){return this.email}}},"./src/models/Orchestrator/Orchestrator.ts":(e,t,s)=>{s.r(t),s.d(t,{Orchestrator:()=>R});var n=s("@crewdle/web-sdk-types"),i=s("./src/public/errors/SDKClientError.ts"),r=s("./src/errors/EarlyReturnError.ts"),o=s("./src/errors/SDKInternalError.ts"),a=s("./src/interfaces/Connection/PeerConnection.ts"),c=s("./src/interfaces/SDK/SDK.ts"),d=s("./src/interfaces/Subscription/SystemEvent.ts"),l=s("./src/interfaces/Utils/Logger.ts"),u=s("./src/models/Connection/ConnectionManager.ts"),h=s("./src/models/Content/ContentManager.ts"),p=s("./src/models/Detection/DetectionManager.ts"),g=s("./src/models/Node/LocalAgent.ts"),m=s("./src/models/Node/LocalUser.ts"),b=s("./src/models/Node/NodeManager.ts"),S=s("./src/models/Remediation/RemediationManager.ts"),y=s("./src/models/Stats/StatsManager.ts"),T=s("./src/models/Subscription/Helpers.ts"),C=s("./src/models/Subscription/SubscriptionManager.ts"),I=s("./src/interfaces/Subscription/SubscriptionMessage.ts"),f=s("./src/models/Subscription/SystemTopic.ts"),E=s("./src/services/Graph/GraphService.ts"),v=s("./src/utils/Logger/Helpers.ts"),N=s("./src/utils/Logger/Logger.ts");class R{vendorId;clusterId;authService;options;configs;clusterEventEmitter;contentManager;connectionManager;subscriptionManager;statsManager;detectionManager;remediationManager;nodeManager;graphService;systemTopic=new f.SystemTopic;systemTopicUnsubscribe;localNode;constructor(e,t,s,i,r,o,a){switch(this.vendorId=e,this.clusterId=t,this.authService=i,this.options=r,this.configs=o,this.clusterEventEmitter=a,s.type){case n.NodeType.User:this.localNode=new m.LocalUser(s.getId(),s.getDisplayName(),s.getEmail());break;case n.NodeType.Agent:default:this.localNode=new g.LocalAgent(s.getId())}const c=this.getConfigs();this.graphService=new E.GraphService(this.options.minConnections,this.options.maxConnections,this.options.maxDistance),this.contentManager=new h.ContentManager(c,this.options.maxFps,this.options.audioContext),this.connectionManager=new u.ConnectionManager(c,this.authService,this.configs.iceServers,this.options.maxFps,this.options.maxBpp,this.graphService,this.options.peerConnectionConnector),this.subscriptionManager=new C.SubscriptionManager(c,this.options.maxOutgoingSubscriptions,this.graphService.getMaxDistance()),this.statsManager=new y.StatsManager(c),this.detectionManager=new p.DetectionManager(c),this.remediationManager=new S.RemediationManager(c),this.nodeManager=new b.NodeManager(c,this.graphService,this.localNode),this.systemTopicUnsubscribe=this.initializeSystemTopic()}open(){const e=this.getConfigs();this.connectionManager=new u.ConnectionManager(e,this.authService,this.configs.iceServers,this.options.maxFps,this.options.maxBpp,this.graphService,this.options.peerConnectionConnector),this.subscriptionManager=new C.SubscriptionManager(e,this.options.maxOutgoingSubscriptions,this.graphService.getMaxDistance()),this.statsManager=new y.StatsManager(e),this.detectionManager=new p.DetectionManager(e),this.remediationManager=new S.RemediationManager(e),this.nodeManager=new b.NodeManager(e,this.graphService,this.localNode);const t=this.connectionManager.getConnectionGroup();this.contentManager.getPubSubTopics().forEach((e=>{this.subscriptionManager.createOutgoingSubscription(e,t),this.subscriptionManager.createIncomingSubscription(t,e),e.reset()})),this.contentManager.getObjectStoreBuckets().forEach((e=>{this.subscriptionManager.createOutgoingSubscription(e,t),this.subscriptionManager.createIncomingSubscription(t,e),e.reset(),e.sync()})),this.contentManager.getKeyValueDatabases().forEach((e=>{this.subscriptionManager.createOutgoingSubscription(e,t),this.subscriptionManager.createIncomingSubscription(t,e),e.reset(),this.syncKeyValueDatabase(e)})),this.systemTopicUnsubscribe=this.initializeSystemTopic()}registerSystemSource(e){try{this.systemTopic.registerSource(e)}catch(e){this.handleError(e,{})}}unregisterSystemSource(e){try{this.systemTopic.unregisterSource(e)}catch(e){this.handleError(e,{})}}createConnection(e,t){return this.connectionManager.createConnection(e,t)}getConnection(e){try{return this.connectionManager.getConnection(e)}catch(e){throw this.handleError(e,{})}}getConnections(e){try{return this.connectionManager.getConnections(e)}catch(e){throw this.handleError(e,{})}}getRemoteMediaStream(e,t){try{return this.contentManager.getRemoteMediaStreams((s=>s.getOwnerId()===e&&s.getLabel()===t))[0]}catch(e){throw this.handleError(e,{})}}getLocalMediaStream(e){try{return this.contentManager.getLocalMediaStreams((t=>t.getLabel()===e))[0]}catch(e){throw this.handleError(e,{})}}notifyCluster=(...e)=>{try{return this.clusterEventEmitter.emit(...e)}catch(e){throw this.handleError(e,{})}};registerRemoteNode(e){try{this.statsManager.addRemoteNode(e)}catch(e){throw this.handleError(e,{})}}unregisterRemoteNode(e){try{this.statsManager.removeRemoteNode(e)}catch(e){throw this.handleError(e,{})}}collectStats(e){return this.connectionManager.collectStats(e)}async initialize(){try{await this.connectionManager.initialize();const e=await this.nodeManager.discover();for(const t of e)this.connectionManager.createConnection(t)}catch(e){throw this.handleError(e,{})}}updateUser(e){this.localNode.type===n.NodeType.User&&(this.localNode.setEmail(e.getEmail()),this.localNode.setDisplayName(e.getDisplayName()))}close(e=!1){N.default.warning("orchestrator-close",{clusterId:this.clusterId,nodeId:this.localNode.getId(),nodeType:this.localNode.type}),this.systemTopicUnsubscribe(),this.remediationManager.close(),this.detectionManager.close(),this.statsManager.close(),this.subscriptionManager.close(),this.connectionManager.close(),this.contentManager.close(e),this.nodeManager.close()}openPubSubTopic(e){try{const t=this.contentManager.createPubSubTopic(e),s=this.connectionManager.getConnectionGroup();return this.subscriptionManager.createOutgoingSubscription(t,s),this.subscriptionManager.createIncomingSubscription(s,t),t}catch(e){throw this.handleError(e,{})}}async openObjectStoreBucket(e){try{const t=this.contentManager.createObjectStoreBucket(e,this.options.objectStoreConnector),s=this.connectionManager.getConnectionGroup();return this.subscriptionManager.createOutgoingSubscription(t,s),this.subscriptionManager.createIncomingSubscription(s,t),await t.sync(),t}catch(e){throw this.handleError(e,{})}}async openKeyValueDatabase(e,t){try{const s=await this.contentManager.createKeyValueDatabase(e,t,this.options.keyValueDatabaseConnector),n=this.connectionManager.getConnectionGroup();return this.subscriptionManager.createOutgoingSubscription(s,n),this.subscriptionManager.createIncomingSubscription(n,s),await s.open(),this.syncKeyValueDatabase(s),s}catch(e){throw this.handleError(e,{})}}getPubSubTopics(e){try{return this.contentManager.getPubSubTopics(e)}catch(e){throw this.handleError(e,{})}}getObjectStoreBuckets(e){try{return this.contentManager.getObjectStoreBuckets(e)}catch(e){throw this.handleError(e,{})}}getKeyValueDatabases(e){try{return this.contentManager.getKeyValueDatabases(e)}catch(e){throw this.handleError(e,{})}}createLocalMediaStream(e,t){if(!this.configs.features.includes(c.IInternalFeatures.MediaStream))throw new i.SDKClientError(i.SDKClientErrorCodes.FeatureNotEnabled,"MediaStream feature not enabled");try{return this.contentManager.createLocalMediaStream(e,t)}catch(e){throw this.handleError(e,{})}}createLocalDynamicMediaStream(e,t){if(!this.configs.features.includes(c.IInternalFeatures.MediaStream))throw new i.SDKClientError(i.SDKClientErrorCodes.FeatureNotEnabled,"MediaStream feature not enabled");try{return this.contentManager.createLocalDynamicMediaStream(e,t)}catch(e){throw this.handleError(e,{})}}getLocalMediaStreams(e){if(!this.configs.features.includes(c.IInternalFeatures.MediaStream))throw new i.SDKClientError(i.SDKClientErrorCodes.FeatureNotEnabled,"MediaStream feature not enabled");try{return this.contentManager.getLocalMediaStreams(e)}catch(e){throw this.handleError(e,{})}}getRemoteMediaStreams(e){if(!this.configs.features.includes(c.IInternalFeatures.MediaStream))throw new i.SDKClientError(i.SDKClientErrorCodes.FeatureNotEnabled,"MediaStream feature not enabled");try{return this.contentManager.getRemoteMediaStreams(e)}catch(e){throw this.handleError(e,{})}}getDistance(e,t){return this.nodeManager.getDistance(e,t)}getLocalNode(){return this.nodeManager.getLocalNode()}getRemoteNodes(e){try{return this.nodeManager.getRemoteNodes(e)}catch(e){throw this.handleError(e,{})}}async handleSystemEvents(e){try{if(N.default.log(l.LoggingChannels.Events,"Orchestrator handleSystemEvents",this.nodeManager.getLocalId(),e),(0,T.isSender)(e,this.nodeManager.getLocalId()))return void this.connectionManager.handleOutgoingSystemEvents(e);switch(e.messageType){case d.SystemMessageType.Content:this.statsManager.handleContentSystemEvents(e),this.subscriptionManager.handleContentSystemEvents(e),this.contentManager.handleContentSystemEvents(e);break;case d.SystemMessageType.Node:this.subscriptionManager.handleNodeSystemEvents(e),this.connectionManager.handleNodeSystemEvents(e),this.contentManager.handleNodeSystemEvents(e),this.nodeManager.handleNodeSystemEvents(e);break;case d.SystemMessageType.Detection:this.remediationManager.handleDetectionSystemEvents(e);break;case d.SystemMessageType.Remediation:this.remediationManager.handleRemediationSystemEvents(e);break;case d.SystemMessageType.Stats:this.detectionManager.handleStatsSystemEvents(e);break;case d.SystemMessageType.Subscription:e.content.type!==I.SubscriptionMessageType.UnsubscribeMediaStream?(this.subscriptionManager.handleSubscriptionSystemEvents(e),this.contentManager.handleSubscriptionSystemEvents(e)):(this.contentManager.handleSubscriptionSystemEvents(e),this.subscriptionManager.handleSubscriptionSystemEvents(e));break;case d.SystemMessageType.PeerConnection:await this.connectionManager.handlePeerConnectionSystemEvents(e),this.statsManager.handlePeerConnectionSystemEvents(e),this.nodeManager.handlePeerConnectionSystemEvents(e),this.subscriptionManager.handlePeerConnectionSystemEvents(e)}}catch(e){throw this.handleError(e,{})}}handleError(e,t){if(!(e instanceof r.EarlyReturnError)){if(e instanceof i.SDKClientError)throw e;if(!(e instanceof Error))throw new i.SDKClientError(i.SDKClientErrorCodes.InternalSDKError,`Internal unknown error: ${e}`);if(!(e instanceof o.SDKInternalError))throw new i.SDKClientError(i.SDKClientErrorCodes.InternalSDKError,`Internal error: ${e.message}`);switch(e.code){case o.SDKInternalError.codes.MissingSystemTopic:case o.SDKInternalError.codes.MissingRemoteConnection:case o.SDKInternalError.codes.PeerConnectionInvalidDestination:case o.SDKInternalError.codes.ConnectionNotinitialized:case o.SDKInternalError.codes.ConnectionNotConnected:case o.SDKInternalError.codes.InvalidDataChannel:case o.SDKInternalError.codes.InvalidPublisher:case o.SDKInternalError.codes.InvalidSubscriber:case o.SDKInternalError.codes.SubscriptionRequestDoesNotExist:case o.SDKInternalError.codes.SubscriptionRequestFailed:case o.SDKInternalError.codes.SubscriptionRequestNoAnswer:case o.SDKInternalError.codes.InvalidSubscription:}throw N.default.error(`sdk-internal-error: ${e.message}`,{clusterId:this.clusterId,nodeId:this.localNode.getId(),nodeType:this.localNode.type},e),new i.SDKClientError(i.SDKClientErrorCodes.InternalSDKError,`Internal SDK error: ${e.message}`)}}getConfigs(){return{mediator:this,vendorId:this.vendorId,clusterId:this.clusterId,localNode:this.localNode}}initializeSystemTopic(){return this.systemTopic.subscribe((e=>{const t=(0,v.getFormattedSytemLog)(e,this.localNode.getId()),s=e.messageType===d.SystemMessageType.Stats||e.messageType===d.SystemMessageType.PeerConnection&&e.content.type===a.PeerConnectionMessageType.Stats?l.LoggingChannels.SystemStats:l.LoggingChannels.System;N.default.logRaw(s,`${e.uuid} - ${t}`,e),this.handleSystemEvents(e).catch((e=>{console.error(e)}))}))}async syncKeyValueDatabase(e,t){t=this.findNextAncestor(t),await e.sync(t,(()=>this.syncKeyValueDatabase(e,t)))}findNextAncestor(e){const t=this.nodeManager.getAncestorIds();if(!e)return t[0];const s=t.findIndex((t=>e===t)),n=t[s+1];return t.length>0&&!n?e[0]:n}}},"./src/models/Remediation/Helpers.ts":(e,t,s)=>{s.r(t),s.d(t,{applyRemediation:()=>a,findSender:()=>o,getMaxBitrate:()=>c});var n=s("./src/constants/Content.ts"),i=s("./src/constants/Remediation.ts"),r=s("./src/interfaces/Remediation/Remediation.ts");function o(e,t){return e.sort(((e,s)=>t.action===r.RemediationAction.Downgrade?s.priority-e.priority:e.priority-s.priority)).find((e=>function(e,t){if(t.action===r.RemediationAction.Downgrade){if(t.component===r.RemediationComponent.Resolution)return e.resolutionScale<i.REMEDIATION_MAX_RESOLUTION_SCALE||e.maxFramerate>i.REMEDIATION_MIN_FPS;if(t.component===r.RemediationComponent.Bitrate)return e.maxBitrate>i.REMEDIATION_MIN_BITRATE}return e.resolutionScale>e.minResolutionScale||e.framerate<e.maxFramerate||e.bitrate<e.maxBitrate}(e,t)))}function a(e,t){e.tracks.video&&e.tracks.video.sender&&(e.resolutionScale=function(e,t,s){switch(s.action){case r.RemediationAction.Downgrade:s.component===r.RemediationComponent.Resolution&&(e+=i.REMEDIATION_RESOLUTION_SCALE)>i.REMEDIATION_MAX_RESOLUTION_SCALE&&(e=i.REMEDIATION_MAX_RESOLUTION_SCALE);break;case r.RemediationAction.Upgrade:(e-=i.REMEDIATION_RESOLUTION_SCALE)<t&&(e=t)}return e}(e.resolutionScale,e.minResolutionScale,t),e.framerate=function(e,t,s){switch(s.action){case r.RemediationAction.Downgrade:s.component===r.RemediationComponent.Resolution&&(e-=i.REMEDIATION_FPS)<i.REMEDIATION_MIN_FPS&&(e=i.REMEDIATION_MIN_FPS);break;case r.RemediationAction.Upgrade:(e+=i.REMEDIATION_FPS)>t&&(e=t)}return e}(e.framerate,e.maxFramerate,t),e.bitrate=function(e,t,s){switch(s.action){case r.RemediationAction.Downgrade:s.component===r.RemediationComponent.Bitrate&&(e*=1-i.REMEDIATION_BITRATE)<i.REMEDIATION_MIN_BITRATE&&(e=i.REMEDIATION_MIN_BITRATE);break;case r.RemediationAction.Upgrade:(e*=1+i.REMEDIATION_BITRATE)>t&&(e=t)}return e}(e.bitrate,e.maxBitrate,t))}function c(e,t){return Math.floor(n.CONTENT_MAX_WIDTH*n.CONTENT_MAX_HEIGHT*e*t)}},"./src/models/Remediation/RemediationManager.ts":(e,t,s)=>{s.r(t),s.d(t,{RemediationManager:()=>h});var n=s("./src/constants/Remediation.ts"),i=s("./src/constants/RemediationRules.ts"),r=s("./src/constants/System.ts"),o=s("./src/interfaces/Connection/PeerConnection.ts"),a=s("./src/interfaces/Detection/Detection.ts"),c=s("./src/interfaces/Remediation/Remediation.ts"),d=s("./src/interfaces/Subscription/SystemEvent.ts"),l=s("./src/interfaces/Utils/Logger.ts"),u=s("./src/utils/Logger/Logger.ts");class h{configs;systemTopic;lastRemediations=new Map;constructor(e){this.configs=e,this.configs.mediator.registerSystemSource(this)}close(){this.configs.mediator.unregisterSystemSource(this)}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}handleDetectionSystemEvents(e){e.content.type===a.DetectionMessageType.Problem&&this.handleProblem(e.content.data)}handleRemediationSystemEvents(e){e.content.type===c.RemediationMessageType.RemoteRemediation&&this.applyRemediation(e.sourceId,{type:c.RemediationMessageType.Remediation,component:e.content.data.component,action:e.content.data.action})}handleProblem(e){const t=i.REMEDIATION_RULES.find((t=>t.problemType===e.type));t.remediations?.forEach((t=>{this.applyRemediation(e.nodeId,{type:e.origin===o.PeerConnectionOrigin.Sender?c.RemediationMessageType.Remediation:c.RemediationMessageType.RemoteRemediation,component:t.component,action:t.action})}))}applyRemediation(e,t){if(t.type===c.RemediationMessageType.Remediation){const t=Date.now(),s=this.lastRemediations.get(e);if(s&&t-s<n.REMEDIATION_DOWNGRADE_WAIT_TIME)return;this.lastRemediations.set(e,t)}u.default.log(l.LoggingChannels.Remediation,"Apply remediation",t),u.default.logEvent("remediation",{clusterId:this.configs.clusterId,nodeId:this.configs.localNode.getId(),nodeType:this.configs.localNode.type,remoteId:e,data:{type:t.type,component:t.component,action:t.action}});let s,i=r.SYSTEM_TOPIC_INTERNAL;t.type===c.RemediationMessageType.RemoteRemediation&&(i=this.configs.localNode.getId(),s=[e]),this.systemTopic.publish({sourceId:i,destinationIds:s,messageType:d.SystemMessageType.Remediation,content:{type:t.type,targetId:e,data:t}})}}},"./src/models/SDK/SDK.ts":(e,t,s)=>{s.r(t),s.d(t,{SDK:()=>v});var n=s("firebase/firestore"),i=s("firebase/functions"),r=s("@crewdle/web-sdk-types"),o=s("@crewdle/mist-connector-opfs"),a=s("@crewdle/mist-connector-indexed-db"),c=s("@crewdle/mist-connector-webrtc-browser"),d=s("./src/public/errors/SDKClientError.ts"),l=s("./src/constants/Connection.ts"),u=s("./src/constants/Content.ts"),h=s("./src/constants/Node.ts"),p=s("./src/constants/Subscription.ts"),g=s("./src/interfaces/Utils/Support.ts"),m=s("./src/models/Cluster/Cluster.ts"),b=s("./src/models/Node/AuthAgent.ts"),S=s("./src/models/Node/AuthUser.ts"),y=s("./src/services/Auth/FirebaseAuthService.ts"),T=s("./src/services/Firebase/FirebaseService.ts"),C=s("./src/utils/Interval/Interval.ts"),I=s("./src/utils/Logger/Logger.ts"),f=s("./src/utils/Support/Support.ts"),E=s("./src/environments/Environment.ts");class v{static instance;authService;vendorId;options;configs;clusters=new Map;authContext;unsubscribe;constructor(e,t,s){this.vendorId=e,this.configs=t,this.authService=new y.FirebaseAuthService(this.vendorId),f.default.initialize(),this.options={audioContext:s?.audioContext??(f.default.isFeatureSupported(g.SupportFeatureName.AudioContext)&&new AudioContext||void 0),maxOutgoingSubscriptions:s?.maxOutgoingSubscriptions??p.SUBSCRIPTION_MAX_OUTGOING,minConnections:s?.minConnections??l.CONNECTION_MIN,maxConnections:s?.maxConnections??(s?.minConnections&&4*s.minConnections)??l.CONNECTION_MAX,maxDistance:s?.maxDistance??h.NODE_DISTANCE_MAX,maxFps:s?.maxFps??u.CONTENT_FPS,maxBpp:s?.maxBpp??u.CONTENT_BPP,objectStoreConnector:s?.objectStoreConnector??o.OPFSObjectStoreConnector,keyValueDatabaseConnector:s?.keyValueDatabaseConnector??a.IDBDatabaseConnector,peerConnectionConnector:s?.peerConnectionConnector??c.WebRTCBrowserPeerConnectionConnector},s?.disableIntervalHack&&this.options.audioContext&&C.default.startNoThrottlingHack(this.options.audioContext),I.default.setVendorId(this.vendorId),s?.loggingConnectors&&I.default.setLoggingConnectors(s.loggingConnectors)}static async getInstance(e,t,s,n){const i=await this.validateAccess(e,t,n);return v.instance||(v.instance=new v(e,i,s)),{close:v.instance.close.bind(v.instance),authenticateUser:v.instance.authenticateUser.bind(v.instance),authenticateAgent:v.instance.authenticateAgent.bind(v.instance),joinCluster:v.instance.joinCluster.bind(v.instance)}}static async timestamp(){return T.default.getEstimatedTimestamp()}static isProduction(){return E.Environment.isProduction}async close(){this.clusters.forEach((e=>{e.off(),e.leave()})),this.clusters.clear(),this.options.audioContext&&C.default.stopNoThrottlingHack(),this.unsubscribe?.(),this.authContext=void 0,await this.authService.signOut()}static async validateAccess(e,t,s){const n=(await(0,i.httpsCallable)(T.default.getFunctions(),"sdkValidateAccess")({vendorId:e,accessToken:t,secretKey:s})).data;return n.features||(n.features=[]),n}async authenticateUser(e){await this.authService.signInWithCredential(e);const t=new S.AuthUser(e.id,e.displayName,e.email);return this.authContext={node:t},f.default.logSupport(t),{type:r.NodeType.User,getId:t.getId.bind(t),getDisplayName:t.getDisplayName.bind(t),getEmail:t.getEmail.bind(t),setDisplayName:t.setDisplayName.bind(t),setEmail:t.setEmail.bind(t)}}async authenticateAgent(e){const{id:t,groupId:s}=e,i=await(0,n.getDoc)((0,n.doc)(T.default.getFirestore(),`developers/${this.vendorId}/resources/agent/items/${s}`));if(!i.exists())throw new d.SDKClientError(d.SDKClientErrorCodes.NodeNotAuthenticated,"Agent group not found");const o=i.data();await this.authService.signInWithCredential({id:t});const a=new b.AuthAgent(t,s,this.vendorId,o);return this.authContext={node:a},f.default.logSupport(a),await this.connectAgent(a),{type:r.NodeType.Agent,getId:a.getId.bind(a),onConfigurationChange:a.onConfigurationChange.bind(a),setReportCapacity:a.setReportCapacity.bind(a)}}async joinCluster(e){if(!this.authContext)throw new d.SDKClientError(d.SDKClientErrorCodes.NodeNotAuthenticated,"Node not authenticated");if(this.authContext.node.type!==r.NodeType.User)throw new d.SDKClientError(d.SDKClientErrorCodes.NodeTypeNotSupported,"Cannot join a cluster if the node is not a user");if(this.clusters.has(e))throw new d.SDKClientError(d.SDKClientErrorCodes.ClusterAlreadyJoined,"Cluster already joined");const t=new m.Cluster(this.vendorId,e,this.authContext.node,this.authService,this.options,this.configs);return await t.join(),this.addCluster(e,t),I.default.logEvent("join-cluster",{clusterId:e,nodeId:this.authContext.node.getId(),nodeType:this.authContext.node.type}),{leave:t.leave.bind(t),getLocalNode:t.getLocalNode.bind(t),openPubSubTopic:t.openPubSubTopic.bind(t),openObjectStoreBucket:t.openObjectStoreBucket.bind(t),openKeyValueDatabase:t.openKeyValueDatabase.bind(t),publishLocalMediaStream:t.publishLocalMediaStream.bind(t),publishLocalDynamicMediaStream:t.publishLocalDynamicMediaStream.bind(t),getPubSubTopics:t.getPubSubTopics.bind(t),getObjectStoreBuckets:t.getObjectStoreBuckets.bind(t),getKeyValueDatabases:t.getKeyValueDatabases.bind(t),getLocalMediaStreams:t.getLocalMediaStreams.bind(t),getRemoteMediaStreams:t.getRemoteMediaStreams.bind(t),getRemoteNodes:t.getRemoteNodes.bind(t),on:t.on.bind(t),off:t.off.bind(t)}}async connectAgent(e){for(const t of e.agentConfig.clusters){const s=new m.Cluster(this.vendorId,t.id,e,this.authService,this.options,this.configs);await s.join(),this.addCluster(t.id,s);for(const e of t.pubsub)s.openPubSubTopic(e);for(const e of t.objectStorage)await s.openObjectStoreBucket(e);for(const e of t.keyValueDatabase)await s.openKeyValueDatabase(e,{version:1,tables:{}})}}addCluster(e,t){this.clusters.set(e,t),t.on("cluster-leave",(()=>{t.off(),this.clusters.delete(e)}))}}},"./src/models/Stats/Helpers.ts":(e,t,s)=>{s.r(t),s.d(t,{sendStats:()=>r});var n=s("./src/constants/System.ts"),i=s("./src/interfaces/Subscription/SystemEvent.ts");function r(e,t){t.publish({sourceId:n.SYSTEM_TOPIC_INTERNAL,messageType:i.SystemMessageType.PeerConnection,content:e})}},"./src/models/Stats/Stats.ts":(e,t,s)=>{s.r(t),s.d(t,{Stats:()=>l});var n=s("./src/constants/Stats.ts"),i=s("./src/constants/System.ts"),r=s("./src/interfaces/Connection/PeerConnection.ts"),o=s("./src/interfaces/Content/Content.ts"),a=s("./src/interfaces/Stats/Stats.ts"),c=s("./src/interfaces/Subscription/SystemEvent.ts"),d=s("./src/models/Stats/StatsNode.ts");class l{nodes=new Map;scheduleTime=0;durationTime=0;pubsubTopics=new Map;objectStores=new Map;keyValueDatabases=new Map;senderTotalMessages=new Map;receiverTotalMessages=new Map;senderTimeProcessing=new Map;receiverTimeProcessing=new Map;systemMessages=new Map;systemTopic;getReport(){const e={};this.nodes.forEach(((t,s)=>{e[s]=t.getReport()}));let t=0;this.senderTimeProcessing.forEach((e=>{t+=e}));let s=0;this.receiverTimeProcessing.forEach((e=>{s+=e}));const n=t+s;let i={messages:{total:0}};this.systemMessages.forEach((e=>{Object.keys(e).forEach((t=>{i[t]||(i[t]={}),Object.keys(e[t]).forEach((s=>{i[t][s]||(i[t][s]=0),i[t][s]+=e[t][s]}))}))}));let r=0,o=0,a=0,c=0,d=0;return this.pubsubTopics.forEach((e=>{o+=e.messagesSent,a+=e.messagesReceived,c+=e.bytesSent,d+=e.bytesReceived})),this.objectStores.forEach((e=>{r+=e.storage,o+=e.messagesSent,a+=e.messagesReceived,c+=e.bytesSent,d+=e.bytesReceived})),this.keyValueDatabases.forEach((e=>{r+=e.storage,o+=e.messagesSent,a+=e.messagesReceived,c+=e.bytesSent,d+=e.bytesReceived})),{STVolatility:this.getSTVolatility(),DTVolatility:this.getDTVolatility(),bitrate:this.getBitrate(),senderBitrate:this.getSenderBitrate(),receiverBitrate:this.getReceiverBitrate(),totalStorageSize:r,totalMessages:o+a,totalMessagesSent:o,totalMessagesReceived:a,totalBytes:c+d,totalBytesSent:c,totalBytesReceived:d,systemMessages:i,timeProcessing:n,nodes:e,pubsubTopics:Object.fromEntries(this.pubsubTopics),objectStores:Object.fromEntries(this.objectStores),keyValueDatabases:Object.fromEntries(this.keyValueDatabases)}}addRemoteNode(e){this.nodes.set(e,new d.StatsNode)}removeRemoteNode(e){this.nodes.delete(e)}processReports(e,t,s){t instanceof Array||this.processDataChannelReport(e,t);const n=this.nodes.get(e)?.processReports(t,s);n&&this.systemTopic.publish({sourceId:i.SYSTEM_TOPIC_INTERNAL,messageType:c.SystemMessageType.Stats,content:{type:a.StatsMessageType.StreamReport,data:{...n,nodeId:e}}})}processLocalReport(e){this.setScheduleTime(e.secheduleTime),this.setDurationTime(e.durationTime),this.systemTopic.publish({sourceId:i.SYSTEM_TOPIC_INTERNAL,messageType:c.SystemMessageType.Stats,content:{type:a.StatsMessageType.LocalReport,data:{STVolatility:this.getSTVolatility(),DTVolatility:this.getDTVolatility()}}})}processServiceReport(e,t,s){switch(t){case o.ContentMessageType.PubSubTopicStats:this.pubsubTopics.set(e,s);break;case o.ContentMessageType.ObjectStoreStats:this.objectStores.set(e,s);break;case o.ContentMessageType.KeyValueDatabaseStats:this.keyValueDatabases.set(e,s)}}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}getSTVolatility(){return this.scheduleTime>0&&this.scheduleTime-n.STATS_COLLECT_DELAY>0?(this.scheduleTime-n.STATS_COLLECT_DELAY)/n.STATS_COLLECT_DELAY:0}getDTVolatility(){return this.durationTime>0&&this.durationTime-n.STATS_COLLECT_DELAY/10>0?(this.durationTime-n.STATS_COLLECT_DELAY/10)/(n.STATS_COLLECT_DELAY/10):0}getSenderBitrate(){let e=0;return this.nodes.forEach((t=>{e+=t.senderBitrate})),e}getReceiverBitrate(){let e=0;return this.nodes.forEach((t=>{e+=t.receiverBitrate})),e}getBitrate(){let e=0;return this.nodes.forEach((t=>{e+=t.bitrate})),e}setScheduleTime(e){this.scheduleTime=e}setDurationTime(e){this.durationTime=e}processDataChannelReport(e,t){switch(t.origin){case r.PeerConnectionOrigin.Sender:this.processSenderReport(e,t);break;case r.PeerConnectionOrigin.Receiver:this.processReceiverReport(e,t)}}processSenderReport(e,t){this.senderTotalMessages.set(e,t.messagesSent),this.senderTimeProcessing.set(e,t.timeSending)}processReceiverReport(e,t){this.receiverTotalMessages.set(e,t.messagesReceived),this.receiverTimeProcessing.set(e,t.timeReceiving),this.systemMessages.set(e,t.systemMessages)}}},"./src/models/Stats/StatsDataChannel.ts":(e,t,s)=>{s.r(t),s.d(t,{StatsDataChannel:()=>r});var n=s("./src/constants/Stats.ts"),i=s("./src/interfaces/Connection/PeerConnection.ts");class r{senderCurrentTimestamp=0;senderPreviousTimestamp=0;receiverCurrentTimestamp=0;receiverPreviousTimestamp=0;senderCurrentBytes=0;senderPreviousBytes=0;receiverCurrentBytes=0;receiverPreviousBytes=0;senderTotalMessages=0;receiverTotalMessages=0;senderTimeProcessing=0;receiverTimeProcessing=0;roundTripTime=0;get bitrate(){return this.senderBitrate+this.receiverBitrate}get senderBitrate(){return this.senderCurrentTimestamp>0&&this.senderPreviousTimestamp>0&&Date.now()-this.senderCurrentTimestamp<n.STATS_REPORT_DELAY?(this.senderCurrentBytes-this.senderPreviousBytes)/(this.senderCurrentTimestamp-this.senderPreviousTimestamp)*8*1e3:0}get receiverBitrate(){return this.receiverCurrentTimestamp>0&&this.receiverPreviousTimestamp>0&&Date.now()-this.receiverCurrentTimestamp<n.STATS_REPORT_DELAY?(this.receiverCurrentBytes-this.receiverPreviousBytes)/(this.receiverCurrentTimestamp-this.receiverPreviousTimestamp)*8*1e3:0}processReport(e){switch(e.origin){case i.PeerConnectionOrigin.Sender:this.processSenderReport(e);break;case i.PeerConnectionOrigin.Receiver:this.processReceiverReport(e)}}getReport(){return{bitrate:this.bitrate,senderBitrate:this.senderBitrate,receiverBitrate:this.receiverBitrate,totalBytes:this.getTotalBytes(),senderTotalBytes:this.getSenderTotalBytes(),receiverTotalBytes:this.getReceiverTotalBytes(),totalMessages:this.senderTotalMessages+this.receiverTotalMessages,senderTotalMessages:this.senderTotalMessages,receiverTotalMessages:this.receiverTotalMessages,timeProcessing:this.senderTimeProcessing+this.receiverTimeProcessing,senderTimeProcessing:this.senderTimeProcessing,receiverTimeProcessing:this.receiverTimeProcessing,roundTripTime:this.roundTripTime}}getTotalBytes(){return this.senderCurrentBytes+this.receiverCurrentBytes}getSenderTotalBytes(){return this.senderCurrentBytes}getReceiverTotalBytes(){return this.receiverCurrentBytes}processSenderReport(e){this.setSenderTimestamp(e.timestamp),this.setBytes(e.bytesSent),this.senderTotalMessages=e.messagesSent,this.senderTimeProcessing=e.timeSending,this.roundTripTime=e.roundTripTime}processReceiverReport(e){this.setReceiverTimestamp(e.timestamp),this.setReceiverBytes(e.bytesReceived),this.receiverTotalMessages=e.messagesReceived,this.receiverTimeProcessing=e.timeReceiving}setSenderTimestamp(e){e>this.senderCurrentTimestamp&&(this.senderPreviousTimestamp=this.senderCurrentTimestamp,this.senderCurrentTimestamp=e)}setReceiverTimestamp(e){e>this.receiverCurrentTimestamp&&(this.receiverPreviousTimestamp=this.receiverCurrentTimestamp,this.receiverCurrentTimestamp=e)}setBytes(e){this.senderPreviousBytes=this.senderCurrentBytes,this.senderCurrentBytes=e}setReceiverBytes(e){this.receiverPreviousBytes=this.receiverCurrentBytes,this.receiverCurrentBytes=e}}},"./src/models/Stats/StatsManager.ts":(e,t,s)=>{s.r(t),s.d(t,{StatsManager:()=>h});var n=s("firebase/firestore"),i=s("./src/constants/Stats.ts"),r=s("./src/interfaces/Connection/PeerConnection.ts"),o=s("./src/interfaces/Content/Content.ts"),a=s("./src/interfaces/Utils/Logger.ts"),c=s("./src/models/Stats/Stats.ts"),d=s("./src/services/Firebase/FirebaseService.ts"),l=s("./src/utils/Interval/Interval.ts"),u=s("./src/utils/Logger/Logger.ts");class h{configs;remoteNodes=new Set;nextNodeId;statsCollection;statsReporting;statsReport=new c.Stats;constructor(e){this.configs=e,this.configs.mediator.registerSystemSource(this.statsReport),this.statsCollection=this.setupStatsCollection(),this.statsReporting=this.setupStatsReporting()}close(){this.configs.mediator.unregisterSystemSource(this.statsReport),this.statsReporting(),this.statsCollection()}addRemoteNode(e){this.remoteNodes.add(e),this.statsReport.addRemoteNode(e)}removeRemoteNode(e){this.remoteNodes.delete(e),this.statsReport.removeRemoteNode(e)}handlePeerConnectionSystemEvents(e){if(e.content.type===r.PeerConnectionMessageType.Stats){const{nodeId:t,streamId:s,stats:n}=e.content;this.statsReport.processReports(t,n,s)}}handleContentSystemEvents(e){switch(e.content.type){case o.ContentMessageType.ObjectStoreStats:case o.ContentMessageType.KeyValueDatabaseStats:case o.ContentMessageType.PubSubTopicStats:this.statsReport.processServiceReport(e.content.label,e.content.type,e.content.stats)}}setupStatsReporting(){return l.default.setInterval((()=>{const e=this.statsReport.getReport();u.default.log(a.LoggingChannels.Stats,"Stats: report",e),(0,n.addDoc)((0,n.collection)(d.default.getFirestore(),`developers/${this.configs.vendorId}/stats`),{clusterId:this.configs.clusterId,nodeId:this.configs.localNode.getId(),nodeType:this.configs.localNode.type,timestamp:(0,n.serverTimestamp)(),report:e}),u.default.logEvent("stats",{clusterId:this.configs.clusterId,nodeId:this.configs.localNode.getId(),nodeType:this.configs.localNode.type,data:{report:e}})}),i.STATS_REPORT_DELAY)}setupStatsCollection(){let e=!1,t=Date.now();return l.default.setInterval((async()=>{if(e)return;if(e=!0,0===this.remoteNodes.size)return delete this.nextNodeId,void(e=!1);const s=Date.now();this.findNextNodeId();try{await this.configs.mediator.collectStats(this.nextNodeId)}catch(e){}this.statsReport.processLocalReport({secheduleTime:s-t,durationTime:Date.now()-s}),t=s,e=!1}),i.STATS_COLLECT_DELAY)}findNextNodeId(){let e,t=!1;this.nextNodeId&&(this.remoteNodes.has(this.nextNodeId)||delete this.nextNodeId);for(const s of this.remoteNodes)if(e||(e=s),this.nextNodeId!==s){if(t)return void(this.nextNodeId=s)}else t=!0,delete this.nextNodeId;this.nextNodeId||(this.nextNodeId=e)}}},"./src/models/Stats/StatsNode.ts":(e,t,s)=>{s.r(t),s.d(t,{StatsNode:()=>a});var n=s("./src/constants/Stats.ts"),i=s("./src/interfaces/Connection/PeerConnection.ts"),r=s("./src/models/Stats/StatsStream.ts"),o=s("./src/models/Stats/StatsDataChannel.ts");class a{senderStreams=new Map;receiverStreams=new Map;dataChannel=new o.StatsDataChannel;get senderBitrate(){let e=0;return this.senderStreams.forEach((t=>{e+=t.bitrate})),e+=this.dataChannel.senderBitrate,e}get receiverBitrate(){let e=0;return this.receiverStreams.forEach((t=>{e+=t.bitrate})),e+=this.dataChannel.receiverBitrate,e}get bitrate(){return this.senderBitrate+this.receiverBitrate}processReports(e,t){const s=[],r=[];return e instanceof Array?e.forEach((e=>{e.forEach((e=>{n.STATS_RECEIVER_FILTERS.includes(e.type)&&s.push(e),n.STATS_SENDER_FILTERS.includes(e.type)&&r.push(e)}))})):this.dataChannel.processReport(e),s.length>0&&t?{...this.processInboundReports(t,s),origin:i.PeerConnectionOrigin.Receiver,streamId:t}:r.length>0&&t?{...this.processOutboundReports(t,r),origin:i.PeerConnectionOrigin.Sender,streamId:t}:void 0}getReport(){const e={};this.senderStreams.forEach(((t,s)=>{e[s]=t.getReport()}));const t={};return this.receiverStreams.forEach(((e,s)=>{t[s]=e.getReport()})),{bitrate:this.bitrate,senderBitrate:this.senderBitrate,receiverBitrate:this.receiverBitrate,senderStreams:e,receiverStreams:t,dataChannel:this.dataChannel.getReport()}}processInboundReports(e,t){return this.receiverStreams.has(e)||this.receiverStreams.set(e,new r.StatsStream),this.receiverStreams.get(e).processReports(t)}processOutboundReports(e,t){return this.senderStreams.has(e)||this.senderStreams.set(e,new r.StatsStream),this.senderStreams.get(e).processReports(t)}}},"./src/models/Stats/StatsStream.ts":(e,t,s)=>{s.r(t),s.d(t,{StatsStream:()=>r});var n=s("./src/models/Stats/StatsTrackAudio.ts"),i=s("./src/models/Stats/StatsTrackVideo.ts");class r{audio=new n.StatsTrackAudio;video=new i.StatsTrackVideo;get bitrate(){return this.audio.bitrate+this.video.bitrate}processReports(e){return e.forEach((e=>{switch(e.kind){case"audio":this.audio.processReport(e);break;case"video":this.video.processReport(e)}})),this.getReport()}getReport(){return{audio:this.audio.getReport(),video:this.video.getReport(),roundTripTime:this.getRoundTripTime(),AudioVideoDelay:this.getAudioVideoDelay(),bitrate:this.bitrate}}getRoundTripTime(){return Math.floor((this.audio.roundTripTime+this.video.roundTripTime)/2)}getAudioVideoDelay(){return this.audio.estimatedPlayoutTimestamp-this.video.estimatedPlayoutTimestamp}}},"./src/models/Stats/StatsTrack.ts":(e,t,s)=>{s.r(t),s.d(t,{StatsTrack:()=>i});var n=s("./src/constants/Stats.ts");class i{roundTripTime=0;estimatedPlayoutTimestamp=0;jitter=0;packetsLost=0;packets=0;currentTimestamp=0;previousTimestamp=0;currentBytes=0;previousBytes=0;get bitrate(){return this.currentTimestamp>0&&this.previousTimestamp>0&&Date.now()-this.currentTimestamp<n.STATS_REPORT_DELAY?(this.currentBytes-this.previousBytes)/(this.currentTimestamp-this.previousTimestamp)*8*1e3:0}processReport(e){switch(e.type){case n.STATS_INBOUND:this.processInboundReport(e);break;case n.STATS_OUTBOUND:this.processOutboundReport(e);break;case n.STATS_REMOTE_INBOUND:this.processRemoteInboundReport(e)}}getReport(){return{bitrate:this.bitrate,packetsLostPerc:this.getPacketsLostPerc(),roundTripTime:this.roundTripTime,jitter:this.jitter}}processInboundReport(e){this.setBytes(e.bytesReceived),this.setTimestamp(e.timestamp),this.packets=e.packetsReceived,this.packetsLost=e.packetsLost,void 0!==e.jitter?this.jitter=e.jitter:this.jitter=0,void 0!==e.estimatedPlayoutTimestamp?this.estimatedPlayoutTimestamp=e.estimatedPlayoutTimestamp:this.estimatedPlayoutTimestamp=0}processOutboundReport(e){this.setBytes(e.bytesSent),this.setTimestamp(e.timestamp),this.packets=e.packetsSent}processRemoteInboundReport(e){this.roundTripTime=1e3*e.roundTripTime,void 0!==e.jitter?this.jitter=e.jitter:this.jitter=0}getPacketsLostPerc(){return this.packets>0?this.packetsLost/this.packets:0}setTimestamp(e){e>this.currentTimestamp&&(this.previousTimestamp=this.currentTimestamp,this.currentTimestamp=e)}setBytes(e){this.previousBytes=this.currentBytes,this.currentBytes=e}}},"./src/models/Stats/StatsTrackAudio.ts":(e,t,s)=>{s.r(t),s.d(t,{StatsTrackAudio:()=>i});var n=s("./src/models/Stats/StatsTrack.ts");class i extends n.StatsTrack{}},"./src/models/Stats/StatsTrackVideo.ts":(e,t,s)=>{s.r(t),s.d(t,{StatsTrackVideo:()=>r});var n=s("./src/constants/Stats.ts"),i=s("./src/models/Stats/StatsTrack.ts");class r extends i.StatsTrack{frameTime=0;frameWidth=0;frameHeight=0;currentFrames=0;previousFrames=0;get fps(){return this.currentTimestamp>0&&this.previousTimestamp>0&&Date.now()-this.currentTimestamp<n.STATS_REPORT_DELAY?(this.currentFrames-this.previousFrames)/(this.currentTimestamp-this.previousTimestamp)*1e3:0}get timePerFrame(){return this.frameTime&&this.currentFrames&&this.currentFrames>0?this.frameTime/this.currentFrames:0}set frames(e){this.previousFrames=this.currentFrames,this.currentFrames=e}getReport(){return{...super.getReport(),FPS:this.fps,timePerFrame:this.timePerFrame,frameWidth:this.frameWidth,frameHeight:this.frameHeight}}processInboundReport(e){super.processInboundReport(e),this.frameTime=e.totalDecodeTime,this.frames=e.framesDecoded,this.frameWidth=e.frameWidth,this.frameHeight=e.frameHeight}processOutboundReport(e){super.processOutboundReport(e),this.frameTime=e.totalEncodeTime,this.frames=e.framesEncoded,this.frameWidth=e.frameWidth,this.frameHeight=e.frameHeight}}},"./src/models/Subscription/Helpers.ts":(e,t,s)=>{s.r(t),s.d(t,{getParts:()=>l,getPrefix:()=>d,getSubscriptionLabel:()=>a,getTopicLabel:()=>c,isBroadcast:()=>o,isReceiver:()=>r,isSender:()=>i});var n=s("./src/interfaces/Subscription/Subscription.ts");function i(e,t){return e.sourceId===t}function r(e,t){return e.destinationIds?.includes(t)??o(e)}function o(e){return void 0===e.destinationIds}function a(e,{contentType:t,label:s,remoteId:n}){return`${e}-${t}-${s}-${n}`}function c(e,t,s){return`${e}${t}${s}`}function d(e){return e===n.SubscriptionType.Incoming?"IncomingSubscription":"OutgoingSubscription"}function l(e,t){return{label:e.getInternalStreamId(),contentType:e.getContentType(),remoteId:t.getRemoteId(),supportsContentType:t.getSupportedContentTypes().includes(e.getContentType())}}},"./src/models/Subscription/IncomingSubscription.ts":(e,t,s)=>{s.r(t),s.d(t,{IncomingMediaSubscription:()=>a,IncomingSubscription:()=>o});var n=s("@crewdle/web-sdk-types"),i=s("./src/interfaces/Subscription/SubscriptionMessage.ts"),r=s("./src/interfaces/Subscription/SystemEvent.ts");class o{source;destination;systemTopic;constructor(e,t){this.source=e,this.destination=t}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}}class a extends o{source;destination;params;constructor(e,t,s){super(e,t),this.source=e,this.destination=t,this.params=s}subscribe(e,t,s){if(this.destination.getContentType()===n.ContentType.Media){const n={type:i.SubscriptionMessageType.SubscribeMediaStream,label:this.destination.getLabel(),ownerId:e,trackKinds:t??this.destination.getAvailableTrackKinds(),params:s};this.systemTopic.publish({sourceId:this.source.getLocalId(),destinationIds:[this.source.getRemoteId()],messageType:r.SystemMessageType.Subscription,content:n}),this.params=s}}update(e,t){if(this.destination.getContentType()===n.ContentType.Media){const s={type:i.SubscriptionMessageType.UpdateMediaStream,label:this.destination.getLabel(),ownerId:e,params:t};this.systemTopic.publish({sourceId:this.source.getLocalId(),destinationIds:[this.source.getRemoteId()],messageType:r.SystemMessageType.Subscription,content:s}),this.params=t}}unsubscribe(e,t,s){if(this.destination.getContentType()===n.ContentType.Media){const n={type:i.SubscriptionMessageType.UnsubscribeMediaStream,label:this.destination.getLabel(),ownerId:e,trackKinds:s??this.destination.getAvailableTrackKinds(),remainingTracks:t};this.systemTopic.publish({sourceId:this.source.getLocalId(),destinationIds:[this.source.getRemoteId()],messageType:r.SystemMessageType.Subscription,content:n})}}}},"./src/models/Subscription/IncomingSubscriptionManager.ts":(e,t,s)=>{s.r(t),s.d(t,{IncomingSubscriptionManager:()=>b});var n=s("@crewdle/web-sdk-types"),i=s("./src/constants/Subscription.ts"),r=s("./src/errors/SDKInternalError.ts"),o=s("./src/interfaces/Subscription/Subscription.ts"),a=s("./src/interfaces/Subscription/SubscriptionMessage.ts"),c=s("./src/models/Subscription/Helpers.ts"),d=s("./src/models/Subscription/IncomingSubscription.ts"),l=s("./src/models/Subscription/SubscriptionRequest.ts"),u=s("./src/models/Subscription/SubscriptionMaps.ts"),h=s("./src/utils/Interval/Interval.ts"),p=s("./src/utils/Logger/Logger.ts"),g=s("./src/utils/Queue/Queue.ts"),m=s("./src/utils/Queue/RetryQueue.ts");class b{configs;maxDistance;subscriptionRequests=new Map;subscriptionRequestsQueue=(0,m.createRetryQueue)(new g.SyncQueueCallback(this.requestSubscriptionAction.bind(this),(()=>h.default.wait(i.SUBSCRIPTION_REQUEST_RETRY_DELAY))),!0);subscriptionRequestTimeouts=new Map;maps;chosenAnswers=new Map;constructor(e,t){this.configs=e,this.maxDistance=t,this.maps=new u.SubscriptionMaps((({source:e,destination:t})=>c.getParts(t,e)))}createSubscription(e,t){const s=this.isMediaSource(e)&&this.isMediaDestination(t)?new d.IncomingMediaSubscription(e,t):new d.IncomingSubscription(e,t);this.maps.createSubscription(o.SubscriptionType.Incoming,s),this.configs.mediator.registerSystemSource(s)}removeSubscription(e,t,s=""){const n={contentType:t,label:e,remoteId:s},i=c.getSubscriptionLabel(o.SubscriptionType.Incoming,n),r=this.maps.subscriptions.get(i);r&&this.closeSubscription(r,i)}handleContentUnpublishMediaStream(e){this.removeRemoteStreamSubscription(e)}handleContentSubscribeMediaStream({label:e,ownerId:t,trackKinds:s,params:n}){this.requestSubscription(e,t,s,n)}handleContentUpdateMediaStream({ownerId:e,label:t,params:s}){const{subscriptionLabel:n}=this.getSubscriptionLabel(t,e),i=this.getMediaSubscription(n);i&&i.update(e,s)}handleContentUnsubscribeMediaStream({ownerId:e,label:t,trackKinds:s,remainingTracks:i}){const r=c.getSubscriptionLabel(o.SubscriptionType.Incoming,{contentType:n.ContentType.Media,label:t,remoteId:e});this.clearSubscriptionRequestTimeout(r);const a=this.subscriptionRequests.get(r);a&&(this.configs.mediator.unregisterSystemSource(a),this.subscriptionRequests.delete(r));const{parts:d,subscriptionLabel:l}=this.getSubscriptionLabel(t,e),u=this.getMediaSubscription(l);u&&(u.unsubscribe(e,i,s),0===i&&this.removeSubscription(d.label,d.contentType,d.remoteId))}handleSubscriptionRestartNeedMediaStream(e,{label:t,ownerId:s,trackKinds:i,streamId:a,params:l}){const u=c.getSubscriptionLabel(o.SubscriptionType.Incoming,{contentType:n.ContentType.Media,label:a,remoteId:e}),h=this.maps.subscriptions.get(u);if(!(h&&h instanceof d.IncomingMediaSubscription))throw new r.SDKInternalError(r.SDKInternalError.codes.SubscriptionRequestDoesNotExist,{label:u,ownerId:s});this.closeSubscription(h,u),this.requestSubscription(t,s,i,l)}handleSubscriptionProvideMediaStream(e,t){const{label:s,ownerId:i,trackKinds:a,params:d}=t,l=c.getSubscriptionLabel(o.SubscriptionType.Incoming,{contentType:n.ContentType.Media,label:s,remoteId:i});if(!this.subscriptionRequests.has(l))throw new r.SDKInternalError(r.SDKInternalError.codes.SubscriptionRequestDoesNotExist,{label:l,ownerId:i,streamId:t.streamId,requests:this.subscriptionRequests});const u=this.subscriptionRequests.get(l);if(a.length===u.getTracks().length&&a.every((e=>u.getTracks().includes(e))))try{const n=u.handleSubscriptionSystemEvents(e,t);if(!n)return;this.subscribe(n,i,s,l,a)}catch(e){return void this.handleNoAnswer(s,i,a,d)}}handleSubscriptionMediaStreamUnavailable(e,{label:t,ownerId:s,trackKinds:n}){const i=this.configs.mediator.getRemoteMediaStream(s,t);if(!i)return;const r=i.getInternalStreamId(),o=i.getSubscribedTracks();o.some((e=>n.includes(e)))&&this.findNewMediaSubscription(e,t,r,s,o)}handleContentRemoteMediaStreamTrackFail({label:e,providerId:t,ownerId:s,streamId:n,trackKinds:i}){this.findNewMediaSubscription(t,e,n,s,i)}handleOptimizationConnectionSuccess(e){for(const t of this.chosenAnswers.values()){const{streamLabel:s,ownerId:n,trackKinds:i,params:r}=t;if(!n||!i||!s)return;this.subscriptionRequestsQueue.push({label:s,ownerId:n,trackKinds:i,params:r,remoteId:e})}}removeSubscriptionsForNode(e){this.maps.subscriptions.forEach(((t,s)=>{if(s.endsWith(e)){if(t.destination.getContentType()===n.ContentType.Media){const s=t.destination;if(s.getSubscribedTracks().length>0){const t={type:a.SubscriptionMessageType.MediaStreamUnavailable,label:s.getLabel(),ownerId:s.getOwnerId(),trackKinds:s.getSubscribedTracks()};return void this.handleSubscriptionMediaStreamUnavailable(e,t)}}this.closeSubscription(t,s)}}))}close(){this.maps.subscriptions.forEach(this.closeSubscription.bind(this))}subscribe(e,t,s,n,i){const a=this.configs.mediator.getConnection(e.nodeId),l=this.configs.mediator.getRemoteMediaStream(t,s);this.clearSubscriptionRequestTimeout(n),this.subscriptionRequests.has(n)&&(this.configs.mediator.unregisterSystemSource(this.subscriptionRequests.get(n)),this.subscriptionRequests.delete(n)),this.cleanOldSubscription(e,t,s,l),l.setInternalId(e.streamId),l.setProviderId(e.nodeId);const u=c.getParts(l,a),h=c.getSubscriptionLabel(o.SubscriptionType.Incoming,u);this.maps.subscriptions.has(h)||this.createSubscription(a,l);const g=this.maps.subscriptions.get(h);if(!(g&&g instanceof d.IncomingMediaSubscription))throw new r.SDKInternalError(r.SDKInternalError.codes.SubscriptionRequestDoesNotExist,{label:n,ownerId:t});p.default.logEvent("subscription",{clusterId:this.configs.clusterId,nodeId:this.configs.localNode.getId(),nodeType:this.configs.localNode.type,data:{subscriptionLabel:h,chosenAnswer:e}}),this.chosenAnswers.set(h,e),g.subscribe(t,i,e.params)}removeRemoteStreamSubscription({ownerId:e,label:t}){const s=this.configs.mediator.getRemoteMediaStream(e,t),[n,i]=Array.from(this.maps.subscriptions.entries()).find((([e,t])=>-1!==e.indexOf(s.getInternalStreamId())));return this.closeSubscription(i,n)}closeSubscription(e,t){this.configs.mediator.unregisterSystemSource(e),this.maps.closeSubscription(e,t)}isMediaSource(e){return e.getSupportedContentTypes().includes(n.ContentType.Media)}isMediaDestination(e){return e.getContentType()===n.ContentType.Media}async handleNoAnswer(e,t,s,a){await h.default.wait(i.SUBSCRIPTION_RETRY_DELAY);const d=c.getSubscriptionLabel(o.SubscriptionType.Incoming,{contentType:n.ContentType.Media,label:e,remoteId:t});this.clearSubscriptionRequestTimeout(d);const l=this.subscriptionRequests.get(d);if(!l)throw new r.SDKInternalError(r.SDKInternalError.codes.SubscriptionRequestDoesNotExist,{label:d,ownerId:t});const u=this.configs.mediator.getConnections((e=>e.isConnected())),p=this.configs.mediator.getDistance(this.configs.localNode.getId(),t);l.reset(u.map((e=>e.getRemoteId())),p);try{l.sendRequest(this.configs.localNode.getId(),t,e,s,a),this.setSubscriptionRequestTimeout(e,t,s,a,d,l)}catch(n){this.subscriptionRequestsQueue.push({label:e,ownerId:t,trackKinds:s,params:a})}}requestSubscription(e,t,s,n){this.subscriptionRequestsQueue.push({label:e,ownerId:t,trackKinds:s,params:n})}requestSubscriptionAction({label:e,ownerId:t,trackKinds:s,params:i,remoteId:r}){if(!this.configs.mediator.getRemoteMediaStream(t,e))return;if(!this.configs.mediator.getLocalNode().getRank())throw new Error("Local node rank is not set");if(r){const s=this.configs.mediator.getRemoteNodes().find((e=>e.getId()===r)),n=s?.getRank();if(!s||!n)throw new Error("Missing remote node or rank");const i=this.configs.mediator.getRemoteNodes().find((e=>e.getId()===t)),o=i?.getRank();if(!i||!o)throw new Error("Missing owner node or rank");const a=this.chosenAnswers.get(e);if(a){const e=this.configs.mediator.getRemoteNodes().find((e=>e.getId()===a.nodeId)),t=e?.getRank();if(!e||!t)throw new Error("Retry request with chosen answer node or rank");if(Math.abs(t-o)<Math.abs(n-o))return}}const a=this.configs.mediator.getConnections((e=>e.isConnected()&&(!r||e.getRemoteId()===r)));if(!a.length||0===a.length)throw new Error("No connections available to send subscription request");const d=this.configs.mediator.getDistance(this.configs.localNode.getId(),t),u=c.getSubscriptionLabel(o.SubscriptionType.Incoming,{contentType:n.ContentType.Media,label:e,remoteId:t});if(this.subscriptionRequests.has(u)){if(r)throw new Error("We need to treat requests sequentially when the remote id is set");const e=this.subscriptionRequests.get(u).getTracks();if(e.length===s.length&&e.every((e=>s.includes(e))))return;this.configs.mediator.unregisterSystemSource(this.subscriptionRequests.get(u)),this.subscriptionRequests.delete(u),s=Array.from(new Set(s.concat(e))),this.clearSubscriptionRequestTimeout(u)}const h=new l.SubscriptionRequest(a.map((e=>e.getRemoteId())),d,this.maxDistance,s);this.configs.mediator.registerSystemSource(h),this.subscriptionRequests.set(u,h),h.sendRequest(this.configs.localNode.getId(),t,e,s,i),this.setSubscriptionRequestTimeout(e,t,s,i,u,h)}clearSubscriptionRequestTimeout(e){this.subscriptionRequestTimeouts.has(e)&&(clearTimeout(this.subscriptionRequestTimeouts.get(e)),this.subscriptionRequestTimeouts.delete(e))}setSubscriptionRequestTimeout(e,t,s,n,r,o){this.clearSubscriptionRequestTimeout(r),this.subscriptionRequestTimeouts.set(r,setTimeout((()=>{this.subscriptionRequestTimeouts.delete(r);try{const n=o.chooseAnswer();this.subscribe(n,t,e,r,s)}catch(i){this.handleNoAnswer(e,t,s,n)}}),i.SUBSCRIPTION_REQUEST_TIMEOUT))}findNewMediaSubscription(e,t,s,i,r){const{subscriptionLabel:o}=this.getSubscriptionLabel(t,i),a=this.getMediaSubscription(o),c=a?.params;a&&(a.unsubscribe(i,0),this.removeSubscription(s,n.ContentType.Media,e)),this.requestSubscription(t,i,r,c)}getMediaSubscription(e){const t=this.maps.subscriptions.get(e);if(t){if(!(t instanceof d.IncomingMediaSubscription))throw new r.SDKInternalError(r.SDKInternalError.codes.InvalidSubscription,{label:e,subscription:t});return t}}getSubscriptionLabel(e,t){const s=this.getPartsForSubscriptionLabel(e,t);return{parts:s,subscriptionLabel:c.getSubscriptionLabel(o.SubscriptionType.Incoming,s)}}getPartsForSubscriptionLabel(e,t){const s=this.configs.mediator.getRemoteMediaStream(t,e),i=s.getProviderId();if(!i)throw new r.SDKInternalError(r.SDKInternalError.codes.RemoteMediaStreamMissingProviderId,{label:e,streamId:s.getInternalStreamId(),ownerId:t,localId:this.configs.localNode.getId()});return{contentType:n.ContentType.Media,label:s.getInternalStreamId(),remoteId:i}}cleanOldSubscription(e,t,s,n){const i=n.getProviderId();if(i&&i!==e.nodeId){const{parts:e,subscriptionLabel:n}=this.getSubscriptionLabel(s,t),i=this.getMediaSubscription(n);i&&(i.unsubscribe(t,0),this.removeSubscription(e.label,e.contentType,e.remoteId))}}}},"./src/models/Subscription/OutgoingSubscriptionManager.ts":(e,t,s)=>{s.r(t),s.d(t,{OutgoingSubscriptionManager:()=>h});var n=s("@crewdle/web-sdk-types"),i=s("./src/constants/Node.ts"),r=s("./src/constants/System.ts"),o=s("./src/interfaces/Subscription/Subscription.ts"),a=s("./src/interfaces/Subscription/SubscriptionMessage.ts"),c=s("./src/interfaces/Subscription/SystemEvent.ts"),d=s("./src/models/Subscription/Helpers.ts"),l=s("./src/models/Subscription/SubscriptionMaps.ts"),u=s("./src/models/Content/RemoteMediaStream.ts");class h{configs;maxOutgoingSubscriptions;maps;constructor(e,t){this.configs=e,this.maxOutgoingSubscriptions=t,this.maps=new l.SubscriptionMaps((({source:e,destination:t})=>d.getParts(e,t)))}createSubscription(e,t){const s={source:e,destination:t};this.maps.createSubscription(o.SubscriptionType.Outgoing,s)}removeSubscription(e,t,s=""){const n={contentType:t,label:e,remoteId:s};this.maps.removeSubscription(n,o.SubscriptionType.Outgoing)}handleSubscriptionSubscribeMediaStream(e,t){let s;s=t.ownerId!==this.configs.localNode.getId()?this.configs.mediator.getRemoteMediaStream(t.ownerId,t.label):this.configs.mediator.getLocalMediaStream(t.label);const i=d.getSubscriptionLabel(o.SubscriptionType.Outgoing,{contentType:n.ContentType.Media,label:s.getShareableStreamId(),remoteId:e}),r=this.getNumberOutgoingSubscriptions();if(!this.maps.subscriptions.has(i)&&r>=this.maxOutgoingSubscriptions)return{type:a.SubscriptionMessageType.RestartNeedMediaStream,ownerId:t.ownerId,label:t.label,streamId:s.getShareableStreamId(),trackKinds:t.trackKinds,params:t.params};s instanceof u.RemoteMediaStream&&!s.isSubscribed(t.trackKinds)&&s.subscribe(t.params),this.maps.subscriptions.has(i)||this.createSubscription(s.getShareableStream(e),this.configs.mediator.getConnection(e))}handleSubscriptionUnsubscribeMediaStream(e,{label:t,ownerId:s,remainingTracks:i}){if(i>0)return;let r;r=s!==this.configs.localNode.getId()?this.configs.mediator.getRemoteMediaStream(s,t):this.configs.mediator.getLocalMediaStream(t);const o=r.getShareableStreamId(),a=n.ContentType.Media;this.removeSubscription(o,a,e)}handleContentUnsubscribeMediaStream(e,{label:t,ownerId:s,trackKinds:n}){if(e!==r.SYSTEM_TOPIC_INTERNAL)return[];let i=[];for(const e of this.maps.subscriptions){const{source:r,destination:o}=e[1];r.getLabel()===t&&r.getOwnerId()===s&&i.push({sourceId:this.configs.localNode.getId(),destinationIds:[o.getRemoteId()],messageType:c.SystemMessageType.Subscription,content:{type:a.SubscriptionMessageType.MediaStreamUnavailable,label:t,ownerId:s,trackKinds:n}})}return i}handleSubscriptionNeedMediaStream(e,t){const{label:s,ownerId:n,trackKinds:r,params:o}=t,{hasTracks:c,streamId:d,hasResolution:l,distance:u,subscriptionLabel:h}=this.getSubscriptionInfo(e,t);let p=this.getNumberOutgoingSubscriptions()<this.maxOutgoingSubscriptions&&(c||u>-1)?a.SubscriptionMessageType.CanProvideMediaStream:a.SubscriptionMessageType.CannotProvideMediaStream;const g=u<0?i.NODE_DISTANCE_MAX:u;let m=c?l?g:g+i.NODE_DISTANCE_RESOLUTION:g+i.NODE_DISTANCE_TRACKS;return h&&this.maps.subscriptions.has(h)&&(c&&(m=0),p=a.SubscriptionMessageType.CanProvideMediaStream),{type:p,cost:m,distance:u,label:s,ownerId:n,streamId:d,trackKinds:r,params:o}}handleContentUnpublishMediaStream(e){const{label:t,ownerId:s}=e,i=this.configs.mediator.getRemoteMediaStream(s,t);this.maps.subscriptions.forEach((e=>{if(e.source.getInternalStreamId()===i.getShareableStreamId()){const t=e.destination;this.removeSubscription(i.getShareableStreamId(),n.ContentType.Media,t.getRemoteId())}}))}handleContentCloseMediaStream({label:e}){const t=this.configs.mediator.getLocalMediaStream(e);this.maps.subscriptions.forEach((e=>{if(e.source.getInternalStreamId()===t.getShareableStreamId()){const s=e.destination;this.removeSubscription(t.getShareableStreamId(),n.ContentType.Media,s.getRemoteId())}}))}removeSubscriptionsForNode(e){this.maps.removeSubscriptionsForNode(e)}close(){this.maps.subscriptions.forEach(this.closeSubscription.bind(this))}closeSubscription(e,t){this.maps.closeSubscription(e,t)}getSubscriptionInfo(e,{label:t,ownerId:s,trackKinds:i,params:r}){if(s!==this.configs.localNode.getId()){const a=this.configs.mediator.getRemoteMediaStream(s,t);return a&&a.getProviderId()!==e?{hasTracks:a.hasTracks(i),hasResolution:this.canProvideResolution(a.getResolution(),r),streamId:a.getShareableStreamId(),distance:this.configs.mediator.getDistance(e,s),subscriptionLabel:d.getSubscriptionLabel(o.SubscriptionType.Outgoing,{contentType:n.ContentType.Media,label:a.getShareableStreamId(),remoteId:e})}:{hasTracks:!1,hasResolution:!1,streamId:"",distance:-1,subscriptionLabel:null}}const a=this.configs.mediator.getLocalMediaStream(t);return{hasTracks:!0,hasResolution:!0,streamId:a.getShareableStreamId(),distance:0,subscriptionLabel:d.getSubscriptionLabel(o.SubscriptionType.Outgoing,{contentType:n.ContentType.Media,label:a.getShareableStreamId(),remoteId:e})}}getNumberOutgoingSubscriptions(){return Array.from(this.maps.subscriptions.entries()).filter((([e,{source:t}])=>e.startsWith(o.SubscriptionType.Outgoing)&&t.getContentType()===n.ContentType.Media)).length}canProvideResolution(e,t){if(!t||!t.video||"boolean"==typeof t.video||!t.video.maxResolution)return!0;const{width:s,height:n}=t.video.maxResolution;return e.width>=s&&e.height>=n}}},"./src/models/Subscription/SubscriptionManager.ts":(e,t,s)=>{s.r(t),s.d(t,{SubscriptionManager:()=>p});var n=s("@crewdle/web-sdk-types"),i=s("./src/errors/EarlyReturnError.ts"),r=s("./src/errors/SDKInternalError.ts"),o=s("./src/interfaces/Connection/PeerConnection.ts"),a=s("./src/interfaces/Content/Content.ts"),c=s("./src/interfaces/Node/NodeMessage.ts"),d=s("./src/interfaces/Subscription/SubscriptionMessage.ts"),l=s("./src/interfaces/Subscription/SystemEvent.ts"),u=s("./src/models/Subscription/IncomingSubscriptionManager.ts"),h=s("./src/models/Subscription/OutgoingSubscriptionManager.ts");class p{configs;maxOutgoingSubscriptions;maxDistance;systemTopic;incomingManager;outgoingManager;constructor(e,t,s){this.configs=e,this.maxOutgoingSubscriptions=t,this.maxDistance=s,this.configs.mediator.registerSystemSource(this),this.incomingManager=new u.IncomingSubscriptionManager(this.configs,this.maxDistance),this.outgoingManager=new h.OutgoingSubscriptionManager(this.configs,this.maxOutgoingSubscriptions)}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}close(){this.incomingManager.close(),this.outgoingManager.close(),this.configs.mediator.unregisterSystemSource(this)}createIncomingSubscription(e,t){this.incomingManager.createSubscription(e,t)}createOutgoingSubscription(e,t){this.outgoingManager.createSubscription(e,t)}removeIncomingSubscription(e,t,s=""){this.incomingManager.removeSubscription(e,t,s)}removeOutgoingSubscription(e,t,s=""){try{this.outgoingManager.removeSubscription(e,t,s)}catch(e){if(e instanceof r.SDKInternalError&&e.code===r.SDKInternalError.codes.InvalidSubscription)return}}handleSubscriptionSystemEvents(e){switch(e.content.type){case d.SubscriptionMessageType.SubscribeMediaStream:this.handleSubscriptionSubscribeMediaStream(e.sourceId,e.content);break;case d.SubscriptionMessageType.UnsubscribeMediaStream:this.outgoingManager.handleSubscriptionUnsubscribeMediaStream(e.sourceId,e.content);break;case d.SubscriptionMessageType.NeedMediaStream:this.handleSubscriptionNeedMediaStream(e.sourceId,e.content);break;case d.SubscriptionMessageType.RestartNeedMediaStream:this.incomingManager.handleSubscriptionRestartNeedMediaStream(e.sourceId,e.content);break;case d.SubscriptionMessageType.CanProvideMediaStream:case d.SubscriptionMessageType.CannotProvideMediaStream:this.incomingManager.handleSubscriptionProvideMediaStream(e.sourceId,e.content);break;case d.SubscriptionMessageType.MediaStreamUnavailable:this.incomingManager.handleSubscriptionMediaStreamUnavailable(e.sourceId,e.content)}}handleContentSystemEvents(e){switch(e.content.type){case a.ContentMessageType.UnpublishMediaStream:this.incomingManager.handleContentUnpublishMediaStream(e.content),this.outgoingManager.handleContentUnpublishMediaStream(e.content);break;case a.ContentMessageType.SubscribeMediaStream:this.incomingManager.handleContentSubscribeMediaStream(e.content);break;case a.ContentMessageType.UpdateMediaStream:this.incomingManager.handleContentUpdateMediaStream(e.content);break;case a.ContentMessageType.UnsubscribeMediaStream:this.handleContentUnsubscribeMediaStream(e.sourceId,e.content);break;case a.ContentMessageType.CloseMediaStream:this.outgoingManager.handleContentCloseMediaStream(e.content);break;case a.ContentMessageType.ClosePubSubTopic:this.handleContentClosePubSubTopic(e.content);break;case a.ContentMessageType.CloseObjectStoreBucket:this.handleContentCloseObjectStore(e.content);break;case a.ContentMessageType.CloseKeyValueDatabase:this.handleContentCloseKeyValueDatabase(e.content);break;case a.ContentMessageType.RemoteMediaStreamTrackFail:this.incomingManager.handleContentRemoteMediaStreamTrackFail(e.content)}}handleNodeSystemEvents({content:e}){e.type===c.NodeMessageType.NodeLeave&&this.removeSubscriptionsForNode(e)}handlePeerConnectionSystemEvents(e){e.content.type===o.PeerConnectionMessageType.OptimizationConnectionSuccess&&this.incomingManager.handleOptimizationConnectionSuccess(e.sourceId)}handleContentUnsubscribeMediaStream(e,t){this.incomingManager.handleContentUnsubscribeMediaStream(t),this.outgoingManager.handleContentUnsubscribeMediaStream(e,t).forEach((e=>this.systemTopic.publish(e)))}handleSubscriptionSubscribeMediaStream(e,t){const s=this.outgoingManager.handleSubscriptionSubscribeMediaStream(e,t);if(s&&(this.systemTopic.publish({sourceId:this.configs.localNode.getId(),destinationIds:[e],messageType:l.SystemMessageType.Subscription,content:s}),s.type===d.SubscriptionMessageType.RestartNeedMediaStream))throw new i.EarlyReturnError("Restart NeedMediaStream")}handleSubscriptionNeedMediaStream(e,t){const s=this.outgoingManager.handleSubscriptionNeedMediaStream(e,t);this.systemTopic.publish({sourceId:this.configs.localNode.getId(),destinationIds:[e],messageType:l.SystemMessageType.Subscription,content:s})}handleContentCloseObjectStore({label:e}){this.removeIncomingSubscription(e,n.ContentType.ObjectStore),this.removeOutgoingSubscription(e,n.ContentType.ObjectStore)}handleContentCloseKeyValueDatabase({label:e}){this.removeIncomingSubscription(e,n.ContentType.KeyValueDatabase),this.removeOutgoingSubscription(e,n.ContentType.KeyValueDatabase)}handleContentClosePubSubTopic({label:e}){this.removeIncomingSubscription(e,n.ContentType.PubSub),this.removeOutgoingSubscription(e,n.ContentType.PubSub)}removeSubscriptionsForNode({id:e}){this.incomingManager.removeSubscriptionsForNode(e),this.outgoingManager.removeSubscriptionsForNode(e)}}},"./src/models/Subscription/SubscriptionMaps.ts":(e,t,s)=>{s.r(t),s.d(t,{SubscriptionMaps:()=>o});var n=s("./src/errors/SDKInternalError.ts"),i=s("./src/models/Subscription/Helpers.ts"),r=s("./src/models/Subscription/Topic.ts");class o{maps={topics:new Map,subscriptions:new Map};getPartsFromSubscription;constructor(e){this.getPartsFromSubscription=e}get subscriptions(){return this.maps.subscriptions}get topics(){return this.maps.topics}createSubscription(e,t){const s=this.getPartsFromSubscription(t),r=(0,i.getPrefix)(e);if(!s.supportsContentType)throw new n.SDKInternalError(n.SDKInternalError.codes.InvalidSubscription,{message:`${r}: ${s.remoteId} does not support content type ${s.contentType}`,subscriptionType:e,subscription:t,subscriptonParts:s});const o=(0,i.getSubscriptionLabel)(e,s);if(this.maps.subscriptions.has(o))throw new n.SDKInternalError(n.SDKInternalError.codes.InvalidSubscription,{message:`${r}: ${o} already exists`,subscriptionType:e,subscription:t,subscriptonParts:s});this.maps.subscriptions.set(o,t),this.createTopic(s,t)}removeSubscription(e,t){const s=(0,i.getSubscriptionLabel)(t,e),r=this.maps.subscriptions.get(s);if(!r)throw new n.SDKInternalError(n.SDKInternalError.codes.InvalidSubscription,{message:`${(0,i.getPrefix)(t)}: ${s} does not exists`,subscriptionType:t,subscription:r,subscriptonParts:e});this.closeSubscription(r,s,e)}closeSubscription(e,t,s){s=s||this.getPartsFromSubscription(e),this.maps.subscriptions.delete(t),this.removeTopic(s,e)}createTopic(e,{source:t,destination:s}){const{contentType:n,label:o,remoteId:a}=e,c=(0,i.getTopicLabel)(n,o,a),d=new r.Topic(c,n);d.registerSource(t),d.registerDestination(s),this.maps.topics.set(d.getLabel(),d)}removeTopic(e,t){const{contentType:s,label:n,remoteId:r}=e,o=(0,i.getTopicLabel)(s,n,r),a=this.maps.topics.get(o);a&&(this.closeTopic(a,t),this.maps.topics.delete(o))}closeTopic(e,{source:t,destination:s}){e.unregisterSource(t),e.unregisterDestination(s)}removeSubscriptionsForNode(e){this.maps.subscriptions.forEach(((t,s)=>{s.endsWith(e)&&this.closeSubscription(t,s)}))}}},"./src/models/Subscription/SubscriptionRequest.ts":(e,t,s)=>{s.r(t),s.d(t,{SubscriptionRequest:()=>l});var n=s("./src/constants/Subscription.ts"),i=s("./src/errors/SDKInternalError.ts"),r=s("./src/interfaces/Subscription/Subscription.ts"),o=s("./src/interfaces/Subscription/SubscriptionMessage.ts"),a=s("./src/interfaces/Subscription/SystemEvent.ts"),c=s("./src/interfaces/Utils/Logger.ts"),d=s("./src/utils/Logger/Logger.ts");class l{currentDistance;maxDistance;tracks;systemTopic;answers=new Set;startTime=Date.now();params;retryCount=0;constructor(e,t,s,n){this.currentDistance=t,this.maxDistance=s,this.tracks=n,e.forEach((e=>{this.answers.add({nodeId:e,type:r.SubscriptionRequestType.Waiting})}))}getTracks(){return this.tracks}registerSystemPublisher(e){this.systemTopic=e}unregisterSystemPublisher(){delete this.systemTopic}reset(e,t){this.startTime=Date.now(),this.answers.clear(),e.forEach((e=>{this.answers.add({nodeId:e,type:r.SubscriptionRequestType.Waiting})})),this.retryCount+=1,this.currentDistance=t}sendRequest(e,t,s,r,l){if(this.retryCount>n.SUBSCRIPTION_MAX_RETRY_COUNT)throw new i.SDKInternalError(i.SDKInternalError.codes.SubscriptionRequestNoAnswer,{answers:Array.from(this.answers).map((e=>({nodeId:e.nodeId,type:e.type})))});const u=Array.from(this.answers).map((e=>e.nodeId));this.params=l,this.systemTopic.publish({sourceId:e,destinationIds:u,messageType:a.SystemMessageType.Subscription,content:{type:o.SubscriptionMessageType.NeedMediaStream,label:s,ownerId:t,trackKinds:r,params:l}}),d.default.log(c.LoggingChannels.Subscription,"Send request",e,u)}handleSubscriptionSystemEvents(e,t){switch(t.type){case o.SubscriptionMessageType.CanProvideMediaStream:{const s=this.currentDistance>=t.distance&&t.distance<=this.maxDistance,n=Array.from(this.answers).find((t=>t.nodeId===e));n.type=s?r.SubscriptionRequestType.Accepted:r.SubscriptionRequestType.Rejected,n.cost=t.cost,n.distance=t.distance,n.streamId=t.streamId,n.roundTripTime=Date.now()-this.startTime,n.params=this.params,n.ownerId=t.ownerId,n.trackKinds=t.trackKinds,n.streamLabel=t.label,d.default.log(c.LoggingChannels.Subscription,(s?"Accepted":"Rejected")+" answer",n);break}case o.SubscriptionMessageType.CannotProvideMediaStream:{const t=Array.from(this.answers).find((t=>t.nodeId===e));t.type=r.SubscriptionRequestType.Rejected,d.default.log(c.LoggingChannels.Subscription,"Rejected answer",t);break}}if(this.canChooseAnswer())return this.chooseAnswer()}chooseAnswer(){const e=Array.from(this.answers).filter((e=>e.type===r.SubscriptionRequestType.Accepted)).sort(((e,t)=>e.cost===t.cost?e.roundTripTime-t.roundTripTime:e.cost-t.cost));if(0===e.length)throw new i.SDKInternalError(i.SDKInternalError.codes.SubscriptionRequestNoAnswer,{answers:Array.from(this.answers).map((e=>({nodeId:e.nodeId,type:e.type})))});return d.default.log(c.LoggingChannels.Subscription,"Chosen answer",e[0],this.answers),e[0]}canChooseAnswer(){for(const e of this.answers)if(e.type===r.SubscriptionRequestType.Waiting)return!1;return!0}}},"./src/models/Subscription/SystemTopic.ts":(e,t,s)=>{s.r(t),s.d(t,{SystemTopic:()=>d});var n=s("uuid"),i=s("@crewdle/web-sdk-types"),r=s("./src/constants/System.ts"),o=s("./src/interfaces/Utils/Logger.ts"),a=s("./src/utils/Logger/Logger.ts"),c=s("./src/utils/Observer/Observer.ts");class d{label;listener=(0,c.createObserver)();constructor(){this.label=r.SYSTEM_TOPIC}getLabel(){return this.label}getContentType(){return i.ContentType.Data}registerSource(e){e.registerSystemPublisher(this)}unregisterSource(e){e.unregisterSystemPublisher()}publish(e){a.default.log(o.LoggingChannels.Events,"SystemTopic publish",e.sourceId,e),this.listener.publish({topicLabel:this.label,contentType:i.ContentType.Data,uuid:e.uuid??(0,n.v4)(),recipients:e.recipients??[],...e})}subscribe(e){return this.listener.subscribe(e)}}},"./src/models/Subscription/Topic.ts":(e,t,s)=>{s.r(t),s.d(t,{Topic:()=>r});var n=s("uuid"),i=s("./src/utils/Observer/Observer.ts");class r{label;contentType;listener=(0,i.createObserver)();constructor(e,t){this.label=e,this.contentType=t}getLabel(){return this.label}getContentType(){return this.contentType}registerSource(e){e.registerPublisher(this)}registerDestination(e){e.registerSubscriber(this)}publish(e){this.listener.publish({topicLabel:this.label,contentType:this.contentType,uuid:(0,n.v4)(),recipients:[],...e})}subscribe(e){return this.listener.subscribe(e)}unregisterSource(e){e.unregisterPublisher(this)}unregisterDestination(e){e.unregisterSubscriber(this)}}},"./src/public/errors/SDKClientError.ts":(e,t,s)=>{var n;s.r(t),s.d(t,{SDKClientError:()=>i,SDKClientErrorCodes:()=>n}),function(e){e.ClusterAlreadyJoined="cluster-already-joined",e.FeatureNotEnabled="feature-not-enabled",e.ObjectStoreAlreadyExists="object-store-already-exists",e.ObjectStoreAlreadySubscribed="object-store-already-subscribed",e.ObjectStoreDoesNotExist="object-store-stream-does-not-exist",e.ObjectStoreNameNotString="object-store-name-not-string",e.ObjectStoreInvalidPayload="object-store-invalid-payload",e.ObjectStoreInvalidPath="object-store-invalid-path",e.ObjectStoreNotInSync="object-store-not-in-sync",e.InternalSDKError="internal-sdk-error",e.KeyValueDatabaseAlreadyExists="key-value-database-already-exists",e.KeyValueDatabaseDoesNotExist="key-value-database-does-not-exist",e.KeyValueDatabaseIndexNotFound="key-value-database-index-not-found",e.KeyValueDatabaseInvalidQuery="key-value-database-invalid-query",e.KeyValueDatabaseInvalidValue="key-value-database-invalid-value",e.KeyValueDatabaseNameNotString="key-value-database-name-not-string",e.KeyValueDatabaseNotOpen="key-value-database-not-open",e.KeyValueDatabaseTableNameReserved="key-value-database-table-name-reserved",e.KeyValueDatabaseTableNotFound="key-value-database-table-not-found",e.KeyValueDatabaseInvalidLayout="key-value-database-invalid-layout",e.LocalMediaStreamAlreadyExists="local-media-stream-already-exists",e.LocalMediaStreamNoAudioContext="local-media-stream-no-audio-context",e.PubSubTopicAlreadyExists="pub-sub-topic-already-exists",e.PubSubTopicDoesNotExist="pub-sub-topic-does-not-exist",e.PubSubTopicNameNotString="pub-sub-topic-name-not-string",e.PubSubTopicAlreadySubscribed="pub-sub-topic-already-subscribed",e.QueryBuilderInvalidArgument="query-helper-invalid-argument",e.RemoteMediaStreamAlreadyExists="remote-media-stream-already-exists",e.RemoteMediaStreamInvalidSubscriptionParams="remote-media-stream-invalid-subscription-params",e.SubscriptionRequestInProgress="subscription-request-in-progress",e.NodeNotAuthenticated="node-not-authenticated",e.NodeInvalidType="node-invalid-type",e.NodeTypeNotSupported="node-type-not-supported"}(n||(n={}));class i extends Error{code;constructor(e,t){super(t),this.code=e}}},"./src/public/models/Content/KeyValueDatabaseLayoutBuilder.ts":(e,t,s)=>{s.r(t),s.d(t,{LayoutBuilder:()=>n,TableBuilder:()=>i});class n{layout;constructor(e){this.layout={tables:{},version:e}}static validateLayout(e){for(const t in e){if("version"!==t&&"tables"!==t)return[!1,`Invalid key '${t}' in layout`];if("tables"===t)for(const t in e.tables){if("string"!=typeof t)return[!1,`Invalid table name '${t}'`];for(const s in e.tables[t]){if("indexes"!==s)return[!1,`Invalid key '${s}' in table '${t}'`];const n=e.tables[t][s]??[];for(const e of n)if(void 0===e.keyPath||"string"!=typeof e.keyPath)return[!1,`Invalid index in table '${t}': missing or invalid keyPath`]}}else if("version"===t&&"number"!=typeof e[t])return[!1,`Invalid version '${e[t]}' in layout: Version must be a number`]}return[!0,"Valid layout"]}static layout(e){const t=new n(e);return t.layout.version=e,t}table(e){return this.layout.tables[e]={},new i(this.layout.tables[e])}getLayout(){return this.layout}}class i{tableLayout;constructor(e){this.tableLayout=e}index(e){return this.tableLayout.indexes=this.tableLayout.indexes??[],this.tableLayout.indexes.push({keyPath:e}),this}}},"./src/public/models/Content/KeyValueDatabaseQueryBuilder.ts":(e,t,s)=>{s.r(t),s.d(t,{QueryBuilder:()=>i});var n=s("./src/public/errors/SDKClientError.ts");class i{query;constructor(e){this.query={orderBy:{key:e,direction:"asc"}}}static index(e){if("string"!=typeof e||0===e.length)throw new n.SDKClientError(n.SDKClientErrorCodes.QueryBuilderInvalidArgument,"Invalid index key: must be a string");return new i(e)}static validateQuery(e){try{return i.buildQuery(e),!0}catch(e){return!1}}static buildQuery(e){const t=i.index(e.orderBy?.key??e.where?.key??"");if(e.where){const s=e.where;if((i.isWhereValue(s)||i.isWhereValues(s)||i.isWhereBetween(s))&&t.where(s.operator,s.value),e.orderBy?.key&&e.orderBy?.key!==e.where.key)throw new n.SDKClientError(n.SDKClientErrorCodes.QueryBuilderInvalidArgument,"Invalid query: where and orderBy clauses must use the same key")}return e.orderBy&&t.orderBy(e.orderBy.direction),e.limit&&t.limit(e.limit),e.offset&&t.offset(e.offset),t}getQuery(){return{...this.query}}where(e,t){const s={key:this.query.orderBy.key,operator:e,value:t};if(!i.isWhereValue(s)&&!i.isWhereValues(s)&&!i.isWhereBetween(s))throw new n.SDKClientError(n.SDKClientErrorCodes.QueryBuilderInvalidArgument,"Invalid where clause");return this.query.where=s,this}orderBy(e){if("asc"!==e&&"desc"!==e)throw new n.SDKClientError(n.SDKClientErrorCodes.QueryBuilderInvalidArgument,"Invalid order: must be asc or desc");return this.query.orderBy.direction=e,this}limit(e){if("number"!=typeof e||e<0)throw new n.SDKClientError(n.SDKClientErrorCodes.QueryBuilderInvalidArgument,"Invalid limit: must be a positive number");return this.query.limit=e,this}offset(e){if("number"!=typeof e||e<0)throw new n.SDKClientError(n.SDKClientErrorCodes.QueryBuilderInvalidArgument,"Invalid offset: must be a positive number");return this.query.offset=e,this}static isWhereValue(e){if(!(e&&"object"==typeof e&&"operator"in e&&"value"in e))return!1;const{operator:t,value:s}=e;return!(!["==","!=",">","<","<=",">="].includes(t)||Array.isArray(s))}static isWhereValues(e){if(!(e&&"object"==typeof e&&"operator"in e&&"value"in e))return!1;const{operator:t,value:s}=e;return!(!["in","not-in"].includes(t)||!Array.isArray(s))}static isWhereBetween(e){if(!(e&&"object"==typeof e&&"operator"in e&&"value"in e))return!1;const{operator:t,value:s}=e;return!("between"!==t||!Array.isArray(s)||2!==s.length)}}},"./src/services/Auth/FirebaseAuthService.ts":(e,t,s)=>{s.r(t),s.d(t,{FirebaseAuthService:()=>o});var n=s("firebase/auth"),i=s("firebase/functions"),r=s("./src/services/Firebase/FirebaseService.ts");class o{vendorId;user;constructor(e){this.vendorId=e}async signInWithCredential(e){const t=await(0,i.httpsCallable)(r.default.getFunctions(),"sdkCreateToken")({uid:`ccc${this.vendorId}ccc${e.id}`}),s=await(0,n.signInWithCustomToken)(r.default.getAuth(),t.data.token);this.user=s.user}async signOut(){await(0,n.signOut)(r.default.getAuth())}getIdToken(){return this.user?.getIdToken()??Promise.reject("User not signed in")}}},"./src/services/Discovery/FirebaseRDBDiscoveryService.ts":(e,t,s)=>{s.r(t),s.d(t,{FirebaseRDBDiscoveryService:()=>a});var n=s("firebase/database"),i=s("./src/services/Firebase/FirebaseService.ts"),r=s("./src/utils/Logger/Logger.ts"),o=s("./src/utils/Observer/Observer.ts");class a{vendorId;clusterId;localNode;minConnections;disconnectCallback=(0,o.createSingleObserver)();firebaseUnsubscriber;childRemovedUnsubscriber;onDisconnectHandler;connected=!1;clusterKey;nodeKey;constructor(e,t,s,o){this.vendorId=e,this.clusterId=t,this.localNode=s,this.minConnections=o,this.clusterKey=`ccc${this.vendorId}ccc${this.clusterId}`,this.nodeKey=`ccc${this.vendorId}ccc${this.localNode.getId()}`,this.firebaseUnsubscriber=(0,n.onValue)((0,n.ref)(i.default.getDatabase(),".info/connected"),(e=>{!0!==e.val()?this.connected&&r.default.error("firebase-disconnect",{clusterId:this.clusterId,nodeId:this.localNode.getId(),nodeType:this.localNode.type}):(this.connected=!0,this.setOnDisconnectHandler(),r.default.warning("firebase-connect",{clusterId:this.clusterId,nodeId:this.localNode.getId(),nodeType:this.localNode.type}))}))}async join(){await this.joinCluster();const e=await this.getAncestors();return this.childRemovedUnsubscriber=(0,n.onChildRemoved)((0,n.ref)(i.default.getDatabase(),`clusters/${this.clusterKey}/nodes`),(e=>{const t=e.key;if(!t)return;const s=t.replace(`ccc${this.vendorId}ccc`,"");this.disconnectCallback.publish(s)})),e}async close(){this.childRemovedUnsubscriber?.(),delete this.childRemovedUnsubscriber,this.onDisconnectHandler?.cancel(),delete this.onDisconnectHandler,this.firebaseUnsubscriber?.(),delete this.firebaseUnsubscriber,await(0,n.remove)((0,n.ref)(i.default.getDatabase(),`clusters/${this.clusterKey}/nodes/${this.nodeKey}`))}onNodeDisconnect(e){return this.disconnectCallback.subscribe(e)}async getAncestors(){const e=[],t=await(0,n.get)((0,n.ref)(i.default.getDatabase(),`clusters/${this.clusterKey}/nodes`)),s=[];return t.forEach((e=>{const t=e.key?.replace(`ccc${this.vendorId}ccc`,"");s.push({id:t,joinedAt:e.val().joinedAt,priority:e.val().priority})})),s.sort(((e,t)=>e.joinedAt===t.joinedAt?e.priority-t.priority:e.joinedAt-t.joinedAt)).splice(s.findIndex((e=>e.id===this.localNode.getId()))),s.sort(((e,t)=>t.joinedAt===e.joinedAt?t.priority-e.priority:t.joinedAt-e.joinedAt)).forEach((t=>{e.length>=this.minConnections||e.push(t.id)})),r.default.logEvent("discover",{clusterId:this.clusterId,nodeId:this.localNode.getId(),nodeType:this.localNode.type,data:{ancestorIds:e,allNodes:s}}),e}async joinCluster(){await(0,n.set)((0,n.ref)(i.default.getDatabase(),`clusters/${this.clusterKey}/nodes/${this.nodeKey}`),{joinedAt:(0,n.serverTimestamp)(),priority:Math.random()})}setOnDisconnectHandler(){this.onDisconnectHandler&&this.onDisconnectHandler.cancel(),this.onDisconnectHandler=(0,n.onDisconnect)((0,n.ref)(i.default.getDatabase(),`clusters/${this.clusterKey}/nodes/${this.nodeKey}`)),this.onDisconnectHandler.remove()}}},"./src/services/Firebase/FirebaseService.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var n=s("firebase/app"),i=s("firebase/auth"),r=s("firebase/database"),o=s("firebase/firestore"),a=s("firebase/functions"),c=s("./src/environments/Environment.ts");class d{static instance;app;auth;functions;database;firestore;clockSkew;constructor(){}static getInstance(){return d.instance||(d.instance=new d),d.instance}getApp(){return this.app||(this.app=(0,n.initializeApp)(c.Environment.firebaseConfig)),this.app}getAuth(){return this.auth||(this.auth=(0,i.getAuth)(this.getApp())),this.auth}getFunctions(){return this.functions||(this.functions=(0,a.getFunctions)(this.getApp(),c.Environment.firebaseConfig.functionsRegion)),this.functions}getDatabase(){return this.database||(this.database=(0,r.getDatabase)(this.getApp())),this.database}getFirestore(){return this.firestore||(this.firestore=(0,o.getFirestore)(this.getApp())),this.firestore}async getEstimatedTimestamp(){if(this.clockSkew)return Date.now()+this.clockSkew;const e=this.getDatabase(),t=(0,r.ref)(e,".info/connected"),s=(0,r.onValue)(t,(e=>{!1===e.val()&&(s(),delete this.clockSkew)})),n=(0,r.ref)(e,".info/serverTimeOffset");return new Promise((e=>{(0,r.onValue)(n,(t=>{(0,r.off)(n),this.clockSkew=t.val(),e(Date.now()+(this.clockSkew??0))}))}))}}const l=d.getInstance()},"./src/services/Graph/GraphService.ts":(e,t,s)=>{s.r(t),s.d(t,{GraphService:()=>n});class n{minConnections;maxConnections;maxDistance;ranges=[];maxLayer;remoteNodes=new Map;constructor(e,t,s){this.minConnections=e,this.maxConnections=t,this.maxDistance=s,this.maxLayer=(this.maxConnections-2*this.minConnections)/2,this.ranges.push({start:1,end:this.getNextTargetRank(1,1)-1});for(let e=0;e<this.maxLayer;++e)this.ranges.push({start:this.getNextTargetRank(1,e+1),end:this.getNextTargetRank(1,e+2)-1})}getNextTargetRank(e,t=1){let s=this.maxDistance-this.minConnections,n=1;for(let e=1;e<t;++e)s*=this.maxDistance-this.minConnections-e,n*=this.maxDistance-this.minConnections-e+1;return s*this.minConnections+e-n}getCurrentMaxLayer(e){let t=0;for(;this.ranges[t].end<e;)t+=1;return t}getMinConnections(){return this.minConnections}getMaxConnections(){return this.maxConnections}getMaxDistance(){return this.maxDistance}getRemoteNodes(){return this.remoteNodes}setRemoteNode(e,t){this.remoteNodes.set(e,t)}hasRemoteNode(e){return this.remoteNodes.has(e)}getRemoteNode(e){return this.remoteNodes.get(e)}deleteRemoteNode(e){this.remoteNodes.delete(e)}getClosestNodes(e,t){const s=this.getRemoteNode(t)?.getRank()??0;return e.map((e=>this.getRemoteNode(e))).filter((e=>void 0!==e)).sort(((e,t)=>Math.abs(s-(e&&e.getRank()||1/0))-Math.abs(s-(t&&t.getRank()||1/0)))).map((e=>e.getId()))}}},"./src/services/MessageBuffer/MessageBufferService.ts":(e,t,s)=>{s.r(t),s.d(t,{MessageBufferService:()=>r});var n=s("./src/constants/Services.ts"),i=s("./src/utils/Interval/Interval.ts");class r{buffer=new Map;unsubscribeHandler;constructor(){this.unsubscribeHandler=i.default.setInterval((()=>{for(const[e,t]of this.buffer.entries())Date.now()-t>n.MESSAGE_BUFFER_RETENTION_TIME&&this.buffer.delete(e)}),n.MESSAGE_BUFFER_CLEANUP_INTERVAL)}close(){this.unsubscribeHandler()}addMessage(e){this.buffer.set(e,Date.now())}hasMessage(e){return this.buffer.has(e)}}},"./src/services/Transaction/FirebaseRDBTransactionService.ts":(e,t,s)=>{s.r(t),s.d(t,{FirebaseRDBTransactionService:()=>o});var n=s("./src/errors/SDKInternalError.ts"),i=s("firebase/database"),r=s("./src/services/Firebase/FirebaseService.ts");class o{vendorId;clusterId;clusterKey;constructor(e,t){this.vendorId=e,this.clusterId=t,this.clusterKey=`ccc${this.vendorId}ccc${this.clusterId}`}async writeTransaction(e,t,s){if(!1===(await(0,i.runTransaction)((0,i.ref)(r.default.getDatabase(),`clusters/${this.clusterKey}/objectstores/${t}/transactions/lastTransaction`),(t=>{if(!t)return e.id;if(t!==s)throw new n.SDKInternalError(n.SDKInternalError.codes.ObjectStoreNotSynced);return e.id}))).committed)throw new n.SDKInternalError(n.SDKInternalError.codes.ObjectStoreCannotWriteTransaction);e.parentId||delete e.parentId,await(0,i.set)((0,i.ref)(r.default.getDatabase(),`clusters/${this.clusterKey}/objectstores/${t}/transactions/${e.id}`),e)}async getTransactions(e,t){let s=[];const n=await(0,i.get)((0,i.ref)(r.default.getDatabase(),`clusters/${this.clusterKey}/objectstores/${e}/transactions`));if(!n.exists())return s;const o=n.val();s=Object.values(o).filter((e=>"string"!=typeof e));const a=[];let c=s.find((e=>e.parentId===t));for(;c;)a.push(c),c=s.find((e=>e.parentId===c.id));return a}}},"./src/utils/Interval/Interval.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var n=s("./src/constants/Interval.ts");class i{static instance;parameters=[];source;constructor(){setInterval((()=>{this.parameters.forEach((e=>{if(Date.now()-e.lastExecuted>e.interval){try{e.callback()}catch(e){}e.lastExecuted=Date.now()}}))}),n.INTERVAL_TIME)}static getInstance(){return i.instance||(i.instance=new i),i.instance}startNoThrottlingHack(e){const t=this.createConstantSource(e),s=e.createGain();s&&t&&(s.gain.value=.001,t.connect(s),s.connect(e.destination),t.start())}stopNoThrottlingHack(){this.source&&(this.source.stop(),this.source.disconnect(),this.source=void 0)}wait(e){return new Promise((t=>{setTimeout(t,e)}))}setInterval(e,t){return this.parameters.push({callback:e,interval:t,lastExecuted:Date.now()}),()=>{this.parameters=this.parameters.filter((t=>t.callback!==e))}}createConstantSource(e){if(e.createConstantSource)return e.createConstantSource();const t=e.createBufferSource(),s=e.createBuffer(1,1,e.sampleRate);return s.getChannelData(0)[0]=10,t.buffer=s,t.loop=!0,t}}const r=i.getInstance()},"./src/utils/Logger/Helpers.ts":(e,t,s)=>{s.r(t),s.d(t,{formatCurrentDate:()=>c,getFormattedSytemLog:()=>d,getLoggableSystemMessage:()=>o});var n=s("./src/constants/System.ts");const i=["PeerConnection","Node","Content","Subscription","Stats","Detection","Remediation"],r=[["Offer","Answer","Handshake","Success","NeedRestart","Restart","Disconnect","Stats","OptimizationConnectionSuccess"],["NodeJoin","NodeUpdate","NodeConnectionsUpdate","NodeLeave"],["PublishMediaStream","UnpublishMediaStream","SubscribeMediaStream","UpdateMediaStream","UnsubscribeMediaStream","CloseObjectStoreBucket","CloseKeyValueDatabase","ClosePubSubTopic","CloseMediaStream","LocalMediaStreamTrackFail","RemoteMediaStreamTrackFail","RequestSyncKeyValueDatabase","SendTransactionsDump","RequestTransactionsValue","ObjectStoreStats","KeyValueDatabaseStats"],["SubscribeMediaStream","UpdateMediaStream","UnsubscribeMediaStream","NeedMediaStream","RestartNeedMediaStream","CanProvideMediaStream","CannotProvideMediaStream","MediaStreamUnavailable"],["StreamReport","LocalReport"],["Problem"],["Remediation","RemoteRemediation"]];function o(e){return{...e,systemMessageType:i[e.messageType],systemContentMessageType:r[e.messageType][e.content.type]}}const a={hour:"2-digit",minute:"2-digit",second:"2-digit"};function c(){const e=new Date,t=e.getMilliseconds(),s=e.toLocaleDateString("en-US",a).match(/\d\d:\d\d:\d\d/)?.[0];return`${s}.${t>100?`${t}`:t>10?`0${t}`:`00${t}`}`}function d(e,t){const s=c(),{sourceId:i,destinationIds:r,systemMessageType:a,systemContentMessageType:d}=o(e);return`${s} - ${t} - ${i===t?`Sending '${a}' to ${r?`${r}`:"everyone"}`:e.sourceId===n.SYSTEM_TOPIC_INTERNAL?`Internal event '${a}'`:`${r?"":"Everyone "}Receiving '${a}' from ${i}`} with '${d}' payload:`}},"./src/utils/Logger/Logger.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>c});var n=s("firebase/firestore"),i=s("./src/environments/Environment.ts"),r=s("./src/interfaces/Utils/Logger.ts"),o=s("./src/services/Firebase/FirebaseService.ts");class a{static instance;enabledChannels=[r.LoggingChannels.Default];debugEnabled=!0;loggingConnectors;vendorId="";globalObject;batchQueue=[];currentBatch=this.createNewBatch();batchTimeout;retryLimit=10;retryDelay=500;batchSize=450;timeoutValue=1e3;constructor(){if("undefined"!=typeof window)this.globalObject=window;else{if(void 0===s.g)throw new Error("No global object found");this.globalObject=s.g}this.loadEnabledChannels(),this.globalObject.crewdleSDKEnableLogging=e=>{if(e===r.LoggingChannels.All)return this.enabledChannels=Object.keys(r.LoggingChannels).map((e=>{const t=e;return r.LoggingChannels[t]})),void Object.keys(r.LoggingChannels).forEach((e=>{const t=e;localStorage.setItem(`crewdle-sdk-logging-${r.LoggingChannels[t]}`,"true")}));this.enabledChannels.includes(e)||(this.enabledChannels.push(e),localStorage.setItem(`crewdle-sdk-logging-${e}`,"true"))},this.globalObject.crewdleSDKDisableLogging=e=>{if(!e||e===r.LoggingChannels.All)return this.enabledChannels=[],void Object.keys(r.LoggingChannels).forEach((e=>{const t=e;localStorage.removeItem(`crewdle-sdk-logging-${r.LoggingChannels[t]}`)}));this.enabledChannels.includes(e)&&(this.enabledChannels=this.enabledChannels.filter((t=>t!==e)),localStorage.removeItem(`crewdle-sdk-logging-${e}`))},this.globalObject.crewdleSDKLoggingChannels=r.LoggingChannels}static getInstance(){try{return a.instance||(a.instance=new a),a.instance}catch(e){return console.error("Logger.getInstance",e),{log:()=>{},logRaw:()=>{},debug:()=>{},setVendorId:()=>{},setLoggingConnectors:()=>{},error:()=>{},logEvent:()=>{},logServiceEvent:()=>{},logStorage:()=>{},warning:()=>{},isChannelEnabled:()=>!1}}}setVendorId(e){this.vendorId=e}setLoggingConnectors(e){this.loggingConnectors=e}debug(e,...t){this.debugEnabled&&this.log(r.LoggingChannels.Default,`DEBUG - ${e}`,...t)}log(e,t,...s){i.Environment.isProduction||(this.enabledChannels.includes(e)&&console.log(`Channel '${e}'\n`,new Date+"\n",t,...s),this.loggingConnectors&&this.loggingConnectors.forEach((n=>{this.isInternalLoggingConnector(n)&&n.getEnabledChannels().includes(e)&&n.log(t,{vendorId:this.vendorId,nodeId:"",nodeType:"",data:{channel:e,...s}})})))}logRaw(e,t,...s){i.Environment.isProduction||(this.enabledChannels.includes(e)&&console.log(t,...s),this.loggingConnectors&&this.loggingConnectors.forEach((n=>{this.isInternalLoggingConnector(n)&&n.getEnabledChannels().includes(e)&&n.log(t,{vendorId:this.vendorId,nodeId:"",nodeType:"",data:{channel:e,...s}})})))}logEvent(e,t){if(this.loggingConnectors){const s={vendorId:this.vendorId,...t};this.loggingConnectors.forEach((t=>{t.log(e,s)}))}}logServiceEvent(e,t){const s=(0,n.doc)((0,n.collection)(o.default.getFirestore(),`developers/${this.vendorId}/logs`));this.currentBatch.batch.set(s,{...t,service:e,timestamp:(0,n.serverTimestamp)()}),this.currentBatch.operations.push({type:"set",ref:s.path,data:t}),this.logBatch()}logStorage(e,t,s){(0,n.setDoc)((0,n.doc)(o.default.getFirestore(),`developers/${this.vendorId}/${e}/${t}`),{storage:s,timestamp:(0,n.serverTimestamp)()})}logBatch(){this.currentBatch.counter++,this.currentBatch.counter===this.batchSize?this.processBatch():this.batchTimeout||(this.batchTimeout=this.globalObject.setTimeout((()=>this.processBatch()),this.timeoutValue))}async processBatch(){for(this.batchQueue.push(this.currentBatch),this.currentBatch=this.createNewBatch();this.batchQueue.length>0;){const e=this.batchQueue.shift();if(!await this.commitBatch(e,0))break}clearTimeout(this.batchTimeout),this.batchTimeout=void 0}async commitBatch(e,t){if(e.counter>0)try{return await e.batch.commit(),!0}catch(s){if(console.error("Error committing batch:",s,"Operations:",e.operations),!(t<this.retryLimit)){const{nodeId:t="",nodeType:n="",clusterId:i=""}=e.operations[0].data,r={nodeId:t,nodeType:n,clusterId:i,data:{operations:e.operations,error:s}};return this.error("Failed to commit batch after retries:",r),!1}setTimeout((()=>this.commitBatch(e,t+1)),this.retryDelay*Math.pow(2,t))}}error(e,t,...s){if(console.error(new Date,e,t,...s),this.loggingConnectors){const s={vendorId:this.vendorId,...t};this.loggingConnectors.forEach((t=>{t.error(e,s)}))}}warning(e,t,...s){if(console.warn(new Date,e,t,s),this.loggingConnectors){const s={vendorId:this.vendorId,...t};this.loggingConnectors.forEach((t=>{t.warn(e,s)}))}}isChannelEnabled(e){return this.enabledChannels.includes(e)}loadEnabledChannels(){try{Object.keys(r.LoggingChannels).forEach((e=>{const t=e;localStorage.getItem(`crewdle-sdk-logging-${r.LoggingChannels[t]}`)&&(console.log("LoggingService: logging enabled for",r.LoggingChannels[t]),this.enabledChannels.push(r.LoggingChannels[t]))}))}catch(e){}}isInternalLoggingConnector(e){return void 0!==e.getEnabledChannels}createNewBatch(){return{batch:(0,n.writeBatch)(o.default.getFirestore()),operations:[],counter:0}}}const c=a.getInstance()},"./src/utils/ObjectStore/Helpers.ts":(e,t,s)=>{s.r(t),s.d(t,{getFileChecksum:()=>a,getFileContent:()=>d,getPathName:()=>r,getPathParts:()=>i,readFileContent:()=>c,splitPathName:()=>o});var n=s("./src/constants/Content.ts");function i(e){return e.split("/").filter((e=>e.length>0))}function r(e,t){return"/"===e?e+t:e+"/"+t}function o(e){const t=i(e),s=t.pop()||"",n=t.join("/");return[0===n.length?"/":n,s]}async function a(e){const t=await e.arrayBuffer(),s=new Uint8Array(t);let n=0;for(const e of s)n+=e;return n.toString()}function c(e){return new Promise(((t,s)=>{!function(e,t,s){let i=0;const r=[],o=()=>{let a=i+n.CONTENT_FILE_CHUNK_SIZE;a>e.size&&(a=e.size);let c=e.slice(i,a),d=new FileReader;d.onload=s=>{r.push(d.result),i=a,i<e.size?o():t(r)},d.onerror=e=>{s(e)},d.readAsArrayBuffer(c)};o()}(e,t,s)}))}function d(e,t,s){return new File(e,t,{type:s})}},"./src/utils/Observer/Observer.ts":(e,t,s)=>{function n(){let e=[];return{subscribe:t=>(e.push(t),()=>{e=e.filter((e=>e!==t))}),publish:t=>{e.forEach((e=>e(t)))}}}function i(){let e;return{subscribe:t=>(e=t,()=>{e=void 0}),publish:t=>{e&&e(t)}}}s.r(t),s.d(t,{createObserver:()=>n,createSingleObserver:()=>i})},"./src/utils/Queue/PriorityRetryQueue.ts":(e,t,s)=>{s.r(t),s.d(t,{createPriorityRetryQueue:()=>o});var n=s("./src/interfaces/Utils/Queue.ts"),i=s("./src/utils/Interval/Interval.ts"),r=s("./src/utils/Queue/Queue.ts");function o(e,t=n.QueueElementPriority,s=!1){let o=!1;const a=[];async function c(){if(!o){for(o=!0;a.some((e=>e.head));){let t,n=0;for(const[e,s]of a.entries())if(t=s.shift(),n=e,t)break;if(t)try{if(e instanceof r.SyncQueueCallback&&e.call(t),e instanceof r.AsyncQueueCallback&&await e.call(t),a.slice(-1).some((e=>e.head)))continue;const s=a.length-1;n===s&&a[s].head&&await i.default.wait(0)}catch(i){s?a[n].push(t,!1):a[n].unshift(t,!1),await e.wait()}}o=!1}}return Object.values(t).forEach((e=>{"string"!=typeof e&&(a[e]=(0,r.createQueue)(c))})),{queues:a}}},"./src/utils/Queue/Queue.ts":(e,t,s)=>{s.r(t),s.d(t,{AsyncQueueCallback:()=>i,SyncQueueCallback:()=>n,createQueue:()=>r});class n{callback;retryCallback;constructor(e,t){this.callback=e,this.retryCallback=t}call(e){this.callback(e)}async wait(){await this.retryCallback()}}class i{callback;retryCallback;constructor(e,t){this.callback=e,this.retryCallback=t}async call(e){await this.callback(e)}async wait(){await this.retryCallback()}}function r(e=(()=>{}),t=(()=>!1),s=(()=>{})){let n,i,r=0;return{get size(){return r},get head(){return n},get tail(){return i},set head(e){n=e},set tail(e){i=e},push(s,o=!0){const a={value:s};o&&t(a)?e():(i&&(a.previous=i,i.next=a),i=a,n||(n=a),r+=1,o&&e())},pop(){if(!i)return;const e=i.value;return i=i.previous,i&&delete i.next,i||(n=void 0),r-=1,e},unshift(s,o=!0){const a={value:s};o&&t(a)?e():(n&&(n.previous=a,a.next=n),n=a,i||(i=a),r+=1,o&&e())},shift(){if(!n)return;const e=n.value;return n=n.next,n&&delete n.previous,n||(i=void 0),r-=1,e},clear(){s(),n=void 0,i=void 0,r=0}}}},"./src/utils/Queue/RetryQueue.ts":(e,t,s)=>{s.r(t),s.d(t,{createRetryQueue:()=>i});var n=s("./src/utils/Queue/Queue.ts");function i(e,t=!1,s=(()=>{}),i=(()=>!1),r=(()=>{})){let o=!1;const a=(0,n.createQueue)((async function(){if(!o){for(o=!0;a.head;){const i=a.shift();if(i)try{e instanceof n.SyncQueueCallback&&e.call(i),e instanceof n.AsyncQueueCallback&&await e.call(i),s(i)}catch(s){t?a.push(i,!1):a.unshift(i,!1),await e.wait()}}o=!1}}),i,r);return a}},"./src/utils/Queue/VersionedRetryQueue.ts":(e,t,s)=>{s.r(t),s.d(t,{createVersionedRetryQueue:()=>i});var n=s("./src/utils/Queue/RetryQueue.ts");function i(e,t=!1){let s=new Map;const i=(0,n.createRetryQueue)(e,t,(function(e){r(e)&&s.delete(`${e.sourceId}-${e.destinationIds??[]}-${e.messageType}-${e.content.type}`)}),(function(e){return!!function(e){const t=e.value;if(!r(t))return!1;const n=`${t.sourceId}-${t.destinationIds??[]}-${t.messageType}-${t.content.type}`,o={version:t.content.version,element:e},a=s.get(n);return a?(a.version>=t.content.version||(a.element.previous&&(a.element.previous.next=e,e.previous=a.element.previous),a.element.next&&(a.element.next.previous=e,e.next=a.element.next),a.element===i.head&&(i.head=e),a.element===i.tail&&(i.tail=e),s.set(n,o)),!0):(s.set(n,o),!1)}(e)}),(function(){s.clear()}));function r(e){if(e&&"object"==typeof e&&e.hasOwnProperty("content")&&e.hasOwnProperty("messageType")&&e.hasOwnProperty("sourceId")){const t=e;if(t.content&&"object"==typeof t.content&&t.content.hasOwnProperty("version")&&t.content.hasOwnProperty("type"))return!0}return!1}return i}},"./src/utils/Support/Support.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var n=s("./src/interfaces/Utils/Logger.ts"),i=s("./src/interfaces/Utils/Support.ts"),r=s("./src/utils/Logger/Logger.ts");class o{static instance;featureSupport=[];constructor(){}static getInstance(){return o.instance||(o.instance=new o),o.instance}initialize(){this.checkWebRTC(),this.checkMediaStream(),this.checkScreenSharing(),this.checkAudioVolume(),this.checkDeviceConfig(),this.checkAudioOutput(),this.checkMediaRecording(),this.checkBackgrounds(),this.checkWebGL(),this.checkAudioContext(),r.default.log(n.LoggingChannels.Support,"Support: current config",{featureSupport:this.featureSupport})}isFeatureSupported(e){const t=this.featureSupport.find((t=>t.name===e));return!!t&&t.supported}logSupport(e){r.default.logEvent("support",{nodeId:e.getId(),nodeType:e.type,data:{featureSupport:this.featureSupport}})}checkWebRTC(){const e=i.SupportFeatureName.WebRTC;let t=!1;"function"==typeof RTCPeerConnection&&"function"==typeof RTCIceCandidate&&"function"==typeof RTCSessionDescription?t=!0:r.default.log(n.LoggingChannels.Support,`Support: ${e} not supported`),this.featureSupport.push({name:e,supported:t})}checkMediaStream(){const e=i.SupportFeatureName.MediaStream;let t=!1;"function"==typeof MediaStream&&"function"==typeof MediaStreamTrack&&"object"==typeof navigator&&"object"==typeof navigator.mediaDevices&&"function"==typeof navigator.mediaDevices.getUserMedia?t=!0:r.default.log(n.LoggingChannels.Support,`Support: ${e} not supported`),this.featureSupport.push({name:e,supported:t})}checkScreenSharing(){const e=i.SupportFeatureName.ScreenSharing;let t=!1;"object"==typeof navigator&&"object"==typeof navigator.mediaDevices&&"function"==typeof navigator.mediaDevices.getDisplayMedia?t=!0:r.default.log(n.LoggingChannels.Support,`Support: ${e} not supported`),this.featureSupport.push({name:e,supported:t})}checkAudioVolume(){const e=i.SupportFeatureName.AudioVolume;let t=!1;"function"!=typeof AudioContext||"function"!=typeof ScriptProcessorNode&&"function"!=typeof AudioWorkletNode||"function"!=typeof MediaStreamAudioSourceNode?r.default.log(n.LoggingChannels.Support,`Support: ${e} not supported`):t=!0,this.featureSupport.push({name:e,supported:t})}checkDeviceConfig(){const e=i.SupportFeatureName.DeviceConfig;let t=!1;"object"==typeof navigator&&"object"==typeof navigator.mediaDevices&&"function"==typeof navigator.mediaDevices.enumerateDevices&&"function"==typeof MediaDeviceInfo?t=!0:r.default.log(n.LoggingChannels.Support,`Support: ${e} not supported`),this.featureSupport.push({name:e,supported:t})}checkAudioOutput(){const e=i.SupportFeatureName.AudioOutput;let t=!1;"object"==typeof document&&"function"==typeof document.createElement("video").setSinkId?t=!0:r.default.log(n.LoggingChannels.Support,`Support: ${e} not supported`),this.featureSupport.push({name:e,supported:t})}async checkMediaRecording(){const e=i.SupportFeatureName.Recording;let t=!1;try{const e=document.createElement("canvas");if(MediaRecorder&&MediaSource&&e.captureStream){const s=e.captureStream(),n=new MediaRecorder(s);n.start(),await new Promise((e=>setTimeout(e,2e3))),n.stop(),t="inactive"===n.state}}catch(t){r.default.log(n.LoggingChannels.Support,`Support: ${e} check failed`,t)}this.featureSupport.push({name:e,supported:t}),t||r.default.log(n.LoggingChannels.Support,`Support: ${e} not supported`)}checkBackgrounds(){const e=i.SupportFeatureName.Backgrounds;let t=!1;try{document.createElement("canvas").captureStream&&(t=!0)}catch(t){r.default.log(n.LoggingChannels.Support,`Support: ${e} check failed`,t)}this.featureSupport.push({name:e,supported:t}),t||r.default.log(n.LoggingChannels.Support,`Support: ${e} not supported`)}checkWebGL(){const e=i.SupportFeatureName.WebGL;let t=!1;try{const e=document.createElement("canvas");WebGLRenderingContext&&e.getContext("webgl")&&(t=!0)}catch(t){r.default.log(n.LoggingChannels.Support,`Support: ${e} check failed`,t)}this.featureSupport.push({name:e,supported:t}),t||r.default.log(n.LoggingChannels.Support,`Support: ${e} not supported`)}checkAudioContext(){const e=i.SupportFeatureName.AudioContext;let t=!1;"function"==typeof AudioContext?t=!0:r.default.log(n.LoggingChannels.Support,`Support: ${e} not supported`),this.featureSupport.push({name:e,supported:t})}}const a=o.getInstance()},"@aws-amplify/api":e=>{e.exports=require("@aws-amplify/api")},"@aws-amplify/core":e=>{e.exports=require("@aws-amplify/core")},"@crewdle/mist-connector-indexed-db":e=>{e.exports=require("@crewdle/mist-connector-indexed-db")},"@crewdle/mist-connector-opfs":e=>{e.exports=require("@crewdle/mist-connector-opfs")},"@crewdle/mist-connector-webrtc-browser":e=>{e.exports=require("@crewdle/mist-connector-webrtc-browser")},"@crewdle/web-sdk-types":e=>{e.exports=require("@crewdle/web-sdk-types")},"aws-amplify":e=>{e.exports=require("aws-amplify")},"aws-amplify/utils":e=>{e.exports=require("aws-amplify/utils")},"firebase/app":e=>{e.exports=require("firebase/app")},"firebase/auth":e=>{e.exports=require("firebase/auth")},"firebase/database":e=>{e.exports=require("firebase/database")},"firebase/firestore":e=>{e.exports=require("firebase/firestore")},"firebase/functions":e=>{e.exports=require("firebase/functions")},uuid:e=>{e.exports=require("uuid")}},t={};function s(n){var i=t[n];if(void 0!==i)return i.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,s),r.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{s.r(n),s.d(n,{KeyValueDatabase:()=>i.KeyValueDatabase,LayoutBuilder:()=>a.LayoutBuilder,LoggingChannels:()=>t.LoggingChannels,QueryBuilder:()=>o.QueryBuilder,SDK:()=>c.SDK,SDKClientErrorCodes:()=>e.SDKClientErrorCodes,TableBuilder:()=>a.TableBuilder,logger:()=>r.default});var e=s("./src/public/errors/SDKClientError.ts"),t=s("./src/interfaces/Utils/Logger.ts"),i=s("./src/models/Content/KeyValueDatabase.ts"),r=s("./src/utils/Logger/Logger.ts"),o=s("./src/public/models/Content/KeyValueDatabaseQueryBuilder.ts"),a=s("./src/public/models/Content/KeyValueDatabaseLayoutBuilder.ts"),c=s("./src/models/SDK/SDK.ts")})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,