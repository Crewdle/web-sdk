import type { QueryBuilder } from '../../models/Content/KeyValueDatabaseQueryBuilder';
/**
 * Interface for a key-value database.
 */
export interface IKeyValueDatabase {
    /**
     * Close the database.
     */
    close(): void;
    /**
     * Gets the table with the given name.
     * @param tableName The name of the table to get.
     * @returns The table.
     */
    getTable<T extends IValueType>(tableName: string): IDatabaseTable<T>;
    /**
     * Subscribe to datase events.
     * @param callback The callback to call when a database event is published.
     */
    subscribe(callback: (event: IDatabaseEvent) => void): void;
    /**
     * Unsubscribe from database events.
     */
    unsubscribe(): void;
}
/**
 * Interface for a key-value database table.
 */
export interface IDatabaseTable<T extends IValueType> {
    /**
     * Get the value for a key.
     * @param key The key to get the value for.
     * @returns A promise that resolves with the value for the key.
     */
    get(key: string): Promise<T | undefined>;
    /**
     * Set the value for a key.
     * @param key The key to set the value for.
     * @param value The value to set for the key. It must be {@link https://html.spec.whatwg.org/multipage/structured-data.html#serializable-objects | serializable }.
     * @returns A promise that resolves with the value set.
     */
    set(key: string, value: ValueTypeOmitId<T>): Promise<T>;
    /**
     * Add a value to the database.
     * @param value The value to add.
     * @returns A promise that resolves with the value added.
     */
    add(value: ValueTypeOmitId<T>): Promise<T>;
    /**
     * Delete a key.
     * @param key The key to delete.
     * @returns A promise that resolves when the key has been deleted.
     */
    delete(key: string): Promise<void>;
    /**
     * Clear the database.
     * @returns A promise that resolves when the database has been cleared.
     */
    clear(): Promise<void>;
    /**
     * Get all the values in the database.
     * @param query The query to use to filter the values.
     * If no query is provided, all the values in the database are returned.
     * The query can either be a {@link IDatabaseTableQuery} or a {@link QueryBuilder}.
     * @returns A promise that resolves with all the values in the database.
     */
    list(query?: IDatabaseTableQuery | QueryBuilder): Promise<T[]>;
    /**
     * Count the number of keys in the database.
     * @param query The query to use to filter the keys.
     * If no query is provided, all the keys in the database are counted.
     * The query can either be a {@link IDatabaseTableQuery} or a {@link QueryBuilder}.
     * @returns A promise that resolves with the number of keys in the database.
     */
    count(query?: IDatabaseTableQuery | QueryBuilder): Promise<number>;
    /**
     * Subscribe to changes in the database table.
     * @params callback The callback to call when the database table changes.
     */
    subscribe(callback: (event: IDatabaseTableEvent<T>) => void): void;
    /**
     * Unsubscribe from changes in the database table.
     */
    unsubscribe(): void;
}
/**
 * The supported key-value database events.
 */
export declare enum DatabaseEvent {
    SyncComplete = "sync-complete"
}
/**
 * Interface for key-value database events.
 */
export interface IDatabaseEvent {
    /**
     * The event type.
     */
    event: DatabaseEvent;
}
/**
 * Interface for key-value database table events.
 */
export interface IDatabaseTableEvent<T extends IValueType> {
    /**
     * The action performed on the table.
     */
    action: IDatabaseTableAction;
    /**
     * The value of the object.
     */
    value: T;
}
export type IDatabaseTableAction = 'add' | 'update' | 'delete';
/**
 * Interface for a key-value database layout.
 * Example:
 * {
 *   'table1': {
 *     indexes: [
 *       { keyPath: 'key1' },
 *       { keyPath: 'key2' },
 *     ],
 *   },
 * }
 *
 */
export interface IDatabaseLayout {
    /**
     * The tables in the database.
     * The primary key of each table is automatically generated by the database.
     */
    tables: {
        [tableName: string]: ITableLayout;
    };
    version: number;
}
/**
 * Interface for a key-value database table layout.
 */
export interface ITableLayout {
    /**
     * The secondary indexes for the table.
     */
    indexes?: ITableIndex[];
}
/**
 * Interface for a key-value database table index layout.
 */
export interface ITableIndex {
    /**
     * The key path for the index.
     */
    keyPath: string;
}
/**
 * Base interface for all value types.
 * Value types define the value of objects in a {@link IDatabaseTable}.
 */
export interface IValueType {
    id: string;
}
/**
 * An helper type used to set or add object values in a {@link IDatabaseTable} without explicitely defining an id.
 */
export type ValueTypeOmitId<T extends IValueType> = Omit<T, 'id'>;
/**
 * The supported types for indexed keys.
 */
export type SupportedIndexTypes = string | number | boolean;
/**
 * Interface for a key-value database table query.
 */
export interface IDatabaseTableQuery {
    /**
     * The where clause for the query.
     */
    where?: IDatabaseTableQueryWhereValue | IDatabaseTableQueryWhereValues | IDatabaseTableQueryWhereBetween;
    /**
     * The order by clause for the query.
     * The key must be a valid indexed key path for the table and match the where clause key, if provided.
     */
    orderBy?: {
        key: string;
        direction: 'asc' | 'desc';
    };
    /**
     * The limit and offset for the query, allowing pagination.
     */
    limit?: number;
    offset?: number;
}
/**
 * Interface for a where clause with basic operators and a single value.
 */
export interface IDatabaseTableQueryWhereValue {
    /**
     * The key must be a valid indexed key path for the table.
     */
    key: string;
    /**
     * The operator must be a valid operator for the key type.
     */
    operator: '==' | '!=' | '>' | '<' | '<=' | '>=';
    /**
     * The value must be a single valid value for the key type.
     */
    value: SupportedIndexTypes;
}
/**
 * Interface for a where values are 'in' or 'not-in' the given values.
 */
export interface IDatabaseTableQueryWhereValues {
    /**
     * The key must be a valid indexed key path for the table.
     */
    key: string;
    /**
     * The operator must be 'in' or 'not-in'.
     */
    operator: 'in' | 'not-in';
    /**
     * The value must be an array of values.
     */
    value: SupportedIndexTypes[];
}
/**
 * Interface for a where values are 'between' the lower and upper bounds.
 * Between is always inclusive.
 */
export interface IDatabaseTableQueryWhereBetween {
    /**
     * The key must be a valid indexed key path for the table.
     */
    key: string;
    /**
     * The operator must be 'between'.
     */
    operator: 'between';
    /**
     * The value must be an array of two elements. The first element is the lower bound and the second element is the upper bound.
     */
    value: [SupportedIndexTypes, SupportedIndexTypes];
}
